/*
 * The MIT License
 *
 * Copyright 2017-2018 Norwegian University of Technology (NTNU)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package no.mechatronics.sfi.rmu

import io.grpc.BindableService
import io.grpc.stub.StreamObserver

import no.mechatronics.sfi.fmi4j.common.FmiStatus
import no.mechatronics.sfi.rmu.grpc.services.FmuService

import org.slf4j.Logger
import org.slf4j.LoggerFactory

class HydraulicCylinderService: HydraulicCylinderServiceGrpc.HydraulicCylinderServiceImplBase(), FmuService {

    
    /**
     * Autogenerated method
     */
    override fun readDrainTankPE(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeDrainTankPE (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(8, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readDrainTankPF(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeDrainTankPF (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(21, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readDrainTankPressureTank(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeDrainTankPressureTank (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(1, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readDrainTankFlowTank(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeDrainTankFlowTank (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(21, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readOneJunctionFlow(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeOneJunctionFlow (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readOneJunctionP1E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeOneJunctionP1E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(10, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readOneJunctionP2E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeOneJunctionP2E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(9, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readOneJunctionP3E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeOneJunctionP3E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(18, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readOneJunctionP1F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeOneJunctionP1F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readOneJunctionP2F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeOneJunctionP2F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readOneJunctionP3F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeOneJunctionP3F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonForcePE(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonForcePE (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(10, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonForcePF(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonForcePF (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonForceEffort(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonForceEffort (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(11, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonForceFlow(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonForceFlow (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(12, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonSideP1E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonSideP1E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(13, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonSideP1F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonSideP1F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(15, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonSideP2E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonSideP2E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(9, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonSideP2F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonSideP2F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonSideDiameterPiston(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonSideDiameterPiston (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(2, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonSideAreaPistonSide(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonSideAreaPistonSide (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(14, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpPE(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpPE (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(13, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpPF(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpPF (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(15, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpGain(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpGain (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(16, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpDisplacementPump(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpDisplacementPump (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(3, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpRpmPump(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpRpmPump (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(4, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpFlowMaxPump(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpFlowMaxPump (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(17, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpPressurePump(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpPressurePump (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(13, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPumpFlowPump(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePumpFlowPump (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(15, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readRodSideP1E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeRodSideP1E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(18, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readRodSideP1F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeRodSideP1F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readRodSideP2E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeRodSideP2E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(8, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readRodSideP2F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeRodSideP2F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(19, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readRodSideDiameterPiston(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeRodSideDiameterPiston (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(5, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readRodSideDiameterRod(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeRodSideDiameterRod (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(6, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readRodSideAreaRodSide(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeRodSideAreaRodSide (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(20, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readSplitter1Input(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeSplitter1Input (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readSplitter1Output1(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeSplitter1Output1 (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readSplitter1Output2(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeSplitter1Output2 (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readZeroJunctionEffort(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeZeroJunctionEffort (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(8, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readZeroJunctionP1E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeZeroJunctionP1E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(8, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readZeroJunctionP2E(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeZeroJunctionP2E (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(8, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readZeroJunctionP1F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeZeroJunctionP1F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(21, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readZeroJunctionP2F(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeZeroJunctionP2F (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(19, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readConstraintForce(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeConstraintForce (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(22, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readFlowGain(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeFlowGain (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(23, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonDisplacement(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonDisplacement (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(24, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readPistonSpeed(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writePistonSpeed (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(25, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readIntegrateInput(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeIntegrateInput (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(27, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readIntegrateOutput(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeIntegrateOutput (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(26, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }
    /**
     * Autogenerated method
     */
    override fun readIntegrateInitial(req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.RealRead> ) {

        val fmuId = req.value
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val valueReference = req.value
            val read = fmu.variableAccessor.readReal(valueReference)
            responseObserver.onNext(FmiDefinitions.RealRead.newBuilder()
                    .setValue(read.value)
                    .setStatus(convert(read.status))
                    .build())
        } else {
            LOG.warn("No FMU with id: {}", fmuId)
        }

        responseObserver.onCompleted()

    }

    /**
     * Autogenerated method
     */
    override fun writeIntegrateInitial (req: HydraulicCylinderProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

        val fmuId = req.fmuId
        val fmu = Fmus[fmuId]
        if (fmu != null) {
            val status = fmu.variableAccessor.writeReal(7, req.value)
            statusReply(status, responseObserver)
        } else {
            LOG.warn("No FMU with id: {}", fmuId);
            statusReply(FmiStatus.Fatal, responseObserver)
        }

    }

    companion object {
        val LOG: Logger = LoggerFactory.getLogger(HydraulicCylinderService::class.java.simpleName)
    }

}


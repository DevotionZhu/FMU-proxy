/*
 * The MIT License
 *
 * Copyright 2017-2018 Norwegian University of Technology (NTNU)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

syntax = "proto3";

package fmuproxy.grpc;
option java_package = "no.ntnu.ihb.fmuproxy.grpc";

message ModelDescription {
    string fmi_version = 1;
    string guid = 2;
    string model_name = 3;
    string license = 4;
    string copyright = 5;
    string author = 6;
    string version = 7;
    string description = 8;
    string generation_tool = 9;
    string generation_date_and_time = 10;
    DefaultExperiment default_experiment = 11;
    string variable_naming_convention = 12;
    repeated ScalarVariable model_variables = 13;
    ModelStructure model_structure = 14;
}

message CoSimulationAttributes {
    string model_identifier = 1;
    bool can_get_and_set_FMUstate = 2;
    bool can_serialize_FMUstate = 3;
    bool provides_directional_derivative = 4;
    bool can_handle_variable_communication_step_size = 5;
    bool can_interpolate_inputs = 6;
    uint32 max_output_derivative_order = 7;
}

message IntegerAttribute {
    int32 min = 1;
    int32 max = 2;
    int32 start = 3;
    string quantity = 4;
}

message RealAttribute {
    double min = 1;
    double max = 2;
    double start = 3;
    string quantity = 4;
}

message StringAttribute {
    string start = 1;
}

message BooleanAttribute {
    bool start = 1;
}

message EnumerationAttribute {
    int32 min = 1;
    int32 max = 2;
    int32 start = 3;
    string quantity = 4;
}

message ScalarVariable {
    uint64 value_reference = 1;
    string name = 2;
    string description = 3;
    string initial = 4;
    string causality = 5;
    string variability = 6;
    oneof attribute {
        IntegerAttribute integer_attribute = 10;
        RealAttribute real_attribute = 11;
        StringAttribute string_attribute = 12;
        BooleanAttribute boolean_attribute = 13;
        EnumerationAttribute enumeration_attribute = 14;
    }
}

message DefaultExperiment {
    double start_time = 1;
    double stop_time = 2;
    double tolerance = 3;
    double step_size = 4;
}

message Unknown {
    uint32 index = 1;
    repeated uint32 dependencies = 2;
    repeated string dependencies_kind = 3;
}

message ModelStructure {
    repeated Unknown outputs = 1;
    repeated Unknown derivatives = 2;
    repeated Unknown initial_unknowns = 3;
}

enum Status {
    OK_STATUS = 0;
    WARNING_STATUS = 1;
    DISCARD_STATUS = 2;
    ERROR_STATUS = 3;
    FATAL_STATUS = 4;
    PENDING_STATUS = 5;
}

message FmuId {
    string value = 1;
}

message InstanceId {
    string value = 1;
}

message ModelDescriptionXml {
    string xml = 1;
}

message StatusResponse {
    Status status = 1;
}

message StepResponse {
    Status status = 1;
    double simulation_time = 2;
}

message CreateInstanceFromCSRequest {
    string fmu_id = 1;
}

message CreateInstanceFromMERequest {
    string fmu_id = 1;
    Solver solver = 2;
}

message GetModelDescriptionRequest {
    string fmu_id = 1;
}

message GetCoSimulationAttributesRequest {
    string instance_id = 1;
}

message SetupExperimentRequest {
    string instance_id = 1;
    double start = 2;
    double stop = 3;
    double tolerance = 4;
}

message EnterInitializationModeRequest {
    string instance_id = 1;
}

message ExitInitializationModeRequest {
    string instance_id = 1;
}

message StepRequest {
    string instance_id = 1;
    double step_size = 2;
}

message ResetRequest {
    string instance_id = 1;
}

message TerminateRequest {
    string instance_id = 1;
}

message ReadRequest {
    string instance_id = 1;
    repeated uint64 value_references = 2;
}

message WriteIntegerRequest {
    string instance_id = 1;
    repeated uint64 value_references = 2;
    repeated int32 values = 3;
}

message WriteRealRequest {
    string instance_id = 1;
    repeated uint64 value_references = 2;
    repeated double values = 3;
}

message WriteStringRequest {
    string instance_id = 1;
    repeated uint64 value_references = 2;
    repeated string values = 3;
}

message WriteBooleanRequest {
    string instance_id = 1;
    repeated uint64 value_references = 2;
    repeated bool values = 3;
}

message IntegerRead {
    repeated int32 values = 1;
    Status status = 2;
}

message RealRead {
    repeated double values = 1;
    Status status = 2;
}

message StringRead {
    repeated string values = 1;
    Status status = 2;
}

message BooleanRead {
    repeated bool values = 1;
    Status status = 2;
}

message Solver {
    string name = 1;
    string settings = 2;
}

message Bool {
    bool value = 1;
}

message GetFMUstateRequest {
    string instance_id = 1;
}

message GetFMUstateResponse {
    int64 state = 1;
    Status status = 2;
}

message SetFMUstateRequest {
    string instance_id = 1;
    int64 state = 2;
}

message FreeFMUstateRequest {
    string instance_id = 1;
    int64 state = 2;
}

message SerializeFMUstateRequest {
    string instance_id = 1;
    int64 state = 2;
}

message SerializeFMUstateResponse {
    bytes state = 1;
    Status status = 2;
}

message DeSerializeFMUstateRequest {
    string instance_id = 1;
    bytes state = 2;
}

message DeSerializeFMUstateResponse {
    int64 state = 1;
    Status status = 2;
}

message CanCreateInstanceFromCSRequest {
    string fmu_id = 1;
}

message CanCreateInstanceFromMERequest {
    string fmu_id = 1;
}

message GetDirectionalDerivativeRequest {
    string instance_id = 1;
    repeated uint64 v_unknown_ref = 2;
    repeated uint64 v_known_ref = 3;
    repeated double dv_known_ref = 4;
}

message GetDirectionalDerivativeResponse {
    repeated double dv_unknown_ref = 1;
    Status status = 2;
}

message Url {
    string url = 1;
}

message File {
    string name = 1;
    bytes data = 2;
}

service FmuService {

    rpc LoadFromUrl(Url) returns (FmuId);
    rpc LoadFromFile(File) returns (FmuId);

    rpc GetModelDescription (GetModelDescriptionRequest) returns (ModelDescription);
    rpc GetCoSimulationAttributes (GetCoSimulationAttributesRequest) returns (CoSimulationAttributes);

    rpc CanCreateInstanceFromCS (CanCreateInstanceFromCSRequest) returns (Bool);
    rpc CanCreateInstanceFromME (CanCreateInstanceFromMERequest) returns (Bool);

    rpc CreateInstanceFromCS (CreateInstanceFromCSRequest) returns (InstanceId);
    rpc CreateInstanceFromME (CreateInstanceFromMERequest) returns (InstanceId);

    rpc SetupExperiment (SetupExperimentRequest) returns (StatusResponse);
    rpc EnterInitializationMode (EnterInitializationModeRequest) returns (StatusResponse);
    rpc ExitInitializationMode (ExitInitializationModeRequest) returns (StatusResponse);
    
    rpc Step (StepRequest) returns (StepResponse);
    rpc Reset(ResetRequest) returns (StatusResponse);
    rpc Terminate (TerminateRequest) returns (StatusResponse);

    rpc ReadInteger (ReadRequest) returns (IntegerRead);
    rpc ReadReal (ReadRequest) returns (RealRead);
    rpc ReadString (ReadRequest) returns (StringRead);
    rpc ReadBoolean (ReadRequest) returns (BooleanRead);

    rpc WriteInteger (WriteIntegerRequest) returns (StatusResponse);
    rpc WriteReal (WriteRealRequest) returns (StatusResponse);
    rpc WriteString (WriteStringRequest) returns (StatusResponse);
    rpc WriteBoolean (WriteBooleanRequest) returns (StatusResponse);

    rpc GetFMUstate(GetFMUstateRequest) returns (GetFMUstateResponse);
    rpc SetFMUstate(SetFMUstateRequest) returns (StatusResponse);
    rpc FreeFMUstate(FreeFMUstateRequest) returns (StatusResponse);

    rpc SerializeFMUstate(SerializeFMUstateRequest) returns (SerializeFMUstateResponse);
    rpc DeSerializeFMUstate(DeSerializeFMUstateRequest) returns (DeSerializeFMUstateResponse);
    
    rpc GetDirectionalDerivative(GetDirectionalDerivativeRequest) returns (GetDirectionalDerivativeResponse);

}

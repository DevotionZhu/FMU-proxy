/*
 * The MIT License
 *
 * Copyright 2017-2018 Norwegian University of Technology (NTNU)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

syntax = "proto3";

package fmuproxy.grpc;

option java_package = "no.mechatronics.sfi.fmuproxy.grpc";

import "definitions.proto";

message FmuId {
    string value = 1;
}

message InstanceId {
    string value = 1;
}

message ModelDescriptionXml {
    string xml = 1;
}

message StatusResponse {
    Status status = 1;
}

message StepResponse {
    Status status = 1;
    double simulation_time = 2;
}

message CreateInstanceFromCSRequest {
    string fmu_id = 1;
}

message CreateInstanceFromMERequest {
    string fmu_id = 1;
    Solver solver = 2;
}

message GetModelDescriptionRequest {
    string fmu_id = 1;
}

message GetModelDescriptionXmlRequest {
    string fmu_id = 1;
}

message InitRequest {
    string instance_id = 1;
    double start = 2;
    double stop = 3;
}

message StepRequest {
    string instance_id = 1;
    double step_size = 2;
}

message ResetRequest {
    string instance_id = 1;
}

message TerminateRequest {
    string instance_id = 1;
}

message ReadRequest {
    string instance_id = 1;
    repeated uint32 value_references = 2;
}

message WriteIntegerRequest {
    string instance_id = 1;
    repeated uint32 value_references = 2;
    repeated int32 values =3;
}

message WriteRealRequest {
    string instance_id = 1;
    repeated uint32 value_references = 2;
    repeated double values = 3;
}

message WriteStringRequest {
    string instance_id = 1;
    repeated uint32 value_references = 2;
    repeated string values = 3;
}

message WriteBooleanRequest {
    string instance_id = 1;
    repeated uint32 value_references = 2;
    repeated bool values = 3;
}

message IntegerRead {
    repeated int32 values = 1;
    Status status = 2;
}

message RealRead {
    repeated double values = 1;
    Status status = 2;
}

message StringRead {
    repeated string values = 1;
    Status status = 2;
}

message BooleanRead {
    repeated bool values = 1;
    Status status = 2;
}

message Solver {
    string name = 1;
    string settings = 2;
}

service FmuService {

    rpc GetModelDescription(GetModelDescriptionRequest) returns (ModelDescription);
    rpc GetModelDescriptionXml(GetModelDescriptionXmlRequest) returns (ModelDescriptionXml);

    rpc CreateInstanceFromCS (CreateInstanceFromCSRequest) returns (InstanceId);
    rpc CreateInstanceFromME (CreateInstanceFromMERequest) returns (InstanceId);

    rpc Init (InitRequest) returns (StatusResponse);
    rpc Step (StepRequest) returns (StepResponse);
    rpc Reset(ResetRequest) returns (StatusResponse);
    rpc Terminate (TerminateRequest) returns (StatusResponse);

    rpc ReadInteger (ReadRequest) returns (IntegerRead);
    rpc ReadReal (ReadRequest) returns (RealRead);
    rpc ReadString (ReadRequest) returns (StringRead);
    rpc ReadBoolean (ReadRequest) returns (BooleanRead);

    rpc WriteInteger (WriteIntegerRequest) returns (StatusResponse);
    rpc WriteReal (WriteRealRequest) returns (StatusResponse);
    rpc WriteString (WriteStringRequest) returns (StatusResponse);
    rpc WriteBoolean (WriteBooleanRequest) returns (StatusResponse);

}

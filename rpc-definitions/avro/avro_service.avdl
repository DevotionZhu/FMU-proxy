/*
 * The MIT License
 *
 * Copyright 2017-2018 Norwegian University of Technology (NTNU)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


@namespace("no.mechatronics.sfi.fmuproxy.avro")
protocol AvroFmuService {

  enum Status {
    OK_STATUS,
    WARNING_STATUS,
    DISCARD_STATUS,
    ERROR_STATUS,
    FATAL_STATUS,
    PENDING_STATUS
  }

  enum Causality {
    INPUT_CAUSALITY,
    OUTPUT_CAUSALITY,
    PARAMETER_CAUSALITY,
    CALCULATED_PARAMETER_CAUSALITY,
    LOCAL_CAUSALITY,
    INDEPENDENT_CAUSALITY
  }

  enum Variability {
    CONSTANT_VARIABILITY,
    FIXED_VARIABILITY,
    CONTINUOUS_VARIABILITY,
    DISCRETE_VARIABILITY,
    TUNABLE_VARIABILITY
  }

  enum Initial {
    EXACT_INITIAL,
    APPROX_INITIAL,
    CALCULATED_INITIAL
  }

  enum DependenciesKind {
    DEPENDENT_KIND,
    CONSTANT_KIND,
    TUNABLE_KIND,
    DISCRETE_KIND
  }

  enum VariableNamingConvention {
    FLAT,
    STRUCTURED
  }

  record Unknown {
    int index;
    array<int> dependencies;
    union{null, DependenciesKind} dependencies_kind;
  }

  record ModelStructure {
    array<Unknown> outputs;
    array<Unknown> derivatives;
    array<Unknown> initial_unknowns;
  }

  record IntegerAttribute {
      union{null, int} min;
      union{null, int} max;
      union{null, int} start;
  }

  record RealAttribute {
    union{null, double} min;
    union{null, double} max;
    union{null, double} start;
  }

  record StringAttribute {
    union{null, string} start;
  }

  record BooleanAttribute {
    union{null, boolean} start;
  }

  record EnumerationAttribute {
    union{null, int} min;
    union{null, int} max;
    union{null, int} start;
  }

  record ScalarVariable {
    string name;
    int value_reference;
    union {null, string} description;
    union {null, string} declared_type;
    union {null, Causality} causality;
    union {null, Variability} variability;
    union {null, Initial} initial;
    union {IntegerAttribute, RealAttribute, StringAttribute, BooleanAttribute, EnumerationAttribute} attribute;
  }

  record DefaultExperiment {
    double start_time;
    double stop_time;
    double tolerance;
    double step_size;
  }

  record ModelDescription {
    string guid;
    string fmi_version;
    string model_name;
    union {null, string} license;
    union {null, string} copyright;
    union {null, string} author;
    union {null, string} version;
    union {null, string} description;
    union {null, string} generation_tool;
    union {null, string} generation_date_and_time;
    union {null, DefaultExperiment} default_experiment;
    union {null, VariableNamingConvention} variable_naming_convention;
    array<ScalarVariable> model_variables;
    ModelStructure model_structure;
    boolean supports_co_simulation;
    boolean supports_model_exchange;
  }

  record StepResult {
    Status status;
    double simulationTime;
  }

  record IntegerRead {
    array<int> value;
    Status status;
  }

  record RealRead {
    array<double> value;
    Status status;
  }

  record StringRead {
    array<string> value;
    Status status;
  }

  record BooleanRead {
    array<boolean> value;
    Status status;
  }

  record Solver {
    string name;
    string settings;
  }

  error NoSuchFmuException {
    string message;
  }

  error NoSuchVariableException {
    string message;
  }

  error UnsupportedOperationException {
    string message;
  }

  string getModelDescriptionXml();
  ModelDescription getModelDescription();

  int createInstanceFromCS() throws UnsupportedOperationException;
  int createInstanceFromME(Solver solver) throws UnsupportedOperationException;

  double getSimulationTime(int instance_id) throws NoSuchFmuException;
  boolean isTerminated(int instance_id) throws NoSuchFmuException;

  Status init(int instance_id, double start, double stop) throws NoSuchFmuException;
  StepResult step(int instance_id, double step_size) throws NoSuchFmuException;
  Status terminate(int instance_id) throws NoSuchFmuException;
  Status reset(int instance_id) throws NoSuchFmuException;

  IntegerRead readInteger(int instance_id, array<int> vr) throws NoSuchFmuException, NoSuchVariableException;
  RealRead readReal(int instance_id, array<int> vr) throws NoSuchFmuException, NoSuchVariableException;
  StringRead readString(int instance_id, array<int> vr) throws NoSuchFmuException, NoSuchVariableException;
  BooleanRead readBoolean(int instance_id, array<int> vr) throws NoSuchFmuException, NoSuchVariableException;

  Status writeInteger(int instance_id,  array<int> vr, array<int> value) throws NoSuchFmuException, NoSuchVariableException;
  Status writeReal(int instance_id, array<int> vr, array<double> value) throws NoSuchFmuException, NoSuchVariableException;
  Status writeString(int instance_id, array<int> vr, array<string> value) throws NoSuchFmuException, NoSuchVariableException;
  Status writeBoolean(int instance_id, array<int> vr, array<boolean> value) throws NoSuchFmuException, NoSuchVariableException;

}
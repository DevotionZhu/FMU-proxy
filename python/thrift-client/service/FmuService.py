#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def getModelDescriptionXml(self):
        pass

    def getModelDescription(self):
        pass

    def createInstanceFromCS(self):
        pass

    def createInstanceFromME(self, solver):
        """
        Parameters:
         - solver
        """
        pass

    def getSimulationTime(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        pass

    def isTerminated(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        pass

    def init(self, instance_id, start, stop):
        """
        Parameters:
         - instance_id
         - start
         - stop
        """
        pass

    def step(self, instance_id, step_size):
        """
        Parameters:
         - instance_id
         - step_size
        """
        pass

    def terminate(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        pass

    def reset(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        pass

    def readInteger(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        pass

    def readReal(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        pass

    def readString(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        pass

    def readBoolean(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        pass

    def writeInteger(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        pass

    def writeReal(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        pass

    def writeString(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        pass

    def writeBoolean(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def getModelDescriptionXml(self):
        self.send_getModelDescriptionXml()
        return self.recv_getModelDescriptionXml()

    def send_getModelDescriptionXml(self):
        self._oprot.writeMessageBegin('getModelDescriptionXml', TMessageType.CALL, self._seqid)
        args = getModelDescriptionXml_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getModelDescriptionXml(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getModelDescriptionXml_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getModelDescriptionXml failed: unknown result")

    def getModelDescription(self):
        self.send_getModelDescription()
        return self.recv_getModelDescription()

    def send_getModelDescription(self):
        self._oprot.writeMessageBegin('getModelDescription', TMessageType.CALL, self._seqid)
        args = getModelDescription_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getModelDescription(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getModelDescription_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getModelDescription failed: unknown result")

    def createInstanceFromCS(self):
        self.send_createInstanceFromCS()
        return self.recv_createInstanceFromCS()

    def send_createInstanceFromCS(self):
        self._oprot.writeMessageBegin('createInstanceFromCS', TMessageType.CALL, self._seqid)
        args = createInstanceFromCS_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createInstanceFromCS(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createInstanceFromCS_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createInstanceFromCS failed: unknown result")

    def createInstanceFromME(self, solver):
        """
        Parameters:
         - solver
        """
        self.send_createInstanceFromME(solver)
        return self.recv_createInstanceFromME()

    def send_createInstanceFromME(self, solver):
        self._oprot.writeMessageBegin('createInstanceFromME', TMessageType.CALL, self._seqid)
        args = createInstanceFromME_args()
        args.solver = solver
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createInstanceFromME(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createInstanceFromME_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createInstanceFromME failed: unknown result")

    def getSimulationTime(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        self.send_getSimulationTime(instance_id)
        return self.recv_getSimulationTime()

    def send_getSimulationTime(self, instance_id):
        self._oprot.writeMessageBegin('getSimulationTime', TMessageType.CALL, self._seqid)
        args = getSimulationTime_args()
        args.instance_id = instance_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSimulationTime(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSimulationTime_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSimulationTime failed: unknown result")

    def isTerminated(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        self.send_isTerminated(instance_id)
        return self.recv_isTerminated()

    def send_isTerminated(self, instance_id):
        self._oprot.writeMessageBegin('isTerminated', TMessageType.CALL, self._seqid)
        args = isTerminated_args()
        args.instance_id = instance_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isTerminated(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isTerminated_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isTerminated failed: unknown result")

    def init(self, instance_id, start, stop):
        """
        Parameters:
         - instance_id
         - start
         - stop
        """
        self.send_init(instance_id, start, stop)
        return self.recv_init()

    def send_init(self, instance_id, start, stop):
        self._oprot.writeMessageBegin('init', TMessageType.CALL, self._seqid)
        args = init_args()
        args.instance_id = instance_id
        args.start = start
        args.stop = stop
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_init(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = init_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "init failed: unknown result")

    def step(self, instance_id, step_size):
        """
        Parameters:
         - instance_id
         - step_size
        """
        self.send_step(instance_id, step_size)
        return self.recv_step()

    def send_step(self, instance_id, step_size):
        self._oprot.writeMessageBegin('step', TMessageType.CALL, self._seqid)
        args = step_args()
        args.instance_id = instance_id
        args.step_size = step_size
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_step(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = step_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "step failed: unknown result")

    def terminate(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        self.send_terminate(instance_id)
        return self.recv_terminate()

    def send_terminate(self, instance_id):
        self._oprot.writeMessageBegin('terminate', TMessageType.CALL, self._seqid)
        args = terminate_args()
        args.instance_id = instance_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_terminate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = terminate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "terminate failed: unknown result")

    def reset(self, instance_id):
        """
        Parameters:
         - instance_id
        """
        self.send_reset(instance_id)
        return self.recv_reset()

    def send_reset(self, instance_id):
        self._oprot.writeMessageBegin('reset', TMessageType.CALL, self._seqid)
        args = reset_args()
        args.instance_id = instance_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reset(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reset_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reset failed: unknown result")

    def readInteger(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        self.send_readInteger(instance_id, vr)
        return self.recv_readInteger()

    def send_readInteger(self, instance_id, vr):
        self._oprot.writeMessageBegin('readInteger', TMessageType.CALL, self._seqid)
        args = readInteger_args()
        args.instance_id = instance_id
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_readInteger(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = readInteger_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "readInteger failed: unknown result")

    def readReal(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        self.send_readReal(instance_id, vr)
        return self.recv_readReal()

    def send_readReal(self, instance_id, vr):
        self._oprot.writeMessageBegin('readReal', TMessageType.CALL, self._seqid)
        args = readReal_args()
        args.instance_id = instance_id
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_readReal(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = readReal_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "readReal failed: unknown result")

    def readString(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        self.send_readString(instance_id, vr)
        return self.recv_readString()

    def send_readString(self, instance_id, vr):
        self._oprot.writeMessageBegin('readString', TMessageType.CALL, self._seqid)
        args = readString_args()
        args.instance_id = instance_id
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_readString(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = readString_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "readString failed: unknown result")

    def readBoolean(self, instance_id, vr):
        """
        Parameters:
         - instance_id
         - vr
        """
        self.send_readBoolean(instance_id, vr)
        return self.recv_readBoolean()

    def send_readBoolean(self, instance_id, vr):
        self._oprot.writeMessageBegin('readBoolean', TMessageType.CALL, self._seqid)
        args = readBoolean_args()
        args.instance_id = instance_id
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_readBoolean(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = readBoolean_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "readBoolean failed: unknown result")

    def writeInteger(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        self.send_writeInteger(instance_id, vr, value)
        return self.recv_writeInteger()

    def send_writeInteger(self, instance_id, vr, value):
        self._oprot.writeMessageBegin('writeInteger', TMessageType.CALL, self._seqid)
        args = writeInteger_args()
        args.instance_id = instance_id
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_writeInteger(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = writeInteger_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "writeInteger failed: unknown result")

    def writeReal(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        self.send_writeReal(instance_id, vr, value)
        return self.recv_writeReal()

    def send_writeReal(self, instance_id, vr, value):
        self._oprot.writeMessageBegin('writeReal', TMessageType.CALL, self._seqid)
        args = writeReal_args()
        args.instance_id = instance_id
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_writeReal(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = writeReal_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "writeReal failed: unknown result")

    def writeString(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        self.send_writeString(instance_id, vr, value)
        return self.recv_writeString()

    def send_writeString(self, instance_id, vr, value):
        self._oprot.writeMessageBegin('writeString', TMessageType.CALL, self._seqid)
        args = writeString_args()
        args.instance_id = instance_id
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_writeString(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = writeString_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "writeString failed: unknown result")

    def writeBoolean(self, instance_id, vr, value):
        """
        Parameters:
         - instance_id
         - vr
         - value
        """
        self.send_writeBoolean(instance_id, vr, value)
        return self.recv_writeBoolean()

    def send_writeBoolean(self, instance_id, vr, value):
        self._oprot.writeMessageBegin('writeBoolean', TMessageType.CALL, self._seqid)
        args = writeBoolean_args()
        args.instance_id = instance_id
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_writeBoolean(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = writeBoolean_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "writeBoolean failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getModelDescriptionXml"] = Processor.process_getModelDescriptionXml
        self._processMap["getModelDescription"] = Processor.process_getModelDescription
        self._processMap["createInstanceFromCS"] = Processor.process_createInstanceFromCS
        self._processMap["createInstanceFromME"] = Processor.process_createInstanceFromME
        self._processMap["getSimulationTime"] = Processor.process_getSimulationTime
        self._processMap["isTerminated"] = Processor.process_isTerminated
        self._processMap["init"] = Processor.process_init
        self._processMap["step"] = Processor.process_step
        self._processMap["terminate"] = Processor.process_terminate
        self._processMap["reset"] = Processor.process_reset
        self._processMap["readInteger"] = Processor.process_readInteger
        self._processMap["readReal"] = Processor.process_readReal
        self._processMap["readString"] = Processor.process_readString
        self._processMap["readBoolean"] = Processor.process_readBoolean
        self._processMap["writeInteger"] = Processor.process_writeInteger
        self._processMap["writeReal"] = Processor.process_writeReal
        self._processMap["writeString"] = Processor.process_writeString
        self._processMap["writeBoolean"] = Processor.process_writeBoolean

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_getModelDescriptionXml(self, seqid, iprot, oprot):
        args = getModelDescriptionXml_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getModelDescriptionXml_result()
        try:
            result.success = self._handler.getModelDescriptionXml()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getModelDescriptionXml", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getModelDescription(self, seqid, iprot, oprot):
        args = getModelDescription_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getModelDescription_result()
        try:
            result.success = self._handler.getModelDescription()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getModelDescription", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createInstanceFromCS(self, seqid, iprot, oprot):
        args = createInstanceFromCS_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createInstanceFromCS_result()
        try:
            result.success = self._handler.createInstanceFromCS()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.UnsupportedOperationException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createInstanceFromCS", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createInstanceFromME(self, seqid, iprot, oprot):
        args = createInstanceFromME_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createInstanceFromME_result()
        try:
            result.success = self._handler.createInstanceFromME(args.solver)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.UnsupportedOperationException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createInstanceFromME", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getSimulationTime(self, seqid, iprot, oprot):
        args = getSimulationTime_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSimulationTime_result()
        try:
            result.success = self._handler.getSimulationTime(args.instance_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getSimulationTime", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isTerminated(self, seqid, iprot, oprot):
        args = isTerminated_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isTerminated_result()
        try:
            result.success = self._handler.isTerminated(args.instance_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isTerminated", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_init(self, seqid, iprot, oprot):
        args = init_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = init_result()
        try:
            result.success = self._handler.init(args.instance_id, args.start, args.stop)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("init", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_step(self, seqid, iprot, oprot):
        args = step_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = step_result()
        try:
            result.success = self._handler.step(args.instance_id, args.step_size)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("step", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_terminate(self, seqid, iprot, oprot):
        args = terminate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = terminate_result()
        try:
            result.success = self._handler.terminate(args.instance_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("terminate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reset(self, seqid, iprot, oprot):
        args = reset_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reset_result()
        try:
            result.success = self._handler.reset(args.instance_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reset", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_readInteger(self, seqid, iprot, oprot):
        args = readInteger_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = readInteger_result()
        try:
            result.success = self._handler.readInteger(args.instance_id, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("readInteger", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_readReal(self, seqid, iprot, oprot):
        args = readReal_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = readReal_result()
        try:
            result.success = self._handler.readReal(args.instance_id, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("readReal", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_readString(self, seqid, iprot, oprot):
        args = readString_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = readString_result()
        try:
            result.success = self._handler.readString(args.instance_id, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("readString", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_readBoolean(self, seqid, iprot, oprot):
        args = readBoolean_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = readBoolean_result()
        try:
            result.success = self._handler.readBoolean(args.instance_id, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("readBoolean", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_writeInteger(self, seqid, iprot, oprot):
        args = writeInteger_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = writeInteger_result()
        try:
            result.success = self._handler.writeInteger(args.instance_id, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("writeInteger", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_writeReal(self, seqid, iprot, oprot):
        args = writeReal_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = writeReal_result()
        try:
            result.success = self._handler.writeReal(args.instance_id, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("writeReal", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_writeString(self, seqid, iprot, oprot):
        args = writeString_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = writeString_result()
        try:
            result.success = self._handler.writeString(args.instance_id, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("writeString", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_writeBoolean(self, seqid, iprot, oprot):
        args = writeBoolean_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = writeBoolean_result()
        try:
            result.success = self._handler.writeBoolean(args.instance_id, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except definitions.ttypes.NoSuchFmuException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except definitions.ttypes.NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("writeBoolean", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getModelDescriptionXml_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getModelDescriptionXml_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getModelDescriptionXml_args)
getModelDescriptionXml_args.thrift_spec = (
)


class getModelDescriptionXml_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getModelDescriptionXml_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getModelDescriptionXml_result)
getModelDescriptionXml_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class getModelDescription_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getModelDescription_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getModelDescription_args)
getModelDescription_args.thrift_spec = (
)


class getModelDescription_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = definitions.ttypes.ModelDescription()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getModelDescription_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getModelDescription_result)
getModelDescription_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [definitions.ttypes.ModelDescription, None], None, ),  # 0
)


class createInstanceFromCS_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createInstanceFromCS_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createInstanceFromCS_args)
createInstanceFromCS_args.thrift_spec = (
)


class createInstanceFromCS_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.UnsupportedOperationException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createInstanceFromCS_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createInstanceFromCS_result)
createInstanceFromCS_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.UnsupportedOperationException, None], None, ),  # 1
)


class createInstanceFromME_args(object):
    """
    Attributes:
     - solver
    """


    def __init__(self, solver=None,):
        self.solver = solver

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.solver = definitions.ttypes.Solver()
                    self.solver.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createInstanceFromME_args')
        if self.solver is not None:
            oprot.writeFieldBegin('solver', TType.STRUCT, 1)
            self.solver.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createInstanceFromME_args)
createInstanceFromME_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'solver', [definitions.ttypes.Solver, None], None, ),  # 1
)


class createInstanceFromME_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.UnsupportedOperationException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createInstanceFromME_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createInstanceFromME_result)
createInstanceFromME_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.UnsupportedOperationException, None], None, ),  # 1
)


class getSimulationTime_args(object):
    """
    Attributes:
     - instance_id
    """


    def __init__(self, instance_id=None,):
        self.instance_id = instance_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getSimulationTime_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getSimulationTime_args)
getSimulationTime_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
)


class getSimulationTime_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.DOUBLE:
                    self.success = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.NoSuchFmuException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getSimulationTime_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.DOUBLE, 0)
            oprot.writeDouble(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getSimulationTime_result)
getSimulationTime_result.thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
)


class isTerminated_args(object):
    """
    Attributes:
     - instance_id
    """


    def __init__(self, instance_id=None,):
        self.instance_id = instance_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isTerminated_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isTerminated_args)
isTerminated_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
)


class isTerminated_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.NoSuchFmuException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isTerminated_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isTerminated_result)
isTerminated_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
)


class init_args(object):
    """
    Attributes:
     - instance_id
     - start
     - stop
    """


    def __init__(self, instance_id=None, start=None, stop=None,):
        self.instance_id = instance_id
        self.start = start
        self.stop = stop

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.start = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.stop = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('init_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.DOUBLE, 2)
            oprot.writeDouble(self.start)
            oprot.writeFieldEnd()
        if self.stop is not None:
            oprot.writeFieldBegin('stop', TType.DOUBLE, 3)
            oprot.writeDouble(self.stop)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(init_args)
init_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.DOUBLE, 'start', None, None, ),  # 2
    (3, TType.DOUBLE, 'stop', None, None, ),  # 3
)


class init_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.NoSuchFmuException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('init_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(init_result)
init_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
)


class step_args(object):
    """
    Attributes:
     - instance_id
     - step_size
    """


    def __init__(self, instance_id=None, step_size=None,):
        self.instance_id = instance_id
        self.step_size = step_size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.step_size = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('step_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.step_size is not None:
            oprot.writeFieldBegin('step_size', TType.DOUBLE, 2)
            oprot.writeDouble(self.step_size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(step_args)
step_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.DOUBLE, 'step_size', None, None, ),  # 2
)


class step_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = definitions.ttypes.StepResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.NoSuchFmuException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('step_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(step_result)
step_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [definitions.ttypes.StepResult, None], None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
)


class terminate_args(object):
    """
    Attributes:
     - instance_id
    """


    def __init__(self, instance_id=None,):
        self.instance_id = instance_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminate_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminate_args)
terminate_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
)


class terminate_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.NoSuchFmuException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminate_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminate_result)
terminate_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
)


class reset_args(object):
    """
    Attributes:
     - instance_id
    """


    def __init__(self, instance_id=None,):
        self.instance_id = instance_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reset_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reset_args)
reset_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
)


class reset_result(object):
    """
    Attributes:
     - success
     - ex
    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = definitions.ttypes.NoSuchFmuException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reset_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reset_result)
reset_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
)


class readInteger_args(object):
    """
    Attributes:
     - instance_id
     - vr
    """


    def __init__(self, instance_id=None, vr=None,):
        self.instance_id = instance_id
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.vr.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readInteger_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter6 in self.vr:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readInteger_args)
readInteger_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
)


class readInteger_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = definitions.ttypes.IntegerRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readInteger_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readInteger_result)
readInteger_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [definitions.ttypes.IntegerRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)


class readReal_args(object):
    """
    Attributes:
     - instance_id
     - vr
    """


    def __init__(self, instance_id=None, vr=None,):
        self.instance_id = instance_id
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.vr.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readReal_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter13 in self.vr:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readReal_args)
readReal_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
)


class readReal_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = definitions.ttypes.RealRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readReal_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readReal_result)
readReal_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [definitions.ttypes.RealRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)


class readString_args(object):
    """
    Attributes:
     - instance_id
     - vr
    """


    def __init__(self, instance_id=None, vr=None,):
        self.instance_id = instance_id
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.vr.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readString_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter20 in self.vr:
                oprot.writeI32(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readString_args)
readString_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
)


class readString_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = definitions.ttypes.StringRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readString_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readString_result)
readString_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [definitions.ttypes.StringRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)


class readBoolean_args(object):
    """
    Attributes:
     - instance_id
     - vr
    """


    def __init__(self, instance_id=None, vr=None,):
        self.instance_id = instance_id
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readI32()
                        self.vr.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readBoolean_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter27 in self.vr:
                oprot.writeI32(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readBoolean_args)
readBoolean_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
)


class readBoolean_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = definitions.ttypes.BooleanRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readBoolean_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readBoolean_result)
readBoolean_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [definitions.ttypes.BooleanRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)


class writeInteger_args(object):
    """
    Attributes:
     - instance_id
     - vr
     - value
    """


    def __init__(self, instance_id=None, vr=None, value=None,):
        self.instance_id = instance_id
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readI32()
                        self.vr.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readI32()
                        self.value.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeInteger_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter40 in self.vr:
                oprot.writeI32(iter40)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.value))
            for iter41 in self.value:
                oprot.writeI32(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeInteger_args)
writeInteger_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.I32, None, False), None, ),  # 3
)


class writeInteger_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeInteger_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeInteger_result)
writeInteger_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)


class writeReal_args(object):
    """
    Attributes:
     - instance_id
     - vr
     - value
    """


    def __init__(self, instance_id=None, vr=None, value=None,):
        self.instance_id = instance_id
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readI32()
                        self.vr.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = iprot.readDouble()
                        self.value.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeReal_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter54 in self.vr:
                oprot.writeI32(iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.value))
            for iter55 in self.value:
                oprot.writeDouble(iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeReal_args)
writeReal_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.DOUBLE, None, False), None, ),  # 3
)


class writeReal_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeReal_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeReal_result)
writeReal_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)


class writeString_args(object):
    """
    Attributes:
     - instance_id
     - vr
     - value
    """


    def __init__(self, instance_id=None, vr=None, value=None,):
        self.instance_id = instance_id
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readI32()
                        self.vr.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.value.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeString_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter68 in self.vr:
                oprot.writeI32(iter68)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.value))
            for iter69 in self.value:
                oprot.writeString(iter69.encode('utf-8') if sys.version_info[0] == 2 else iter69)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeString_args)
writeString_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.STRING, 'UTF8', False), None, ),  # 3
)


class writeString_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeString_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeString_result)
writeString_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)


class writeBoolean_args(object):
    """
    Attributes:
     - instance_id
     - vr
     - value
    """


    def __init__(self, instance_id=None, vr=None, value=None,):
        self.instance_id = instance_id
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.instance_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readI32()
                        self.vr.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = iprot.readBool()
                        self.value.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeBoolean_args')
        if self.instance_id is not None:
            oprot.writeFieldBegin('instance_id', TType.I32, 1)
            oprot.writeI32(self.instance_id)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.vr))
            for iter82 in self.vr:
                oprot.writeI32(iter82)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.BOOL, len(self.value))
            for iter83 in self.value:
                oprot.writeBool(iter83)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeBoolean_args)
writeBoolean_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'instance_id', None, None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.BOOL, None, False), None, ),  # 3
)


class writeBoolean_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = definitions.ttypes.NoSuchFmuException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = definitions.ttypes.NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeBoolean_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeBoolean_result)
writeBoolean_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [definitions.ttypes.NoSuchFmuException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [definitions.ttypes.NoSuchVariableException, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs


#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from service import FmuService
from service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ModelDescription getModelDescription(FmuId fmuId)')
    print('  CoSimulationAttributes getCoSimulationAttributes(InstanceId instanceId)')
    print('  bool canCreateInstanceFromCS(FmuId fmuId)')
    print('  bool canCreateInstanceFromME(FmuId fmuId)')
    print('  InstanceId createInstanceFromCS(FmuId fmuId)')
    print('  InstanceId createInstanceFromME(FmuId fmuId, Solver solver)')
    print('  Status init(InstanceId instanceId, double start, double stop)')
    print('  StepResult step(InstanceId instanceId, double stepSize)')
    print('  Status reset(InstanceId instanceId)')
    print('  Status terminate(InstanceId instanceId)')
    print('  IntegerRead readInteger(InstanceId instanceId, ValueReferences vr)')
    print('  RealRead readReal(InstanceId instanceId, ValueReferences vr)')
    print('  StringRead readString(InstanceId instanceId, ValueReferences vr)')
    print('  BooleanRead readBoolean(InstanceId instanceId, ValueReferences vr)')
    print('  Status writeInteger(InstanceId instanceId, ValueReferences vr, IntArray value)')
    print('  Status writeReal(InstanceId instanceId, ValueReferences vr, RealArray value)')
    print('  Status writeString(InstanceId instanceId, ValueReferences vr, StringArray value)')
    print('  Status writeBoolean(InstanceId instanceId, ValueReferences vr, BooleanArray value)')
    print('  GetFmuStateResult getFMUstate(InstanceId instanceId)')
    print('  Status setFMUstate(InstanceId instanceId, FmuState state)')
    print('  Status freeFMUstate(InstanceId instanceId, FmuState state)')
    print('  SerializeFmuStateResult serializeFMUstate(InstanceId instanceId, FmuState state)')
    print('  DeSerializeFmuStateResult deSerializeFMUstate(InstanceId instanceId, string state)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = FmuService.Client(protocol)
transport.open()

if cmd == 'getModelDescription':
    if len(args) != 1:
        print('getModelDescription requires 1 args')
        sys.exit(1)
    pp.pprint(client.getModelDescription(eval(args[0]),))

elif cmd == 'getCoSimulationAttributes':
    if len(args) != 1:
        print('getCoSimulationAttributes requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCoSimulationAttributes(eval(args[0]),))

elif cmd == 'canCreateInstanceFromCS':
    if len(args) != 1:
        print('canCreateInstanceFromCS requires 1 args')
        sys.exit(1)
    pp.pprint(client.canCreateInstanceFromCS(eval(args[0]),))

elif cmd == 'canCreateInstanceFromME':
    if len(args) != 1:
        print('canCreateInstanceFromME requires 1 args')
        sys.exit(1)
    pp.pprint(client.canCreateInstanceFromME(eval(args[0]),))

elif cmd == 'createInstanceFromCS':
    if len(args) != 1:
        print('createInstanceFromCS requires 1 args')
        sys.exit(1)
    pp.pprint(client.createInstanceFromCS(eval(args[0]),))

elif cmd == 'createInstanceFromME':
    if len(args) != 2:
        print('createInstanceFromME requires 2 args')
        sys.exit(1)
    pp.pprint(client.createInstanceFromME(eval(args[0]), eval(args[1]),))

elif cmd == 'init':
    if len(args) != 3:
        print('init requires 3 args')
        sys.exit(1)
    pp.pprint(client.init(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'step':
    if len(args) != 2:
        print('step requires 2 args')
        sys.exit(1)
    pp.pprint(client.step(eval(args[0]), eval(args[1]),))

elif cmd == 'reset':
    if len(args) != 1:
        print('reset requires 1 args')
        sys.exit(1)
    pp.pprint(client.reset(eval(args[0]),))

elif cmd == 'terminate':
    if len(args) != 1:
        print('terminate requires 1 args')
        sys.exit(1)
    pp.pprint(client.terminate(eval(args[0]),))

elif cmd == 'readInteger':
    if len(args) != 2:
        print('readInteger requires 2 args')
        sys.exit(1)
    pp.pprint(client.readInteger(eval(args[0]), eval(args[1]),))

elif cmd == 'readReal':
    if len(args) != 2:
        print('readReal requires 2 args')
        sys.exit(1)
    pp.pprint(client.readReal(eval(args[0]), eval(args[1]),))

elif cmd == 'readString':
    if len(args) != 2:
        print('readString requires 2 args')
        sys.exit(1)
    pp.pprint(client.readString(eval(args[0]), eval(args[1]),))

elif cmd == 'readBoolean':
    if len(args) != 2:
        print('readBoolean requires 2 args')
        sys.exit(1)
    pp.pprint(client.readBoolean(eval(args[0]), eval(args[1]),))

elif cmd == 'writeInteger':
    if len(args) != 3:
        print('writeInteger requires 3 args')
        sys.exit(1)
    pp.pprint(client.writeInteger(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'writeReal':
    if len(args) != 3:
        print('writeReal requires 3 args')
        sys.exit(1)
    pp.pprint(client.writeReal(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'writeString':
    if len(args) != 3:
        print('writeString requires 3 args')
        sys.exit(1)
    pp.pprint(client.writeString(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'writeBoolean':
    if len(args) != 3:
        print('writeBoolean requires 3 args')
        sys.exit(1)
    pp.pprint(client.writeBoolean(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getFMUstate':
    if len(args) != 1:
        print('getFMUstate requires 1 args')
        sys.exit(1)
    pp.pprint(client.getFMUstate(eval(args[0]),))

elif cmd == 'setFMUstate':
    if len(args) != 2:
        print('setFMUstate requires 2 args')
        sys.exit(1)
    pp.pprint(client.setFMUstate(eval(args[0]), eval(args[1]),))

elif cmd == 'freeFMUstate':
    if len(args) != 2:
        print('freeFMUstate requires 2 args')
        sys.exit(1)
    pp.pprint(client.freeFMUstate(eval(args[0]), eval(args[1]),))

elif cmd == 'serializeFMUstate':
    if len(args) != 2:
        print('serializeFMUstate requires 2 args')
        sys.exit(1)
    pp.pprint(client.serializeFMUstate(eval(args[0]), eval(args[1]),))

elif cmd == 'deSerializeFMUstate':
    if len(args) != 2:
        print('deSerializeFMUstate requires 2 args')
        sys.exit(1)
    pp.pprint(client.deSerializeFMUstate(eval(args[0]), args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "definitions_types.h"


namespace fmuproxy { namespace thrift {

typedef std::string FmuId;

typedef std::string InstanceId;

typedef int64_t ValueReference;

typedef int64_t FmuState;

typedef std::vector<ValueReference>  ValueReferences;

typedef std::vector<int32_t>  IntArray;

typedef std::vector<double>  RealArray;

typedef std::vector<std::string>  StringArray;

typedef std::vector<bool>  BooleanArray;

class NoSuchFmuException;

class NoSuchInstanceException;

class NoSuchVariableException;

class UnsupportedOperationException;

class GetFmuStateResult;

class SerializeFmuStateResult;

class DeSerializeFmuStateResult;

typedef struct _NoSuchFmuException__isset {
  _NoSuchFmuException__isset() : message(false) {}
  bool message :1;
} _NoSuchFmuException__isset;

class NoSuchFmuException : public ::apache::thrift::TException {
 public:

  NoSuchFmuException(const NoSuchFmuException&);
  NoSuchFmuException& operator=(const NoSuchFmuException&);
  NoSuchFmuException() : message() {
  }

  virtual ~NoSuchFmuException() throw();
  std::string message;

  _NoSuchFmuException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const NoSuchFmuException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NoSuchFmuException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoSuchFmuException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(NoSuchFmuException &a, NoSuchFmuException &b);

std::ostream& operator<<(std::ostream& out, const NoSuchFmuException& obj);

typedef struct _NoSuchInstanceException__isset {
  _NoSuchInstanceException__isset() : message(false) {}
  bool message :1;
} _NoSuchInstanceException__isset;

class NoSuchInstanceException : public ::apache::thrift::TException {
 public:

  NoSuchInstanceException(const NoSuchInstanceException&);
  NoSuchInstanceException& operator=(const NoSuchInstanceException&);
  NoSuchInstanceException() : message() {
  }

  virtual ~NoSuchInstanceException() throw();
  std::string message;

  _NoSuchInstanceException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const NoSuchInstanceException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NoSuchInstanceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoSuchInstanceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(NoSuchInstanceException &a, NoSuchInstanceException &b);

std::ostream& operator<<(std::ostream& out, const NoSuchInstanceException& obj);

typedef struct _NoSuchVariableException__isset {
  _NoSuchVariableException__isset() : message(false) {}
  bool message :1;
} _NoSuchVariableException__isset;

class NoSuchVariableException : public ::apache::thrift::TException {
 public:

  NoSuchVariableException(const NoSuchVariableException&);
  NoSuchVariableException& operator=(const NoSuchVariableException&);
  NoSuchVariableException() : message() {
  }

  virtual ~NoSuchVariableException() throw();
  std::string message;

  _NoSuchVariableException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const NoSuchVariableException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NoSuchVariableException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoSuchVariableException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(NoSuchVariableException &a, NoSuchVariableException &b);

std::ostream& operator<<(std::ostream& out, const NoSuchVariableException& obj);

typedef struct _UnsupportedOperationException__isset {
  _UnsupportedOperationException__isset() : message(false) {}
  bool message :1;
} _UnsupportedOperationException__isset;

class UnsupportedOperationException : public ::apache::thrift::TException {
 public:

  UnsupportedOperationException(const UnsupportedOperationException&);
  UnsupportedOperationException& operator=(const UnsupportedOperationException&);
  UnsupportedOperationException() : message() {
  }

  virtual ~UnsupportedOperationException() throw();
  std::string message;

  _UnsupportedOperationException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const UnsupportedOperationException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UnsupportedOperationException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnsupportedOperationException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(UnsupportedOperationException &a, UnsupportedOperationException &b);

std::ostream& operator<<(std::ostream& out, const UnsupportedOperationException& obj);

typedef struct _GetFmuStateResult__isset {
  _GetFmuStateResult__isset() : state(false), status(false) {}
  bool state :1;
  bool status :1;
} _GetFmuStateResult__isset;

class GetFmuStateResult : public virtual ::apache::thrift::TBase {
 public:

  GetFmuStateResult(const GetFmuStateResult&);
  GetFmuStateResult& operator=(const GetFmuStateResult&);
  GetFmuStateResult() : state(0), status(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~GetFmuStateResult() throw();
  FmuState state;
   ::fmuproxy::thrift::Status::type status;

  _GetFmuStateResult__isset __isset;

  void __set_state(const FmuState val);

  void __set_status(const  ::fmuproxy::thrift::Status::type val);

  bool operator == (const GetFmuStateResult & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const GetFmuStateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetFmuStateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFmuStateResult &a, GetFmuStateResult &b);

std::ostream& operator<<(std::ostream& out, const GetFmuStateResult& obj);

typedef struct _SerializeFmuStateResult__isset {
  _SerializeFmuStateResult__isset() : state(false), status(false) {}
  bool state :1;
  bool status :1;
} _SerializeFmuStateResult__isset;

class SerializeFmuStateResult : public virtual ::apache::thrift::TBase {
 public:

  SerializeFmuStateResult(const SerializeFmuStateResult&);
  SerializeFmuStateResult& operator=(const SerializeFmuStateResult&);
  SerializeFmuStateResult() : state(), status(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~SerializeFmuStateResult() throw();
  std::string state;
   ::fmuproxy::thrift::Status::type status;

  _SerializeFmuStateResult__isset __isset;

  void __set_state(const std::string& val);

  void __set_status(const  ::fmuproxy::thrift::Status::type val);

  bool operator == (const SerializeFmuStateResult & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SerializeFmuStateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SerializeFmuStateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SerializeFmuStateResult &a, SerializeFmuStateResult &b);

std::ostream& operator<<(std::ostream& out, const SerializeFmuStateResult& obj);

typedef struct _DeSerializeFmuStateResult__isset {
  _DeSerializeFmuStateResult__isset() : state(false), status(false) {}
  bool state :1;
  bool status :1;
} _DeSerializeFmuStateResult__isset;

class DeSerializeFmuStateResult : public virtual ::apache::thrift::TBase {
 public:

  DeSerializeFmuStateResult(const DeSerializeFmuStateResult&);
  DeSerializeFmuStateResult& operator=(const DeSerializeFmuStateResult&);
  DeSerializeFmuStateResult() : state(0), status(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~DeSerializeFmuStateResult() throw();
  FmuState state;
   ::fmuproxy::thrift::Status::type status;

  _DeSerializeFmuStateResult__isset __isset;

  void __set_state(const FmuState val);

  void __set_status(const  ::fmuproxy::thrift::Status::type val);

  bool operator == (const DeSerializeFmuStateResult & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const DeSerializeFmuStateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeSerializeFmuStateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeSerializeFmuStateResult &a, DeSerializeFmuStateResult &b);

std::ostream& operator<<(std::ostream& out, const DeSerializeFmuStateResult& obj);

}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FmuService_H
#define FmuService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "service_types.h"

namespace fmuproxy { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FmuServiceIf {
 public:
  virtual ~FmuServiceIf() {}
  virtual void getModelDescriptionXml(std::string& _return) = 0;
  virtual void getModelDescription( ::fmuproxy::thrift::ModelDescription& _return) = 0;
  virtual FmuId createInstanceFromCS() = 0;
  virtual FmuId createInstanceFromME(const  ::fmuproxy::thrift::Solver& solver) = 0;
  virtual bool canGetAndSetFMUstate(const FmuId fmu_id) = 0;
  virtual double getCurrentTime(const FmuId fmu_id) = 0;
  virtual bool isTerminated(const FmuId fmu_id) = 0;
  virtual  ::fmuproxy::thrift::Status::type init(const FmuId fmu_id, const double start, const double stop) = 0;
  virtual void step( ::fmuproxy::thrift::StepResult& _return, const FmuId fmu_id, const double step_size) = 0;
  virtual  ::fmuproxy::thrift::Status::type terminate(const FmuId fmu_id) = 0;
  virtual  ::fmuproxy::thrift::Status::type reset(const FmuId fmu_id) = 0;
  virtual void readInteger( ::fmuproxy::thrift::IntegerRead& _return, const FmuId fmu_id, const ValueReference vr) = 0;
  virtual void bulkReadInteger( ::fmuproxy::thrift::IntegerArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) = 0;
  virtual void readReal( ::fmuproxy::thrift::RealRead& _return, const FmuId fmu_id, const ValueReference vr) = 0;
  virtual void bulkReadReal( ::fmuproxy::thrift::RealArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) = 0;
  virtual void readString( ::fmuproxy::thrift::StringRead& _return, const FmuId fmu_id, const ValueReference vr) = 0;
  virtual void bulkReadString( ::fmuproxy::thrift::StringArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) = 0;
  virtual void readBoolean( ::fmuproxy::thrift::BooleanRead& _return, const FmuId fmu_id, const ValueReference vr) = 0;
  virtual void bulkReadBoolean( ::fmuproxy::thrift::BooleanArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) = 0;
  virtual  ::fmuproxy::thrift::Status::type writeInteger(const FmuId fmu_id, const ValueReference vr, const int32_t value) = 0;
  virtual  ::fmuproxy::thrift::Status::type bulkWriteInteger(const FmuId fmu_id, const ValueReferences& vr, const IntArray& value) = 0;
  virtual  ::fmuproxy::thrift::Status::type writeReal(const FmuId fmu_id, const ValueReference vr, const double value) = 0;
  virtual  ::fmuproxy::thrift::Status::type bulkWriteReal(const FmuId fmu_id, const ValueReferences& vr, const RealArray& value) = 0;
  virtual  ::fmuproxy::thrift::Status::type writeString(const FmuId fmu_id, const ValueReference vr, const std::string& value) = 0;
  virtual  ::fmuproxy::thrift::Status::type bulkWriteString(const FmuId fmu_id, const ValueReferences& vr, const StringArray& value) = 0;
  virtual  ::fmuproxy::thrift::Status::type writeBoolean(const FmuId fmu_id, const ValueReference vr, const bool value) = 0;
  virtual  ::fmuproxy::thrift::Status::type bulkWriteBoolean(const FmuId fmu_id, const ValueReferences& vr, const BooleanArray& value) = 0;
};

class FmuServiceIfFactory {
 public:
  typedef FmuServiceIf Handler;

  virtual ~FmuServiceIfFactory() {}

  virtual FmuServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FmuServiceIf* /* handler */) = 0;
};

class FmuServiceIfSingletonFactory : virtual public FmuServiceIfFactory {
 public:
  FmuServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FmuServiceIf>& iface) : iface_(iface) {}
  virtual ~FmuServiceIfSingletonFactory() {}

  virtual FmuServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FmuServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FmuServiceIf> iface_;
};

class FmuServiceNull : virtual public FmuServiceIf {
 public:
  virtual ~FmuServiceNull() {}
  void getModelDescriptionXml(std::string& /* _return */) {
    return;
  }
  void getModelDescription( ::fmuproxy::thrift::ModelDescription& /* _return */) {
    return;
  }
  FmuId createInstanceFromCS() {
    FmuId _return = 0;
    return _return;
  }
  FmuId createInstanceFromME(const  ::fmuproxy::thrift::Solver& /* solver */) {
    FmuId _return = 0;
    return _return;
  }
  bool canGetAndSetFMUstate(const FmuId /* fmu_id */) {
    bool _return = false;
    return _return;
  }
  double getCurrentTime(const FmuId /* fmu_id */) {
    double _return = (double)0;
    return _return;
  }
  bool isTerminated(const FmuId /* fmu_id */) {
    bool _return = false;
    return _return;
  }
   ::fmuproxy::thrift::Status::type init(const FmuId /* fmu_id */, const double /* start */, const double /* stop */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
  void step( ::fmuproxy::thrift::StepResult& /* _return */, const FmuId /* fmu_id */, const double /* step_size */) {
    return;
  }
   ::fmuproxy::thrift::Status::type terminate(const FmuId /* fmu_id */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type reset(const FmuId /* fmu_id */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
  void readInteger( ::fmuproxy::thrift::IntegerRead& /* _return */, const FmuId /* fmu_id */, const ValueReference /* vr */) {
    return;
  }
  void bulkReadInteger( ::fmuproxy::thrift::IntegerArrayRead& /* _return */, const FmuId /* fmu_id */, const ValueReferences& /* vr */) {
    return;
  }
  void readReal( ::fmuproxy::thrift::RealRead& /* _return */, const FmuId /* fmu_id */, const ValueReference /* vr */) {
    return;
  }
  void bulkReadReal( ::fmuproxy::thrift::RealArrayRead& /* _return */, const FmuId /* fmu_id */, const ValueReferences& /* vr */) {
    return;
  }
  void readString( ::fmuproxy::thrift::StringRead& /* _return */, const FmuId /* fmu_id */, const ValueReference /* vr */) {
    return;
  }
  void bulkReadString( ::fmuproxy::thrift::StringArrayRead& /* _return */, const FmuId /* fmu_id */, const ValueReferences& /* vr */) {
    return;
  }
  void readBoolean( ::fmuproxy::thrift::BooleanRead& /* _return */, const FmuId /* fmu_id */, const ValueReference /* vr */) {
    return;
  }
  void bulkReadBoolean( ::fmuproxy::thrift::BooleanArrayRead& /* _return */, const FmuId /* fmu_id */, const ValueReferences& /* vr */) {
    return;
  }
   ::fmuproxy::thrift::Status::type writeInteger(const FmuId /* fmu_id */, const ValueReference /* vr */, const int32_t /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type bulkWriteInteger(const FmuId /* fmu_id */, const ValueReferences& /* vr */, const IntArray& /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type writeReal(const FmuId /* fmu_id */, const ValueReference /* vr */, const double /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type bulkWriteReal(const FmuId /* fmu_id */, const ValueReferences& /* vr */, const RealArray& /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type writeString(const FmuId /* fmu_id */, const ValueReference /* vr */, const std::string& /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type bulkWriteString(const FmuId /* fmu_id */, const ValueReferences& /* vr */, const StringArray& /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type writeBoolean(const FmuId /* fmu_id */, const ValueReference /* vr */, const bool /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
   ::fmuproxy::thrift::Status::type bulkWriteBoolean(const FmuId /* fmu_id */, const ValueReferences& /* vr */, const BooleanArray& /* value */) {
     ::fmuproxy::thrift::Status::type _return = ( ::fmuproxy::thrift::Status::type)0;
    return _return;
  }
};


class FmuService_getModelDescriptionXml_args {
 public:

  FmuService_getModelDescriptionXml_args(const FmuService_getModelDescriptionXml_args&);
  FmuService_getModelDescriptionXml_args& operator=(const FmuService_getModelDescriptionXml_args&);
  FmuService_getModelDescriptionXml_args() {
  }

  virtual ~FmuService_getModelDescriptionXml_args() throw();

  bool operator == (const FmuService_getModelDescriptionXml_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FmuService_getModelDescriptionXml_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_getModelDescriptionXml_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_getModelDescriptionXml_pargs {
 public:


  virtual ~FmuService_getModelDescriptionXml_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_getModelDescriptionXml_result__isset {
  _FmuService_getModelDescriptionXml_result__isset() : success(false) {}
  bool success :1;
} _FmuService_getModelDescriptionXml_result__isset;

class FmuService_getModelDescriptionXml_result {
 public:

  FmuService_getModelDescriptionXml_result(const FmuService_getModelDescriptionXml_result&);
  FmuService_getModelDescriptionXml_result& operator=(const FmuService_getModelDescriptionXml_result&);
  FmuService_getModelDescriptionXml_result() : success() {
  }

  virtual ~FmuService_getModelDescriptionXml_result() throw();
  std::string success;

  _FmuService_getModelDescriptionXml_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FmuService_getModelDescriptionXml_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FmuService_getModelDescriptionXml_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_getModelDescriptionXml_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_getModelDescriptionXml_presult__isset {
  _FmuService_getModelDescriptionXml_presult__isset() : success(false) {}
  bool success :1;
} _FmuService_getModelDescriptionXml_presult__isset;

class FmuService_getModelDescriptionXml_presult {
 public:


  virtual ~FmuService_getModelDescriptionXml_presult() throw();
  std::string* success;

  _FmuService_getModelDescriptionXml_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FmuService_getModelDescription_args {
 public:

  FmuService_getModelDescription_args(const FmuService_getModelDescription_args&);
  FmuService_getModelDescription_args& operator=(const FmuService_getModelDescription_args&);
  FmuService_getModelDescription_args() {
  }

  virtual ~FmuService_getModelDescription_args() throw();

  bool operator == (const FmuService_getModelDescription_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FmuService_getModelDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_getModelDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_getModelDescription_pargs {
 public:


  virtual ~FmuService_getModelDescription_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_getModelDescription_result__isset {
  _FmuService_getModelDescription_result__isset() : success(false) {}
  bool success :1;
} _FmuService_getModelDescription_result__isset;

class FmuService_getModelDescription_result {
 public:

  FmuService_getModelDescription_result(const FmuService_getModelDescription_result&);
  FmuService_getModelDescription_result& operator=(const FmuService_getModelDescription_result&);
  FmuService_getModelDescription_result() {
  }

  virtual ~FmuService_getModelDescription_result() throw();
   ::fmuproxy::thrift::ModelDescription success;

  _FmuService_getModelDescription_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::ModelDescription& val);

  bool operator == (const FmuService_getModelDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FmuService_getModelDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_getModelDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_getModelDescription_presult__isset {
  _FmuService_getModelDescription_presult__isset() : success(false) {}
  bool success :1;
} _FmuService_getModelDescription_presult__isset;

class FmuService_getModelDescription_presult {
 public:


  virtual ~FmuService_getModelDescription_presult() throw();
   ::fmuproxy::thrift::ModelDescription* success;

  _FmuService_getModelDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FmuService_createInstanceFromCS_args {
 public:

  FmuService_createInstanceFromCS_args(const FmuService_createInstanceFromCS_args&);
  FmuService_createInstanceFromCS_args& operator=(const FmuService_createInstanceFromCS_args&);
  FmuService_createInstanceFromCS_args() {
  }

  virtual ~FmuService_createInstanceFromCS_args() throw();

  bool operator == (const FmuService_createInstanceFromCS_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FmuService_createInstanceFromCS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_createInstanceFromCS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_createInstanceFromCS_pargs {
 public:


  virtual ~FmuService_createInstanceFromCS_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_createInstanceFromCS_result__isset {
  _FmuService_createInstanceFromCS_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_createInstanceFromCS_result__isset;

class FmuService_createInstanceFromCS_result {
 public:

  FmuService_createInstanceFromCS_result(const FmuService_createInstanceFromCS_result&);
  FmuService_createInstanceFromCS_result& operator=(const FmuService_createInstanceFromCS_result&);
  FmuService_createInstanceFromCS_result() : success(0) {
  }

  virtual ~FmuService_createInstanceFromCS_result() throw();
  FmuId success;
   ::fmuproxy::thrift::UnsupportedOperationException ex;

  _FmuService_createInstanceFromCS_result__isset __isset;

  void __set_success(const FmuId val);

  void __set_ex(const  ::fmuproxy::thrift::UnsupportedOperationException& val);

  bool operator == (const FmuService_createInstanceFromCS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_createInstanceFromCS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_createInstanceFromCS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_createInstanceFromCS_presult__isset {
  _FmuService_createInstanceFromCS_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_createInstanceFromCS_presult__isset;

class FmuService_createInstanceFromCS_presult {
 public:


  virtual ~FmuService_createInstanceFromCS_presult() throw();
  FmuId* success;
   ::fmuproxy::thrift::UnsupportedOperationException ex;

  _FmuService_createInstanceFromCS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_createInstanceFromME_args__isset {
  _FmuService_createInstanceFromME_args__isset() : solver(false) {}
  bool solver :1;
} _FmuService_createInstanceFromME_args__isset;

class FmuService_createInstanceFromME_args {
 public:

  FmuService_createInstanceFromME_args(const FmuService_createInstanceFromME_args&);
  FmuService_createInstanceFromME_args& operator=(const FmuService_createInstanceFromME_args&);
  FmuService_createInstanceFromME_args() {
  }

  virtual ~FmuService_createInstanceFromME_args() throw();
   ::fmuproxy::thrift::Solver solver;

  _FmuService_createInstanceFromME_args__isset __isset;

  void __set_solver(const  ::fmuproxy::thrift::Solver& val);

  bool operator == (const FmuService_createInstanceFromME_args & rhs) const
  {
    if (!(solver == rhs.solver))
      return false;
    return true;
  }
  bool operator != (const FmuService_createInstanceFromME_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_createInstanceFromME_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_createInstanceFromME_pargs {
 public:


  virtual ~FmuService_createInstanceFromME_pargs() throw();
  const  ::fmuproxy::thrift::Solver* solver;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_createInstanceFromME_result__isset {
  _FmuService_createInstanceFromME_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_createInstanceFromME_result__isset;

class FmuService_createInstanceFromME_result {
 public:

  FmuService_createInstanceFromME_result(const FmuService_createInstanceFromME_result&);
  FmuService_createInstanceFromME_result& operator=(const FmuService_createInstanceFromME_result&);
  FmuService_createInstanceFromME_result() : success(0) {
  }

  virtual ~FmuService_createInstanceFromME_result() throw();
  FmuId success;
   ::fmuproxy::thrift::UnsupportedOperationException ex;

  _FmuService_createInstanceFromME_result__isset __isset;

  void __set_success(const FmuId val);

  void __set_ex(const  ::fmuproxy::thrift::UnsupportedOperationException& val);

  bool operator == (const FmuService_createInstanceFromME_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_createInstanceFromME_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_createInstanceFromME_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_createInstanceFromME_presult__isset {
  _FmuService_createInstanceFromME_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_createInstanceFromME_presult__isset;

class FmuService_createInstanceFromME_presult {
 public:


  virtual ~FmuService_createInstanceFromME_presult() throw();
  FmuId* success;
   ::fmuproxy::thrift::UnsupportedOperationException ex;

  _FmuService_createInstanceFromME_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_canGetAndSetFMUstate_args__isset {
  _FmuService_canGetAndSetFMUstate_args__isset() : fmu_id(false) {}
  bool fmu_id :1;
} _FmuService_canGetAndSetFMUstate_args__isset;

class FmuService_canGetAndSetFMUstate_args {
 public:

  FmuService_canGetAndSetFMUstate_args(const FmuService_canGetAndSetFMUstate_args&);
  FmuService_canGetAndSetFMUstate_args& operator=(const FmuService_canGetAndSetFMUstate_args&);
  FmuService_canGetAndSetFMUstate_args() : fmu_id(0) {
  }

  virtual ~FmuService_canGetAndSetFMUstate_args() throw();
  FmuId fmu_id;

  _FmuService_canGetAndSetFMUstate_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  bool operator == (const FmuService_canGetAndSetFMUstate_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    return true;
  }
  bool operator != (const FmuService_canGetAndSetFMUstate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_canGetAndSetFMUstate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_canGetAndSetFMUstate_pargs {
 public:


  virtual ~FmuService_canGetAndSetFMUstate_pargs() throw();
  const FmuId* fmu_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_canGetAndSetFMUstate_result__isset {
  _FmuService_canGetAndSetFMUstate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_canGetAndSetFMUstate_result__isset;

class FmuService_canGetAndSetFMUstate_result {
 public:

  FmuService_canGetAndSetFMUstate_result(const FmuService_canGetAndSetFMUstate_result&);
  FmuService_canGetAndSetFMUstate_result& operator=(const FmuService_canGetAndSetFMUstate_result&);
  FmuService_canGetAndSetFMUstate_result() : success(0) {
  }

  virtual ~FmuService_canGetAndSetFMUstate_result() throw();
  bool success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_canGetAndSetFMUstate_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  bool operator == (const FmuService_canGetAndSetFMUstate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_canGetAndSetFMUstate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_canGetAndSetFMUstate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_canGetAndSetFMUstate_presult__isset {
  _FmuService_canGetAndSetFMUstate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_canGetAndSetFMUstate_presult__isset;

class FmuService_canGetAndSetFMUstate_presult {
 public:


  virtual ~FmuService_canGetAndSetFMUstate_presult() throw();
  bool* success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_canGetAndSetFMUstate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_getCurrentTime_args__isset {
  _FmuService_getCurrentTime_args__isset() : fmu_id(false) {}
  bool fmu_id :1;
} _FmuService_getCurrentTime_args__isset;

class FmuService_getCurrentTime_args {
 public:

  FmuService_getCurrentTime_args(const FmuService_getCurrentTime_args&);
  FmuService_getCurrentTime_args& operator=(const FmuService_getCurrentTime_args&);
  FmuService_getCurrentTime_args() : fmu_id(0) {
  }

  virtual ~FmuService_getCurrentTime_args() throw();
  FmuId fmu_id;

  _FmuService_getCurrentTime_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  bool operator == (const FmuService_getCurrentTime_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    return true;
  }
  bool operator != (const FmuService_getCurrentTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_getCurrentTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_getCurrentTime_pargs {
 public:


  virtual ~FmuService_getCurrentTime_pargs() throw();
  const FmuId* fmu_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_getCurrentTime_result__isset {
  _FmuService_getCurrentTime_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_getCurrentTime_result__isset;

class FmuService_getCurrentTime_result {
 public:

  FmuService_getCurrentTime_result(const FmuService_getCurrentTime_result&);
  FmuService_getCurrentTime_result& operator=(const FmuService_getCurrentTime_result&);
  FmuService_getCurrentTime_result() : success(0) {
  }

  virtual ~FmuService_getCurrentTime_result() throw();
  double success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_getCurrentTime_result__isset __isset;

  void __set_success(const double val);

  void __set_ex(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  bool operator == (const FmuService_getCurrentTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_getCurrentTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_getCurrentTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_getCurrentTime_presult__isset {
  _FmuService_getCurrentTime_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_getCurrentTime_presult__isset;

class FmuService_getCurrentTime_presult {
 public:


  virtual ~FmuService_getCurrentTime_presult() throw();
  double* success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_getCurrentTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_isTerminated_args__isset {
  _FmuService_isTerminated_args__isset() : fmu_id(false) {}
  bool fmu_id :1;
} _FmuService_isTerminated_args__isset;

class FmuService_isTerminated_args {
 public:

  FmuService_isTerminated_args(const FmuService_isTerminated_args&);
  FmuService_isTerminated_args& operator=(const FmuService_isTerminated_args&);
  FmuService_isTerminated_args() : fmu_id(0) {
  }

  virtual ~FmuService_isTerminated_args() throw();
  FmuId fmu_id;

  _FmuService_isTerminated_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  bool operator == (const FmuService_isTerminated_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    return true;
  }
  bool operator != (const FmuService_isTerminated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_isTerminated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_isTerminated_pargs {
 public:


  virtual ~FmuService_isTerminated_pargs() throw();
  const FmuId* fmu_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_isTerminated_result__isset {
  _FmuService_isTerminated_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_isTerminated_result__isset;

class FmuService_isTerminated_result {
 public:

  FmuService_isTerminated_result(const FmuService_isTerminated_result&);
  FmuService_isTerminated_result& operator=(const FmuService_isTerminated_result&);
  FmuService_isTerminated_result() : success(0) {
  }

  virtual ~FmuService_isTerminated_result() throw();
  bool success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_isTerminated_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  bool operator == (const FmuService_isTerminated_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_isTerminated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_isTerminated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_isTerminated_presult__isset {
  _FmuService_isTerminated_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_isTerminated_presult__isset;

class FmuService_isTerminated_presult {
 public:


  virtual ~FmuService_isTerminated_presult() throw();
  bool* success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_isTerminated_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_init_args__isset {
  _FmuService_init_args__isset() : fmu_id(false), start(false), stop(false) {}
  bool fmu_id :1;
  bool start :1;
  bool stop :1;
} _FmuService_init_args__isset;

class FmuService_init_args {
 public:

  FmuService_init_args(const FmuService_init_args&);
  FmuService_init_args& operator=(const FmuService_init_args&);
  FmuService_init_args() : fmu_id(0), start(0), stop(0) {
  }

  virtual ~FmuService_init_args() throw();
  FmuId fmu_id;
  double start;
  double stop;

  _FmuService_init_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_start(const double val);

  void __set_stop(const double val);

  bool operator == (const FmuService_init_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    return true;
  }
  bool operator != (const FmuService_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_init_pargs {
 public:


  virtual ~FmuService_init_pargs() throw();
  const FmuId* fmu_id;
  const double* start;
  const double* stop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_init_result__isset {
  _FmuService_init_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_init_result__isset;

class FmuService_init_result {
 public:

  FmuService_init_result(const FmuService_init_result&);
  FmuService_init_result& operator=(const FmuService_init_result&);
  FmuService_init_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_init_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_init_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  bool operator == (const FmuService_init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_init_presult__isset {
  _FmuService_init_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_init_presult__isset;

class FmuService_init_presult {
 public:


  virtual ~FmuService_init_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_step_args__isset {
  _FmuService_step_args__isset() : fmu_id(false), step_size(false) {}
  bool fmu_id :1;
  bool step_size :1;
} _FmuService_step_args__isset;

class FmuService_step_args {
 public:

  FmuService_step_args(const FmuService_step_args&);
  FmuService_step_args& operator=(const FmuService_step_args&);
  FmuService_step_args() : fmu_id(0), step_size(0) {
  }

  virtual ~FmuService_step_args() throw();
  FmuId fmu_id;
  double step_size;

  _FmuService_step_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_step_size(const double val);

  bool operator == (const FmuService_step_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(step_size == rhs.step_size))
      return false;
    return true;
  }
  bool operator != (const FmuService_step_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_step_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_step_pargs {
 public:


  virtual ~FmuService_step_pargs() throw();
  const FmuId* fmu_id;
  const double* step_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_step_result__isset {
  _FmuService_step_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_step_result__isset;

class FmuService_step_result {
 public:

  FmuService_step_result(const FmuService_step_result&);
  FmuService_step_result& operator=(const FmuService_step_result&);
  FmuService_step_result() {
  }

  virtual ~FmuService_step_result() throw();
   ::fmuproxy::thrift::StepResult success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_step_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::StepResult& val);

  void __set_ex(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  bool operator == (const FmuService_step_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_step_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_step_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_step_presult__isset {
  _FmuService_step_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_step_presult__isset;

class FmuService_step_presult {
 public:


  virtual ~FmuService_step_presult() throw();
   ::fmuproxy::thrift::StepResult* success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_step_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_terminate_args__isset {
  _FmuService_terminate_args__isset() : fmu_id(false) {}
  bool fmu_id :1;
} _FmuService_terminate_args__isset;

class FmuService_terminate_args {
 public:

  FmuService_terminate_args(const FmuService_terminate_args&);
  FmuService_terminate_args& operator=(const FmuService_terminate_args&);
  FmuService_terminate_args() : fmu_id(0) {
  }

  virtual ~FmuService_terminate_args() throw();
  FmuId fmu_id;

  _FmuService_terminate_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  bool operator == (const FmuService_terminate_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    return true;
  }
  bool operator != (const FmuService_terminate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_terminate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_terminate_pargs {
 public:


  virtual ~FmuService_terminate_pargs() throw();
  const FmuId* fmu_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_terminate_result__isset {
  _FmuService_terminate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_terminate_result__isset;

class FmuService_terminate_result {
 public:

  FmuService_terminate_result(const FmuService_terminate_result&);
  FmuService_terminate_result& operator=(const FmuService_terminate_result&);
  FmuService_terminate_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_terminate_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_terminate_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  bool operator == (const FmuService_terminate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_terminate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_terminate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_terminate_presult__isset {
  _FmuService_terminate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_terminate_presult__isset;

class FmuService_terminate_presult {
 public:


  virtual ~FmuService_terminate_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_terminate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_reset_args__isset {
  _FmuService_reset_args__isset() : fmu_id(false) {}
  bool fmu_id :1;
} _FmuService_reset_args__isset;

class FmuService_reset_args {
 public:

  FmuService_reset_args(const FmuService_reset_args&);
  FmuService_reset_args& operator=(const FmuService_reset_args&);
  FmuService_reset_args() : fmu_id(0) {
  }

  virtual ~FmuService_reset_args() throw();
  FmuId fmu_id;

  _FmuService_reset_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  bool operator == (const FmuService_reset_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    return true;
  }
  bool operator != (const FmuService_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_reset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_reset_pargs {
 public:


  virtual ~FmuService_reset_pargs() throw();
  const FmuId* fmu_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_reset_result__isset {
  _FmuService_reset_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_reset_result__isset;

class FmuService_reset_result {
 public:

  FmuService_reset_result(const FmuService_reset_result&);
  FmuService_reset_result& operator=(const FmuService_reset_result&);
  FmuService_reset_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_reset_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_reset_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  bool operator == (const FmuService_reset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const FmuService_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_reset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_reset_presult__isset {
  _FmuService_reset_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _FmuService_reset_presult__isset;

class FmuService_reset_presult {
 public:


  virtual ~FmuService_reset_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex;

  _FmuService_reset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_readInteger_args__isset {
  _FmuService_readInteger_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_readInteger_args__isset;

class FmuService_readInteger_args {
 public:

  FmuService_readInteger_args(const FmuService_readInteger_args&);
  FmuService_readInteger_args& operator=(const FmuService_readInteger_args&);
  FmuService_readInteger_args() : fmu_id(0), vr(0) {
  }

  virtual ~FmuService_readInteger_args() throw();
  FmuId fmu_id;
  ValueReference vr;

  _FmuService_readInteger_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  bool operator == (const FmuService_readInteger_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_readInteger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readInteger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_readInteger_pargs {
 public:


  virtual ~FmuService_readInteger_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readInteger_result__isset {
  _FmuService_readInteger_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readInteger_result__isset;

class FmuService_readInteger_result {
 public:

  FmuService_readInteger_result(const FmuService_readInteger_result&);
  FmuService_readInteger_result& operator=(const FmuService_readInteger_result&);
  FmuService_readInteger_result() {
  }

  virtual ~FmuService_readInteger_result() throw();
   ::fmuproxy::thrift::IntegerRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readInteger_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::IntegerRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_readInteger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_readInteger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readInteger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readInteger_presult__isset {
  _FmuService_readInteger_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readInteger_presult__isset;

class FmuService_readInteger_presult {
 public:


  virtual ~FmuService_readInteger_presult() throw();
   ::fmuproxy::thrift::IntegerRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readInteger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkReadInteger_args__isset {
  _FmuService_bulkReadInteger_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_bulkReadInteger_args__isset;

class FmuService_bulkReadInteger_args {
 public:

  FmuService_bulkReadInteger_args(const FmuService_bulkReadInteger_args&);
  FmuService_bulkReadInteger_args& operator=(const FmuService_bulkReadInteger_args&);
  FmuService_bulkReadInteger_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkReadInteger_args() throw();
  FmuId fmu_id;
  ValueReferences vr;

  _FmuService_bulkReadInteger_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const FmuService_bulkReadInteger_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadInteger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadInteger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkReadInteger_pargs {
 public:


  virtual ~FmuService_bulkReadInteger_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadInteger_result__isset {
  _FmuService_bulkReadInteger_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadInteger_result__isset;

class FmuService_bulkReadInteger_result {
 public:

  FmuService_bulkReadInteger_result(const FmuService_bulkReadInteger_result&);
  FmuService_bulkReadInteger_result& operator=(const FmuService_bulkReadInteger_result&);
  FmuService_bulkReadInteger_result() {
  }

  virtual ~FmuService_bulkReadInteger_result() throw();
   ::fmuproxy::thrift::IntegerArrayRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadInteger_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::IntegerArrayRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkReadInteger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadInteger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadInteger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadInteger_presult__isset {
  _FmuService_bulkReadInteger_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadInteger_presult__isset;

class FmuService_bulkReadInteger_presult {
 public:


  virtual ~FmuService_bulkReadInteger_presult() throw();
   ::fmuproxy::thrift::IntegerArrayRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadInteger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_readReal_args__isset {
  _FmuService_readReal_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_readReal_args__isset;

class FmuService_readReal_args {
 public:

  FmuService_readReal_args(const FmuService_readReal_args&);
  FmuService_readReal_args& operator=(const FmuService_readReal_args&);
  FmuService_readReal_args() : fmu_id(0), vr(0) {
  }

  virtual ~FmuService_readReal_args() throw();
  FmuId fmu_id;
  ValueReference vr;

  _FmuService_readReal_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  bool operator == (const FmuService_readReal_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_readReal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readReal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_readReal_pargs {
 public:


  virtual ~FmuService_readReal_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readReal_result__isset {
  _FmuService_readReal_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readReal_result__isset;

class FmuService_readReal_result {
 public:

  FmuService_readReal_result(const FmuService_readReal_result&);
  FmuService_readReal_result& operator=(const FmuService_readReal_result&);
  FmuService_readReal_result() {
  }

  virtual ~FmuService_readReal_result() throw();
   ::fmuproxy::thrift::RealRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readReal_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::RealRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_readReal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_readReal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readReal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readReal_presult__isset {
  _FmuService_readReal_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readReal_presult__isset;

class FmuService_readReal_presult {
 public:


  virtual ~FmuService_readReal_presult() throw();
   ::fmuproxy::thrift::RealRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readReal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkReadReal_args__isset {
  _FmuService_bulkReadReal_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_bulkReadReal_args__isset;

class FmuService_bulkReadReal_args {
 public:

  FmuService_bulkReadReal_args(const FmuService_bulkReadReal_args&);
  FmuService_bulkReadReal_args& operator=(const FmuService_bulkReadReal_args&);
  FmuService_bulkReadReal_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkReadReal_args() throw();
  FmuId fmu_id;
  ValueReferences vr;

  _FmuService_bulkReadReal_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const FmuService_bulkReadReal_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadReal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadReal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkReadReal_pargs {
 public:


  virtual ~FmuService_bulkReadReal_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadReal_result__isset {
  _FmuService_bulkReadReal_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadReal_result__isset;

class FmuService_bulkReadReal_result {
 public:

  FmuService_bulkReadReal_result(const FmuService_bulkReadReal_result&);
  FmuService_bulkReadReal_result& operator=(const FmuService_bulkReadReal_result&);
  FmuService_bulkReadReal_result() {
  }

  virtual ~FmuService_bulkReadReal_result() throw();
   ::fmuproxy::thrift::RealArrayRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadReal_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::RealArrayRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkReadReal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadReal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadReal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadReal_presult__isset {
  _FmuService_bulkReadReal_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadReal_presult__isset;

class FmuService_bulkReadReal_presult {
 public:


  virtual ~FmuService_bulkReadReal_presult() throw();
   ::fmuproxy::thrift::RealArrayRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadReal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_readString_args__isset {
  _FmuService_readString_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_readString_args__isset;

class FmuService_readString_args {
 public:

  FmuService_readString_args(const FmuService_readString_args&);
  FmuService_readString_args& operator=(const FmuService_readString_args&);
  FmuService_readString_args() : fmu_id(0), vr(0) {
  }

  virtual ~FmuService_readString_args() throw();
  FmuId fmu_id;
  ValueReference vr;

  _FmuService_readString_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  bool operator == (const FmuService_readString_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_readString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_readString_pargs {
 public:


  virtual ~FmuService_readString_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readString_result__isset {
  _FmuService_readString_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readString_result__isset;

class FmuService_readString_result {
 public:

  FmuService_readString_result(const FmuService_readString_result&);
  FmuService_readString_result& operator=(const FmuService_readString_result&);
  FmuService_readString_result() {
  }

  virtual ~FmuService_readString_result() throw();
   ::fmuproxy::thrift::StringRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readString_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::StringRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_readString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_readString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readString_presult__isset {
  _FmuService_readString_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readString_presult__isset;

class FmuService_readString_presult {
 public:


  virtual ~FmuService_readString_presult() throw();
   ::fmuproxy::thrift::StringRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkReadString_args__isset {
  _FmuService_bulkReadString_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_bulkReadString_args__isset;

class FmuService_bulkReadString_args {
 public:

  FmuService_bulkReadString_args(const FmuService_bulkReadString_args&);
  FmuService_bulkReadString_args& operator=(const FmuService_bulkReadString_args&);
  FmuService_bulkReadString_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkReadString_args() throw();
  FmuId fmu_id;
  ValueReferences vr;

  _FmuService_bulkReadString_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const FmuService_bulkReadString_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkReadString_pargs {
 public:


  virtual ~FmuService_bulkReadString_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadString_result__isset {
  _FmuService_bulkReadString_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadString_result__isset;

class FmuService_bulkReadString_result {
 public:

  FmuService_bulkReadString_result(const FmuService_bulkReadString_result&);
  FmuService_bulkReadString_result& operator=(const FmuService_bulkReadString_result&);
  FmuService_bulkReadString_result() {
  }

  virtual ~FmuService_bulkReadString_result() throw();
   ::fmuproxy::thrift::StringArrayRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadString_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::StringArrayRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkReadString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadString_presult__isset {
  _FmuService_bulkReadString_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadString_presult__isset;

class FmuService_bulkReadString_presult {
 public:


  virtual ~FmuService_bulkReadString_presult() throw();
   ::fmuproxy::thrift::StringArrayRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_readBoolean_args__isset {
  _FmuService_readBoolean_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_readBoolean_args__isset;

class FmuService_readBoolean_args {
 public:

  FmuService_readBoolean_args(const FmuService_readBoolean_args&);
  FmuService_readBoolean_args& operator=(const FmuService_readBoolean_args&);
  FmuService_readBoolean_args() : fmu_id(0), vr(0) {
  }

  virtual ~FmuService_readBoolean_args() throw();
  FmuId fmu_id;
  ValueReference vr;

  _FmuService_readBoolean_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  bool operator == (const FmuService_readBoolean_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_readBoolean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readBoolean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_readBoolean_pargs {
 public:


  virtual ~FmuService_readBoolean_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readBoolean_result__isset {
  _FmuService_readBoolean_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readBoolean_result__isset;

class FmuService_readBoolean_result {
 public:

  FmuService_readBoolean_result(const FmuService_readBoolean_result&);
  FmuService_readBoolean_result& operator=(const FmuService_readBoolean_result&);
  FmuService_readBoolean_result() {
  }

  virtual ~FmuService_readBoolean_result() throw();
   ::fmuproxy::thrift::BooleanRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readBoolean_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::BooleanRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_readBoolean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_readBoolean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_readBoolean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_readBoolean_presult__isset {
  _FmuService_readBoolean_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_readBoolean_presult__isset;

class FmuService_readBoolean_presult {
 public:


  virtual ~FmuService_readBoolean_presult() throw();
   ::fmuproxy::thrift::BooleanRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_readBoolean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkReadBoolean_args__isset {
  _FmuService_bulkReadBoolean_args__isset() : fmu_id(false), vr(false) {}
  bool fmu_id :1;
  bool vr :1;
} _FmuService_bulkReadBoolean_args__isset;

class FmuService_bulkReadBoolean_args {
 public:

  FmuService_bulkReadBoolean_args(const FmuService_bulkReadBoolean_args&);
  FmuService_bulkReadBoolean_args& operator=(const FmuService_bulkReadBoolean_args&);
  FmuService_bulkReadBoolean_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkReadBoolean_args() throw();
  FmuId fmu_id;
  ValueReferences vr;

  _FmuService_bulkReadBoolean_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const FmuService_bulkReadBoolean_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadBoolean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadBoolean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkReadBoolean_pargs {
 public:


  virtual ~FmuService_bulkReadBoolean_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadBoolean_result__isset {
  _FmuService_bulkReadBoolean_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadBoolean_result__isset;

class FmuService_bulkReadBoolean_result {
 public:

  FmuService_bulkReadBoolean_result(const FmuService_bulkReadBoolean_result&);
  FmuService_bulkReadBoolean_result& operator=(const FmuService_bulkReadBoolean_result&);
  FmuService_bulkReadBoolean_result() {
  }

  virtual ~FmuService_bulkReadBoolean_result() throw();
   ::fmuproxy::thrift::BooleanArrayRead success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadBoolean_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::BooleanArrayRead& val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkReadBoolean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkReadBoolean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkReadBoolean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkReadBoolean_presult__isset {
  _FmuService_bulkReadBoolean_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkReadBoolean_presult__isset;

class FmuService_bulkReadBoolean_presult {
 public:


  virtual ~FmuService_bulkReadBoolean_presult() throw();
   ::fmuproxy::thrift::BooleanArrayRead* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkReadBoolean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_writeInteger_args__isset {
  _FmuService_writeInteger_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_writeInteger_args__isset;

class FmuService_writeInteger_args {
 public:

  FmuService_writeInteger_args(const FmuService_writeInteger_args&);
  FmuService_writeInteger_args& operator=(const FmuService_writeInteger_args&);
  FmuService_writeInteger_args() : fmu_id(0), vr(0), value(0) {
  }

  virtual ~FmuService_writeInteger_args() throw();
  FmuId fmu_id;
  ValueReference vr;
  int32_t value;

  _FmuService_writeInteger_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  void __set_value(const int32_t val);

  bool operator == (const FmuService_writeInteger_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeInteger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeInteger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_writeInteger_pargs {
 public:


  virtual ~FmuService_writeInteger_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;
  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeInteger_result__isset {
  _FmuService_writeInteger_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeInteger_result__isset;

class FmuService_writeInteger_result {
 public:

  FmuService_writeInteger_result(const FmuService_writeInteger_result&);
  FmuService_writeInteger_result& operator=(const FmuService_writeInteger_result&);
  FmuService_writeInteger_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_writeInteger_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeInteger_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_writeInteger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeInteger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeInteger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeInteger_presult__isset {
  _FmuService_writeInteger_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeInteger_presult__isset;

class FmuService_writeInteger_presult {
 public:


  virtual ~FmuService_writeInteger_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeInteger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkWriteInteger_args__isset {
  _FmuService_bulkWriteInteger_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_bulkWriteInteger_args__isset;

class FmuService_bulkWriteInteger_args {
 public:

  FmuService_bulkWriteInteger_args(const FmuService_bulkWriteInteger_args&);
  FmuService_bulkWriteInteger_args& operator=(const FmuService_bulkWriteInteger_args&);
  FmuService_bulkWriteInteger_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkWriteInteger_args() throw();
  FmuId fmu_id;
  ValueReferences vr;
  IntArray value;

  _FmuService_bulkWriteInteger_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const IntArray& val);

  bool operator == (const FmuService_bulkWriteInteger_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteInteger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteInteger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkWriteInteger_pargs {
 public:


  virtual ~FmuService_bulkWriteInteger_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;
  const IntArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteInteger_result__isset {
  _FmuService_bulkWriteInteger_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteInteger_result__isset;

class FmuService_bulkWriteInteger_result {
 public:

  FmuService_bulkWriteInteger_result(const FmuService_bulkWriteInteger_result&);
  FmuService_bulkWriteInteger_result& operator=(const FmuService_bulkWriteInteger_result&);
  FmuService_bulkWriteInteger_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_bulkWriteInteger_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteInteger_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkWriteInteger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteInteger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteInteger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteInteger_presult__isset {
  _FmuService_bulkWriteInteger_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteInteger_presult__isset;

class FmuService_bulkWriteInteger_presult {
 public:


  virtual ~FmuService_bulkWriteInteger_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteInteger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_writeReal_args__isset {
  _FmuService_writeReal_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_writeReal_args__isset;

class FmuService_writeReal_args {
 public:

  FmuService_writeReal_args(const FmuService_writeReal_args&);
  FmuService_writeReal_args& operator=(const FmuService_writeReal_args&);
  FmuService_writeReal_args() : fmu_id(0), vr(0), value(0) {
  }

  virtual ~FmuService_writeReal_args() throw();
  FmuId fmu_id;
  ValueReference vr;
  double value;

  _FmuService_writeReal_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  void __set_value(const double val);

  bool operator == (const FmuService_writeReal_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeReal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeReal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_writeReal_pargs {
 public:


  virtual ~FmuService_writeReal_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;
  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeReal_result__isset {
  _FmuService_writeReal_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeReal_result__isset;

class FmuService_writeReal_result {
 public:

  FmuService_writeReal_result(const FmuService_writeReal_result&);
  FmuService_writeReal_result& operator=(const FmuService_writeReal_result&);
  FmuService_writeReal_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_writeReal_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeReal_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_writeReal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeReal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeReal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeReal_presult__isset {
  _FmuService_writeReal_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeReal_presult__isset;

class FmuService_writeReal_presult {
 public:


  virtual ~FmuService_writeReal_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeReal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkWriteReal_args__isset {
  _FmuService_bulkWriteReal_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_bulkWriteReal_args__isset;

class FmuService_bulkWriteReal_args {
 public:

  FmuService_bulkWriteReal_args(const FmuService_bulkWriteReal_args&);
  FmuService_bulkWriteReal_args& operator=(const FmuService_bulkWriteReal_args&);
  FmuService_bulkWriteReal_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkWriteReal_args() throw();
  FmuId fmu_id;
  ValueReferences vr;
  RealArray value;

  _FmuService_bulkWriteReal_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const RealArray& val);

  bool operator == (const FmuService_bulkWriteReal_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteReal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteReal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkWriteReal_pargs {
 public:


  virtual ~FmuService_bulkWriteReal_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;
  const RealArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteReal_result__isset {
  _FmuService_bulkWriteReal_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteReal_result__isset;

class FmuService_bulkWriteReal_result {
 public:

  FmuService_bulkWriteReal_result(const FmuService_bulkWriteReal_result&);
  FmuService_bulkWriteReal_result& operator=(const FmuService_bulkWriteReal_result&);
  FmuService_bulkWriteReal_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_bulkWriteReal_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteReal_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkWriteReal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteReal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteReal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteReal_presult__isset {
  _FmuService_bulkWriteReal_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteReal_presult__isset;

class FmuService_bulkWriteReal_presult {
 public:


  virtual ~FmuService_bulkWriteReal_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteReal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_writeString_args__isset {
  _FmuService_writeString_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_writeString_args__isset;

class FmuService_writeString_args {
 public:

  FmuService_writeString_args(const FmuService_writeString_args&);
  FmuService_writeString_args& operator=(const FmuService_writeString_args&);
  FmuService_writeString_args() : fmu_id(0), vr(0), value() {
  }

  virtual ~FmuService_writeString_args() throw();
  FmuId fmu_id;
  ValueReference vr;
  std::string value;

  _FmuService_writeString_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  void __set_value(const std::string& val);

  bool operator == (const FmuService_writeString_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_writeString_pargs {
 public:


  virtual ~FmuService_writeString_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeString_result__isset {
  _FmuService_writeString_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeString_result__isset;

class FmuService_writeString_result {
 public:

  FmuService_writeString_result(const FmuService_writeString_result&);
  FmuService_writeString_result& operator=(const FmuService_writeString_result&);
  FmuService_writeString_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_writeString_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeString_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_writeString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeString_presult__isset {
  _FmuService_writeString_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeString_presult__isset;

class FmuService_writeString_presult {
 public:


  virtual ~FmuService_writeString_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkWriteString_args__isset {
  _FmuService_bulkWriteString_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_bulkWriteString_args__isset;

class FmuService_bulkWriteString_args {
 public:

  FmuService_bulkWriteString_args(const FmuService_bulkWriteString_args&);
  FmuService_bulkWriteString_args& operator=(const FmuService_bulkWriteString_args&);
  FmuService_bulkWriteString_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkWriteString_args() throw();
  FmuId fmu_id;
  ValueReferences vr;
  StringArray value;

  _FmuService_bulkWriteString_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const StringArray& val);

  bool operator == (const FmuService_bulkWriteString_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkWriteString_pargs {
 public:


  virtual ~FmuService_bulkWriteString_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;
  const StringArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteString_result__isset {
  _FmuService_bulkWriteString_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteString_result__isset;

class FmuService_bulkWriteString_result {
 public:

  FmuService_bulkWriteString_result(const FmuService_bulkWriteString_result&);
  FmuService_bulkWriteString_result& operator=(const FmuService_bulkWriteString_result&);
  FmuService_bulkWriteString_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_bulkWriteString_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteString_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkWriteString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteString_presult__isset {
  _FmuService_bulkWriteString_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteString_presult__isset;

class FmuService_bulkWriteString_presult {
 public:


  virtual ~FmuService_bulkWriteString_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_writeBoolean_args__isset {
  _FmuService_writeBoolean_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_writeBoolean_args__isset;

class FmuService_writeBoolean_args {
 public:

  FmuService_writeBoolean_args(const FmuService_writeBoolean_args&);
  FmuService_writeBoolean_args& operator=(const FmuService_writeBoolean_args&);
  FmuService_writeBoolean_args() : fmu_id(0), vr(0), value(0) {
  }

  virtual ~FmuService_writeBoolean_args() throw();
  FmuId fmu_id;
  ValueReference vr;
  bool value;

  _FmuService_writeBoolean_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReference val);

  void __set_value(const bool val);

  bool operator == (const FmuService_writeBoolean_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeBoolean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeBoolean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_writeBoolean_pargs {
 public:


  virtual ~FmuService_writeBoolean_pargs() throw();
  const FmuId* fmu_id;
  const ValueReference* vr;
  const bool* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeBoolean_result__isset {
  _FmuService_writeBoolean_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeBoolean_result__isset;

class FmuService_writeBoolean_result {
 public:

  FmuService_writeBoolean_result(const FmuService_writeBoolean_result&);
  FmuService_writeBoolean_result& operator=(const FmuService_writeBoolean_result&);
  FmuService_writeBoolean_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_writeBoolean_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeBoolean_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_writeBoolean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_writeBoolean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_writeBoolean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_writeBoolean_presult__isset {
  _FmuService_writeBoolean_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_writeBoolean_presult__isset;

class FmuService_writeBoolean_presult {
 public:


  virtual ~FmuService_writeBoolean_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_writeBoolean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FmuService_bulkWriteBoolean_args__isset {
  _FmuService_bulkWriteBoolean_args__isset() : fmu_id(false), vr(false), value(false) {}
  bool fmu_id :1;
  bool vr :1;
  bool value :1;
} _FmuService_bulkWriteBoolean_args__isset;

class FmuService_bulkWriteBoolean_args {
 public:

  FmuService_bulkWriteBoolean_args(const FmuService_bulkWriteBoolean_args&);
  FmuService_bulkWriteBoolean_args& operator=(const FmuService_bulkWriteBoolean_args&);
  FmuService_bulkWriteBoolean_args() : fmu_id(0) {
  }

  virtual ~FmuService_bulkWriteBoolean_args() throw();
  FmuId fmu_id;
  ValueReferences vr;
  BooleanArray value;

  _FmuService_bulkWriteBoolean_args__isset __isset;

  void __set_fmu_id(const FmuId val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const BooleanArray& val);

  bool operator == (const FmuService_bulkWriteBoolean_args & rhs) const
  {
    if (!(fmu_id == rhs.fmu_id))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteBoolean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteBoolean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FmuService_bulkWriteBoolean_pargs {
 public:


  virtual ~FmuService_bulkWriteBoolean_pargs() throw();
  const FmuId* fmu_id;
  const ValueReferences* vr;
  const BooleanArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteBoolean_result__isset {
  _FmuService_bulkWriteBoolean_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteBoolean_result__isset;

class FmuService_bulkWriteBoolean_result {
 public:

  FmuService_bulkWriteBoolean_result(const FmuService_bulkWriteBoolean_result&);
  FmuService_bulkWriteBoolean_result& operator=(const FmuService_bulkWriteBoolean_result&);
  FmuService_bulkWriteBoolean_result() : success(( ::fmuproxy::thrift::Status::type)0) {
  }

  virtual ~FmuService_bulkWriteBoolean_result() throw();
   ::fmuproxy::thrift::Status::type success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteBoolean_result__isset __isset;

  void __set_success(const  ::fmuproxy::thrift::Status::type val);

  void __set_ex1(const  ::fmuproxy::thrift::NoSuchFmuException& val);

  void __set_ex2(const  ::fmuproxy::thrift::NoSuchVariableException& val);

  bool operator == (const FmuService_bulkWriteBoolean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const FmuService_bulkWriteBoolean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FmuService_bulkWriteBoolean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FmuService_bulkWriteBoolean_presult__isset {
  _FmuService_bulkWriteBoolean_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _FmuService_bulkWriteBoolean_presult__isset;

class FmuService_bulkWriteBoolean_presult {
 public:


  virtual ~FmuService_bulkWriteBoolean_presult() throw();
   ::fmuproxy::thrift::Status::type* success;
   ::fmuproxy::thrift::NoSuchFmuException ex1;
   ::fmuproxy::thrift::NoSuchVariableException ex2;

  _FmuService_bulkWriteBoolean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FmuServiceClient : virtual public FmuServiceIf {
 public:
  FmuServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FmuServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getModelDescriptionXml(std::string& _return);
  void send_getModelDescriptionXml();
  void recv_getModelDescriptionXml(std::string& _return);
  void getModelDescription( ::fmuproxy::thrift::ModelDescription& _return);
  void send_getModelDescription();
  void recv_getModelDescription( ::fmuproxy::thrift::ModelDescription& _return);
  FmuId createInstanceFromCS();
  void send_createInstanceFromCS();
  FmuId recv_createInstanceFromCS();
  FmuId createInstanceFromME(const  ::fmuproxy::thrift::Solver& solver);
  void send_createInstanceFromME(const  ::fmuproxy::thrift::Solver& solver);
  FmuId recv_createInstanceFromME();
  bool canGetAndSetFMUstate(const FmuId fmu_id);
  void send_canGetAndSetFMUstate(const FmuId fmu_id);
  bool recv_canGetAndSetFMUstate();
  double getCurrentTime(const FmuId fmu_id);
  void send_getCurrentTime(const FmuId fmu_id);
  double recv_getCurrentTime();
  bool isTerminated(const FmuId fmu_id);
  void send_isTerminated(const FmuId fmu_id);
  bool recv_isTerminated();
   ::fmuproxy::thrift::Status::type init(const FmuId fmu_id, const double start, const double stop);
  void send_init(const FmuId fmu_id, const double start, const double stop);
   ::fmuproxy::thrift::Status::type recv_init();
  void step( ::fmuproxy::thrift::StepResult& _return, const FmuId fmu_id, const double step_size);
  void send_step(const FmuId fmu_id, const double step_size);
  void recv_step( ::fmuproxy::thrift::StepResult& _return);
   ::fmuproxy::thrift::Status::type terminate(const FmuId fmu_id);
  void send_terminate(const FmuId fmu_id);
   ::fmuproxy::thrift::Status::type recv_terminate();
   ::fmuproxy::thrift::Status::type reset(const FmuId fmu_id);
  void send_reset(const FmuId fmu_id);
   ::fmuproxy::thrift::Status::type recv_reset();
  void readInteger( ::fmuproxy::thrift::IntegerRead& _return, const FmuId fmu_id, const ValueReference vr);
  void send_readInteger(const FmuId fmu_id, const ValueReference vr);
  void recv_readInteger( ::fmuproxy::thrift::IntegerRead& _return);
  void bulkReadInteger( ::fmuproxy::thrift::IntegerArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  void send_bulkReadInteger(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadInteger( ::fmuproxy::thrift::IntegerArrayRead& _return);
  void readReal( ::fmuproxy::thrift::RealRead& _return, const FmuId fmu_id, const ValueReference vr);
  void send_readReal(const FmuId fmu_id, const ValueReference vr);
  void recv_readReal( ::fmuproxy::thrift::RealRead& _return);
  void bulkReadReal( ::fmuproxy::thrift::RealArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  void send_bulkReadReal(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadReal( ::fmuproxy::thrift::RealArrayRead& _return);
  void readString( ::fmuproxy::thrift::StringRead& _return, const FmuId fmu_id, const ValueReference vr);
  void send_readString(const FmuId fmu_id, const ValueReference vr);
  void recv_readString( ::fmuproxy::thrift::StringRead& _return);
  void bulkReadString( ::fmuproxy::thrift::StringArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  void send_bulkReadString(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadString( ::fmuproxy::thrift::StringArrayRead& _return);
  void readBoolean( ::fmuproxy::thrift::BooleanRead& _return, const FmuId fmu_id, const ValueReference vr);
  void send_readBoolean(const FmuId fmu_id, const ValueReference vr);
  void recv_readBoolean( ::fmuproxy::thrift::BooleanRead& _return);
  void bulkReadBoolean( ::fmuproxy::thrift::BooleanArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  void send_bulkReadBoolean(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadBoolean( ::fmuproxy::thrift::BooleanArrayRead& _return);
   ::fmuproxy::thrift::Status::type writeInteger(const FmuId fmu_id, const ValueReference vr, const int32_t value);
  void send_writeInteger(const FmuId fmu_id, const ValueReference vr, const int32_t value);
   ::fmuproxy::thrift::Status::type recv_writeInteger();
   ::fmuproxy::thrift::Status::type bulkWriteInteger(const FmuId fmu_id, const ValueReferences& vr, const IntArray& value);
  void send_bulkWriteInteger(const FmuId fmu_id, const ValueReferences& vr, const IntArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteInteger();
   ::fmuproxy::thrift::Status::type writeReal(const FmuId fmu_id, const ValueReference vr, const double value);
  void send_writeReal(const FmuId fmu_id, const ValueReference vr, const double value);
   ::fmuproxy::thrift::Status::type recv_writeReal();
   ::fmuproxy::thrift::Status::type bulkWriteReal(const FmuId fmu_id, const ValueReferences& vr, const RealArray& value);
  void send_bulkWriteReal(const FmuId fmu_id, const ValueReferences& vr, const RealArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteReal();
   ::fmuproxy::thrift::Status::type writeString(const FmuId fmu_id, const ValueReference vr, const std::string& value);
  void send_writeString(const FmuId fmu_id, const ValueReference vr, const std::string& value);
   ::fmuproxy::thrift::Status::type recv_writeString();
   ::fmuproxy::thrift::Status::type bulkWriteString(const FmuId fmu_id, const ValueReferences& vr, const StringArray& value);
  void send_bulkWriteString(const FmuId fmu_id, const ValueReferences& vr, const StringArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteString();
   ::fmuproxy::thrift::Status::type writeBoolean(const FmuId fmu_id, const ValueReference vr, const bool value);
  void send_writeBoolean(const FmuId fmu_id, const ValueReference vr, const bool value);
   ::fmuproxy::thrift::Status::type recv_writeBoolean();
   ::fmuproxy::thrift::Status::type bulkWriteBoolean(const FmuId fmu_id, const ValueReferences& vr, const BooleanArray& value);
  void send_bulkWriteBoolean(const FmuId fmu_id, const ValueReferences& vr, const BooleanArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteBoolean();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FmuServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FmuServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FmuServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getModelDescriptionXml(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getModelDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createInstanceFromCS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createInstanceFromME(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_canGetAndSetFMUstate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCurrentTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isTerminated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_step(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readInteger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkReadInteger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readReal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkReadReal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkReadString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readBoolean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkReadBoolean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeInteger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkWriteInteger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeReal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkWriteReal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkWriteString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeBoolean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkWriteBoolean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FmuServiceProcessor(::apache::thrift::stdcxx::shared_ptr<FmuServiceIf> iface) :
    iface_(iface) {
    processMap_["getModelDescriptionXml"] = &FmuServiceProcessor::process_getModelDescriptionXml;
    processMap_["getModelDescription"] = &FmuServiceProcessor::process_getModelDescription;
    processMap_["createInstanceFromCS"] = &FmuServiceProcessor::process_createInstanceFromCS;
    processMap_["createInstanceFromME"] = &FmuServiceProcessor::process_createInstanceFromME;
    processMap_["canGetAndSetFMUstate"] = &FmuServiceProcessor::process_canGetAndSetFMUstate;
    processMap_["getCurrentTime"] = &FmuServiceProcessor::process_getCurrentTime;
    processMap_["isTerminated"] = &FmuServiceProcessor::process_isTerminated;
    processMap_["init"] = &FmuServiceProcessor::process_init;
    processMap_["step"] = &FmuServiceProcessor::process_step;
    processMap_["terminate"] = &FmuServiceProcessor::process_terminate;
    processMap_["reset"] = &FmuServiceProcessor::process_reset;
    processMap_["readInteger"] = &FmuServiceProcessor::process_readInteger;
    processMap_["bulkReadInteger"] = &FmuServiceProcessor::process_bulkReadInteger;
    processMap_["readReal"] = &FmuServiceProcessor::process_readReal;
    processMap_["bulkReadReal"] = &FmuServiceProcessor::process_bulkReadReal;
    processMap_["readString"] = &FmuServiceProcessor::process_readString;
    processMap_["bulkReadString"] = &FmuServiceProcessor::process_bulkReadString;
    processMap_["readBoolean"] = &FmuServiceProcessor::process_readBoolean;
    processMap_["bulkReadBoolean"] = &FmuServiceProcessor::process_bulkReadBoolean;
    processMap_["writeInteger"] = &FmuServiceProcessor::process_writeInteger;
    processMap_["bulkWriteInteger"] = &FmuServiceProcessor::process_bulkWriteInteger;
    processMap_["writeReal"] = &FmuServiceProcessor::process_writeReal;
    processMap_["bulkWriteReal"] = &FmuServiceProcessor::process_bulkWriteReal;
    processMap_["writeString"] = &FmuServiceProcessor::process_writeString;
    processMap_["bulkWriteString"] = &FmuServiceProcessor::process_bulkWriteString;
    processMap_["writeBoolean"] = &FmuServiceProcessor::process_writeBoolean;
    processMap_["bulkWriteBoolean"] = &FmuServiceProcessor::process_bulkWriteBoolean;
  }

  virtual ~FmuServiceProcessor() {}
};

class FmuServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FmuServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FmuServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FmuServiceIfFactory > handlerFactory_;
};

class FmuServiceMultiface : virtual public FmuServiceIf {
 public:
  FmuServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FmuServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FmuServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FmuServiceIf> > ifaces_;
  FmuServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FmuServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getModelDescriptionXml(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getModelDescriptionXml(_return);
    }
    ifaces_[i]->getModelDescriptionXml(_return);
    return;
  }

  void getModelDescription( ::fmuproxy::thrift::ModelDescription& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getModelDescription(_return);
    }
    ifaces_[i]->getModelDescription(_return);
    return;
  }

  FmuId createInstanceFromCS() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createInstanceFromCS();
    }
    return ifaces_[i]->createInstanceFromCS();
  }

  FmuId createInstanceFromME(const  ::fmuproxy::thrift::Solver& solver) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createInstanceFromME(solver);
    }
    return ifaces_[i]->createInstanceFromME(solver);
  }

  bool canGetAndSetFMUstate(const FmuId fmu_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->canGetAndSetFMUstate(fmu_id);
    }
    return ifaces_[i]->canGetAndSetFMUstate(fmu_id);
  }

  double getCurrentTime(const FmuId fmu_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentTime(fmu_id);
    }
    return ifaces_[i]->getCurrentTime(fmu_id);
  }

  bool isTerminated(const FmuId fmu_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isTerminated(fmu_id);
    }
    return ifaces_[i]->isTerminated(fmu_id);
  }

   ::fmuproxy::thrift::Status::type init(const FmuId fmu_id, const double start, const double stop) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init(fmu_id, start, stop);
    }
    return ifaces_[i]->init(fmu_id, start, stop);
  }

  void step( ::fmuproxy::thrift::StepResult& _return, const FmuId fmu_id, const double step_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->step(_return, fmu_id, step_size);
    }
    ifaces_[i]->step(_return, fmu_id, step_size);
    return;
  }

   ::fmuproxy::thrift::Status::type terminate(const FmuId fmu_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminate(fmu_id);
    }
    return ifaces_[i]->terminate(fmu_id);
  }

   ::fmuproxy::thrift::Status::type reset(const FmuId fmu_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset(fmu_id);
    }
    return ifaces_[i]->reset(fmu_id);
  }

  void readInteger( ::fmuproxy::thrift::IntegerRead& _return, const FmuId fmu_id, const ValueReference vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readInteger(_return, fmu_id, vr);
    }
    ifaces_[i]->readInteger(_return, fmu_id, vr);
    return;
  }

  void bulkReadInteger( ::fmuproxy::thrift::IntegerArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkReadInteger(_return, fmu_id, vr);
    }
    ifaces_[i]->bulkReadInteger(_return, fmu_id, vr);
    return;
  }

  void readReal( ::fmuproxy::thrift::RealRead& _return, const FmuId fmu_id, const ValueReference vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readReal(_return, fmu_id, vr);
    }
    ifaces_[i]->readReal(_return, fmu_id, vr);
    return;
  }

  void bulkReadReal( ::fmuproxy::thrift::RealArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkReadReal(_return, fmu_id, vr);
    }
    ifaces_[i]->bulkReadReal(_return, fmu_id, vr);
    return;
  }

  void readString( ::fmuproxy::thrift::StringRead& _return, const FmuId fmu_id, const ValueReference vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readString(_return, fmu_id, vr);
    }
    ifaces_[i]->readString(_return, fmu_id, vr);
    return;
  }

  void bulkReadString( ::fmuproxy::thrift::StringArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkReadString(_return, fmu_id, vr);
    }
    ifaces_[i]->bulkReadString(_return, fmu_id, vr);
    return;
  }

  void readBoolean( ::fmuproxy::thrift::BooleanRead& _return, const FmuId fmu_id, const ValueReference vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readBoolean(_return, fmu_id, vr);
    }
    ifaces_[i]->readBoolean(_return, fmu_id, vr);
    return;
  }

  void bulkReadBoolean( ::fmuproxy::thrift::BooleanArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkReadBoolean(_return, fmu_id, vr);
    }
    ifaces_[i]->bulkReadBoolean(_return, fmu_id, vr);
    return;
  }

   ::fmuproxy::thrift::Status::type writeInteger(const FmuId fmu_id, const ValueReference vr, const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeInteger(fmu_id, vr, value);
    }
    return ifaces_[i]->writeInteger(fmu_id, vr, value);
  }

   ::fmuproxy::thrift::Status::type bulkWriteInteger(const FmuId fmu_id, const ValueReferences& vr, const IntArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkWriteInteger(fmu_id, vr, value);
    }
    return ifaces_[i]->bulkWriteInteger(fmu_id, vr, value);
  }

   ::fmuproxy::thrift::Status::type writeReal(const FmuId fmu_id, const ValueReference vr, const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeReal(fmu_id, vr, value);
    }
    return ifaces_[i]->writeReal(fmu_id, vr, value);
  }

   ::fmuproxy::thrift::Status::type bulkWriteReal(const FmuId fmu_id, const ValueReferences& vr, const RealArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkWriteReal(fmu_id, vr, value);
    }
    return ifaces_[i]->bulkWriteReal(fmu_id, vr, value);
  }

   ::fmuproxy::thrift::Status::type writeString(const FmuId fmu_id, const ValueReference vr, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeString(fmu_id, vr, value);
    }
    return ifaces_[i]->writeString(fmu_id, vr, value);
  }

   ::fmuproxy::thrift::Status::type bulkWriteString(const FmuId fmu_id, const ValueReferences& vr, const StringArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkWriteString(fmu_id, vr, value);
    }
    return ifaces_[i]->bulkWriteString(fmu_id, vr, value);
  }

   ::fmuproxy::thrift::Status::type writeBoolean(const FmuId fmu_id, const ValueReference vr, const bool value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeBoolean(fmu_id, vr, value);
    }
    return ifaces_[i]->writeBoolean(fmu_id, vr, value);
  }

   ::fmuproxy::thrift::Status::type bulkWriteBoolean(const FmuId fmu_id, const ValueReferences& vr, const BooleanArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkWriteBoolean(fmu_id, vr, value);
    }
    return ifaces_[i]->bulkWriteBoolean(fmu_id, vr, value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FmuServiceConcurrentClient : virtual public FmuServiceIf {
 public:
  FmuServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FmuServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getModelDescriptionXml(std::string& _return);
  int32_t send_getModelDescriptionXml();
  void recv_getModelDescriptionXml(std::string& _return, const int32_t seqid);
  void getModelDescription( ::fmuproxy::thrift::ModelDescription& _return);
  int32_t send_getModelDescription();
  void recv_getModelDescription( ::fmuproxy::thrift::ModelDescription& _return, const int32_t seqid);
  FmuId createInstanceFromCS();
  int32_t send_createInstanceFromCS();
  FmuId recv_createInstanceFromCS(const int32_t seqid);
  FmuId createInstanceFromME(const  ::fmuproxy::thrift::Solver& solver);
  int32_t send_createInstanceFromME(const  ::fmuproxy::thrift::Solver& solver);
  FmuId recv_createInstanceFromME(const int32_t seqid);
  bool canGetAndSetFMUstate(const FmuId fmu_id);
  int32_t send_canGetAndSetFMUstate(const FmuId fmu_id);
  bool recv_canGetAndSetFMUstate(const int32_t seqid);
  double getCurrentTime(const FmuId fmu_id);
  int32_t send_getCurrentTime(const FmuId fmu_id);
  double recv_getCurrentTime(const int32_t seqid);
  bool isTerminated(const FmuId fmu_id);
  int32_t send_isTerminated(const FmuId fmu_id);
  bool recv_isTerminated(const int32_t seqid);
   ::fmuproxy::thrift::Status::type init(const FmuId fmu_id, const double start, const double stop);
  int32_t send_init(const FmuId fmu_id, const double start, const double stop);
   ::fmuproxy::thrift::Status::type recv_init(const int32_t seqid);
  void step( ::fmuproxy::thrift::StepResult& _return, const FmuId fmu_id, const double step_size);
  int32_t send_step(const FmuId fmu_id, const double step_size);
  void recv_step( ::fmuproxy::thrift::StepResult& _return, const int32_t seqid);
   ::fmuproxy::thrift::Status::type terminate(const FmuId fmu_id);
  int32_t send_terminate(const FmuId fmu_id);
   ::fmuproxy::thrift::Status::type recv_terminate(const int32_t seqid);
   ::fmuproxy::thrift::Status::type reset(const FmuId fmu_id);
  int32_t send_reset(const FmuId fmu_id);
   ::fmuproxy::thrift::Status::type recv_reset(const int32_t seqid);
  void readInteger( ::fmuproxy::thrift::IntegerRead& _return, const FmuId fmu_id, const ValueReference vr);
  int32_t send_readInteger(const FmuId fmu_id, const ValueReference vr);
  void recv_readInteger( ::fmuproxy::thrift::IntegerRead& _return, const int32_t seqid);
  void bulkReadInteger( ::fmuproxy::thrift::IntegerArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  int32_t send_bulkReadInteger(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadInteger( ::fmuproxy::thrift::IntegerArrayRead& _return, const int32_t seqid);
  void readReal( ::fmuproxy::thrift::RealRead& _return, const FmuId fmu_id, const ValueReference vr);
  int32_t send_readReal(const FmuId fmu_id, const ValueReference vr);
  void recv_readReal( ::fmuproxy::thrift::RealRead& _return, const int32_t seqid);
  void bulkReadReal( ::fmuproxy::thrift::RealArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  int32_t send_bulkReadReal(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadReal( ::fmuproxy::thrift::RealArrayRead& _return, const int32_t seqid);
  void readString( ::fmuproxy::thrift::StringRead& _return, const FmuId fmu_id, const ValueReference vr);
  int32_t send_readString(const FmuId fmu_id, const ValueReference vr);
  void recv_readString( ::fmuproxy::thrift::StringRead& _return, const int32_t seqid);
  void bulkReadString( ::fmuproxy::thrift::StringArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  int32_t send_bulkReadString(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadString( ::fmuproxy::thrift::StringArrayRead& _return, const int32_t seqid);
  void readBoolean( ::fmuproxy::thrift::BooleanRead& _return, const FmuId fmu_id, const ValueReference vr);
  int32_t send_readBoolean(const FmuId fmu_id, const ValueReference vr);
  void recv_readBoolean( ::fmuproxy::thrift::BooleanRead& _return, const int32_t seqid);
  void bulkReadBoolean( ::fmuproxy::thrift::BooleanArrayRead& _return, const FmuId fmu_id, const ValueReferences& vr);
  int32_t send_bulkReadBoolean(const FmuId fmu_id, const ValueReferences& vr);
  void recv_bulkReadBoolean( ::fmuproxy::thrift::BooleanArrayRead& _return, const int32_t seqid);
   ::fmuproxy::thrift::Status::type writeInteger(const FmuId fmu_id, const ValueReference vr, const int32_t value);
  int32_t send_writeInteger(const FmuId fmu_id, const ValueReference vr, const int32_t value);
   ::fmuproxy::thrift::Status::type recv_writeInteger(const int32_t seqid);
   ::fmuproxy::thrift::Status::type bulkWriteInteger(const FmuId fmu_id, const ValueReferences& vr, const IntArray& value);
  int32_t send_bulkWriteInteger(const FmuId fmu_id, const ValueReferences& vr, const IntArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteInteger(const int32_t seqid);
   ::fmuproxy::thrift::Status::type writeReal(const FmuId fmu_id, const ValueReference vr, const double value);
  int32_t send_writeReal(const FmuId fmu_id, const ValueReference vr, const double value);
   ::fmuproxy::thrift::Status::type recv_writeReal(const int32_t seqid);
   ::fmuproxy::thrift::Status::type bulkWriteReal(const FmuId fmu_id, const ValueReferences& vr, const RealArray& value);
  int32_t send_bulkWriteReal(const FmuId fmu_id, const ValueReferences& vr, const RealArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteReal(const int32_t seqid);
   ::fmuproxy::thrift::Status::type writeString(const FmuId fmu_id, const ValueReference vr, const std::string& value);
  int32_t send_writeString(const FmuId fmu_id, const ValueReference vr, const std::string& value);
   ::fmuproxy::thrift::Status::type recv_writeString(const int32_t seqid);
   ::fmuproxy::thrift::Status::type bulkWriteString(const FmuId fmu_id, const ValueReferences& vr, const StringArray& value);
  int32_t send_bulkWriteString(const FmuId fmu_id, const ValueReferences& vr, const StringArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteString(const int32_t seqid);
   ::fmuproxy::thrift::Status::type writeBoolean(const FmuId fmu_id, const ValueReference vr, const bool value);
  int32_t send_writeBoolean(const FmuId fmu_id, const ValueReference vr, const bool value);
   ::fmuproxy::thrift::Status::type recv_writeBoolean(const int32_t seqid);
   ::fmuproxy::thrift::Status::type bulkWriteBoolean(const FmuId fmu_id, const ValueReferences& vr, const BooleanArray& value);
  int32_t send_bulkWriteBoolean(const FmuId fmu_id, const ValueReferences& vr, const BooleanArray& value);
   ::fmuproxy::thrift::Status::type recv_bulkWriteBoolean(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif

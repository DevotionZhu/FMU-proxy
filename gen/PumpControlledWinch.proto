
syntax = "proto3";

package no.ntnu.mechlab.grpc_fmu;

option java_outer_classname = "PumpControlledWinchProto";

service PumpControlledWinchService {

    rpc CreateInstance (Empty) returns (ModelReference);

    
    rpc GetModelName (Empty) returns (Str) {};
    rpc GetModelVariableNames (Empty) returns (StrList) {};
    rpc GetModelVariables (Empty) returns (ScalarVariables) {}; 

    
    //instance specific
    rpc GetCurrentTime (ModelReference) returns (Real) {};
    rpc IsTerminated (ModelReference) returns (Bool) {};
    

    rpc Init (InitRequest) returns (Status) {};
    rpc Step (StepRequest) returns (Status) {};
    rpc Terminate (TerminateRequest) returns (Status) {};

    rpc Read (VarRead) returns (Var) {};
    rpc Write (VarWrite) returns (Status) {};

    
rpc ReadController_SP (ModelReference) returns (Real) {};
rpc Write_Controller_SP (RealWrite) returns (Status) {};
rpc ReadController_MV (ModelReference) returns (Real) {};
rpc Write_Controller_MV (RealWrite) returns (Status) {};
rpc ReadController_output (ModelReference) returns (Real) {};
rpc Write_Controller_output (RealWrite) returns (Status) {};
rpc ReadController_K (ModelReference) returns (Real) {};
rpc Write_Controller_K (RealWrite) returns (Status) {};
rpc ReadController_Ti (ModelReference) returns (Real) {};
rpc Write_Controller_Ti (RealWrite) returns (Status) {};
rpc ReadController_b (ModelReference) returns (Real) {};
rpc Write_Controller_b (RealWrite) returns (Status) {};
rpc ReadController_Ta (ModelReference) returns (Real) {};
rpc Write_Controller_Ta (RealWrite) returns (Status) {};
rpc ReadController_minimum (ModelReference) returns (Real) {};
rpc Write_Controller_minimum (RealWrite) returns (Status) {};
rpc ReadController_maximum (ModelReference) returns (Real) {};
rpc Write_Controller_maximum (RealWrite) returns (Status) {};
rpc ReadController_output_initial (ModelReference) returns (Real) {};
rpc Write_Controller_output_initial (RealWrite) returns (Status) {};
rpc ReadController_error (ModelReference) returns (Real) {};
rpc Write_Controller_error (RealWrite) returns (Status) {};
rpc ReadController_PB_low (ModelReference) returns (Real) {};
rpc Write_Controller_PB_low (RealWrite) returns (Status) {};
rpc ReadController_PB_high (ModelReference) returns (Real) {};
rpc Write_Controller_PB_high (RealWrite) returns (Status) {};
rpc ReadDrum_p1_e (ModelReference) returns (Real) {};
rpc Write_Drum_p1_e (RealWrite) returns (Status) {};
rpc ReadDrum_p1_f (ModelReference) returns (Real) {};
rpc Write_Drum_p1_f (RealWrite) returns (Status) {};
rpc ReadDrum_p2_e (ModelReference) returns (Real) {};
rpc Write_Drum_p2_e (RealWrite) returns (Status) {};
rpc ReadDrum_p2_f (ModelReference) returns (Real) {};
rpc Write_Drum_p2_f (RealWrite) returns (Status) {};
rpc ReadDrum_DrumDiameter (ModelReference) returns (Real) {};
rpc Write_Drum_DrumDiameter (RealWrite) returns (Status) {};
rpc ReadFlowSensor_p1_e (ModelReference) returns (Real) {};
rpc Write_FlowSensor_p1_e (RealWrite) returns (Status) {};
rpc ReadFlowSensor_p1_f (ModelReference) returns (Real) {};
rpc Write_FlowSensor_p1_f (RealWrite) returns (Status) {};
rpc ReadFlowSensor_p2_F (ModelReference) returns (Real) {};
rpc Write_FlowSensor_p2_F (RealWrite) returns (Status) {};
rpc ReadFlowSensor_p2_v (ModelReference) returns (Real) {};
rpc Write_FlowSensor_p2_v (RealWrite) returns (Status) {};
rpc ReadFlowSensor_flow (ModelReference) returns (Real) {};
rpc Write_FlowSensor_flow (RealWrite) returns (Status) {};
rpc ReadFriction_p_e (ModelReference) returns (Real) {};
rpc Write_Friction_p_e (RealWrite) returns (Status) {};
rpc ReadFriction_p_f (ModelReference) returns (Real) {};
rpc Write_Friction_p_f (RealWrite) returns (Status) {};
rpc ReadFriction_f (ModelReference) returns (Real) {};
rpc Write_Friction_f (RealWrite) returns (Status) {};
rpc ReadFriction_LoadMass (ModelReference) returns (Real) {};
rpc Write_Friction_LoadMass (RealWrite) returns (Status) {};
rpc ReadGear_p1_e (ModelReference) returns (Real) {};
rpc Write_Gear_p1_e (RealWrite) returns (Status) {};
rpc ReadGear_p1_f (ModelReference) returns (Real) {};
rpc Write_Gear_p1_f (RealWrite) returns (Status) {};
rpc ReadGear_p2_e (ModelReference) returns (Real) {};
rpc Write_Gear_p2_e (RealWrite) returns (Status) {};
rpc ReadGear_p2_f (ModelReference) returns (Real) {};
rpc Write_Gear_p2_f (RealWrite) returns (Status) {};
rpc ReadGear_GearRatio (ModelReference) returns (Real) {};
rpc Write_Gear_GearRatio (RealWrite) returns (Status) {};
rpc ReadInertia_Inertia (ModelReference) returns (Real) {};
rpc Write_Inertia_Inertia (RealWrite) returns (Status) {};
rpc ReadInertia_DrumSpeed (ModelReference) returns (Real) {};
rpc Write_Inertia_DrumSpeed (RealWrite) returns (Status) {};
rpc ReadInertia_DrumAngleDeg (ModelReference) returns (Real) {};
rpc Write_Inertia_DrumAngleDeg (RealWrite) returns (Status) {};
rpc ReadMotor_p1_e (ModelReference) returns (Real) {};
rpc Write_Motor_p1_e (RealWrite) returns (Status) {};
rpc ReadMotor_p1_f (ModelReference) returns (Real) {};
rpc Write_Motor_p1_f (RealWrite) returns (Status) {};
rpc ReadMotor_p2_e (ModelReference) returns (Real) {};
rpc Write_Motor_p2_e (RealWrite) returns (Status) {};
rpc ReadMotor_p2_f (ModelReference) returns (Real) {};
rpc Write_Motor_p2_f (RealWrite) returns (Status) {};
rpc ReadMotor_MotorDisplacement (ModelReference) returns (Real) {};
rpc Write_Motor_MotorDisplacement (RealWrite) returns (Status) {};
rpc ReadMotor_MotorSpeed (ModelReference) returns (Real) {};
rpc Write_Motor_MotorSpeed (RealWrite) returns (Status) {};
rpc ReadMotor_MotorFlow (ModelReference) returns (Real) {};
rpc Write_Motor_MotorFlow (RealWrite) returns (Status) {};
rpc ReadOneJunction_flow (ModelReference) returns (Real) {};
rpc Write_OneJunction_flow (RealWrite) returns (Status) {};
rpc ReadOneJunction_p1_e (ModelReference) returns (Real) {};
rpc Write_OneJunction_p1_e (RealWrite) returns (Status) {};
rpc ReadOneJunction_p2_e (ModelReference) returns (Real) {};
rpc Write_OneJunction_p2_e (RealWrite) returns (Status) {};
rpc ReadOneJunction_p3_e (ModelReference) returns (Real) {};
rpc Write_OneJunction_p3_e (RealWrite) returns (Status) {};
rpc ReadOneJunction_p1_f (ModelReference) returns (Real) {};
rpc Write_OneJunction_p1_f (RealWrite) returns (Status) {};
rpc ReadOneJunction_p2_f (ModelReference) returns (Real) {};
rpc Write_OneJunction_p2_f (RealWrite) returns (Status) {};
rpc ReadOneJunction_p3_f (ModelReference) returns (Real) {};
rpc Write_OneJunction_p3_f (RealWrite) returns (Status) {};
rpc ReadOneJunction7_flow (ModelReference) returns (Real) {};
rpc Write_OneJunction7_flow (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p1_e (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p1_e (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p2_e (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p2_e (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p3_e (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p3_e (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p4_e (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p4_e (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p1_f (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p1_f (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p2_f (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p2_f (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p3_f (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p3_f (RealWrite) returns (Status) {};
rpc ReadOneJunction7_p4_f (ModelReference) returns (Real) {};
rpc Write_OneJunction7_p4_f (RealWrite) returns (Status) {};
rpc ReadOpenTank_p_e (ModelReference) returns (Real) {};
rpc Write_OpenTank_p_e (RealWrite) returns (Status) {};
rpc ReadOpenTank_p_f (ModelReference) returns (Real) {};
rpc Write_OpenTank_p_f (RealWrite) returns (Status) {};
rpc ReadOpenTank_AtomPressure (ModelReference) returns (Real) {};
rpc Write_OpenTank_AtomPressure (RealWrite) returns (Status) {};
rpc ReadOpenTank_Flow2Tank (ModelReference) returns (Real) {};
rpc Write_OpenTank_Flow2Tank (RealWrite) returns (Status) {};
rpc ReadPump_p_e (ModelReference) returns (Real) {};
rpc Write_Pump_p_e (RealWrite) returns (Status) {};
rpc ReadPump_p_f (ModelReference) returns (Real) {};
rpc Write_Pump_p_f (RealWrite) returns (Status) {};
rpc ReadPump_gain (ModelReference) returns (Real) {};
rpc Write_Pump_gain (RealWrite) returns (Status) {};
rpc ReadPump_PumpPressureMax (ModelReference) returns (Real) {};
rpc Write_Pump_PumpPressureMax (RealWrite) returns (Status) {};
rpc ReadPump_PumpFlow (ModelReference) returns (Real) {};
rpc Write_Pump_PumpFlow (RealWrite) returns (Status) {};
rpc ReadPump_PumpPressure (ModelReference) returns (Real) {};
rpc Write_Pump_PumpPressure (RealWrite) returns (Status) {};
rpc ReadWire_F (ModelReference) returns (Real) {};
rpc Write_Wire_F (RealWrite) returns (Status) {};
rpc ReadWire_v (ModelReference) returns (Real) {};
rpc Write_Wire_v (RealWrite) returns (Status) {};
rpc ReadSetPoint (ModelReference) returns (Real) {};
rpc Write_SetPoint (RealWrite) returns (Status) {};
rpc ReadController_uI_state_dot (ModelReference) returns (Real) {};
rpc Write_Controller_uI_state_dot (RealWrite) returns (Status) {};
rpc ReadController_uI_state (ModelReference) returns (Real) {};
rpc Write_Controller_uI_state (RealWrite) returns (Status) {};
rpc ReadController_uI_state_initial (ModelReference) returns (Real) {};
rpc Write_Controller_uI_state_initial (RealWrite) returns (Status) {};
rpc ReadInertia_p_e (ModelReference) returns (Real) {};
rpc Write_Inertia_p_e (RealWrite) returns (Status) {};
rpc ReadInertia_momentum (ModelReference) returns (Real) {};
rpc Write_Inertia_momentum (RealWrite) returns (Status) {};
rpc ReadInertia_momentum_initial (ModelReference) returns (Real) {};
rpc Write_Inertia_momentum_initial (RealWrite) returns (Status) {};
rpc ReadInertia_p_f (ModelReference) returns (Real) {};
rpc Write_Inertia_p_f (RealWrite) returns (Status) {};
rpc ReadInertia_DrumAngle (ModelReference) returns (Real) {};
rpc Write_Inertia_DrumAngle (RealWrite) returns (Status) {};
rpc ReadInertia_DrumAngle_initial (ModelReference) returns (Real) {};
rpc Write_Inertia_DrumAngle_initial (RealWrite) returns (Status) {};
	
}

message Empty {

}

enum Causality {
    INPUT = 0;
    OUTPUT = 1;
    PARAMETER = 2;
    CALCULATED_PARAMETER = 3;
    LOCAL = 4;
    INDEPENDENT = 5;
}

enum Variability {
    CONSTANT =  0; 
    FIXED = 1; 
    CONTINUOUS = 2;
    DISCRETE = 3;
    TUNABLE = 4;
}

enum Initial {
    EXACT = 0;
    APPROX = 1;
    CALCULATED = 2;
}

message ScalarVariables {
    repeated ScalarVariable values = 1;
}

message ScalarVariable {
    string name = 1;
    string description = 2;
    Initial initial = 3;
    Causality causality = 4;
    Variability variability = 5;
    oneof start {
        int32 intValue = 10;
        double realValue = 11;
        string strValue = 12;
        bool boolValue = 13;
    }
}

message ModelReference {
    uint32 ref = 1;
}

message Status {
    int32 code = 1;
    string value = 2;
}


message InitRequest {
    uint32 ref = 1;
    uint32 start = 2;
}

message StepRequest {
    uint32 ref = 1;
    double dt = 2;
}

message TerminateRequest {
    uint32 ref = 1;
}

message Int {
    int32 value = 1;
}

message IntWrite {
    uint32 ref = 1;
    string varName = 2;
    int32 value = 3;
}

message IntList {
    repeated int32 values = 1;
}

message Real {
    double value = 1;
}

message RealWrite {
    uint32 ref = 1;
    string varName = 2;
    double value = 3;
}

message RealList {
    repeated double values = 1;
}

message Str {
    string value = 1;
}

message StrWrite {
    uint32 ref = 1;
    string varName = 2;
    string value = 3;
}

message StrList {
    repeated string values = 1;
}

message Bool {
    bool value = 1;
}

message BoolWrite {
    uint32 ref = 1;
    string varName = 2;
    bool value = 3;
}

message BoolList {
    repeated bool values = 1;
}

message Var {
    oneof value {
        int32 intValue = 1;
        double realValue = 2;
        string strValue = 3;
        bool boolValue = 4;
    }
}

message VarRead {
    uint32 ref = 1;
    string varName = 2;
}

message VarWrite {
    uint32 ref = 1;
    string varName = 2;
    oneof value {
        int32 intValue = 5;
        double realValue = 6;
        string strValue = 7;
        bool boolValue = 8;
    }
}


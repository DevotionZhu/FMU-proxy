/*
 * The MIT License
 *
 * Copyright 2017-2018 Norwegian University of Technology (NTNU)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package no.mechatronics.sfi.grpc_fmu

import io.grpc.BindableService
import io.grpc.stub.StreamObserver

import no.mechatronics.sfi.fmi4j.fmu.FmuFile
import no.mechatronics.sfi.fmi4j.proxy.enums.Fmi2Status

class PumpControlledWinchServer: GenericFmuServer(FmuFile(javaClass.classLoader.getResource("PumpControlledWinch.fmu")!!)) {

    override fun getServices(): List<BindableService> {
        return super.getServices() + listOf(PumpControlledWinchServiceImpl())
    }

    private inner class PumpControlledWinchServiceImpl: PumpControlledWinchServiceGrpc.PumpControlledWinchServiceImplBase() {

        
        /**
         * Autogenerated method
         */
        override fun readControllerSP( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerSP (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(19, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerMV( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerMV (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(29, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerOutput( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerOutput (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(20, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerK( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerK (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(1, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerTi( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerTi (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(2, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerB( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerB (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(3, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerTa( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerTa (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(4, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerMinimum( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerMinimum (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(5, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerMaximum( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerMaximum (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(6, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerOutputInitial( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerOutputInitial (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(7, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerError( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerError (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(21, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerPBLow( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerPBLow (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(22, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerPBHigh( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerPBHigh (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(23, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readDrumP1E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeDrumP1E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(28, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readDrumP1F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeDrumP1F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readDrumP2E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeDrumP2E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(30, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readDrumP2F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeDrumP2F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(29, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readDrumDrumDiameter( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeDrumDrumDiameter (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(8, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFlowSensorP1E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFlowSensorP1E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(30, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFlowSensorP1F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFlowSensorP1F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(29, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFlowSensorP2F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFlowSensorP2F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(30, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFlowSensorP2V( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFlowSensorP2V (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(29, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFlowSensorFlow( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFlowSensorFlow (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(29, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFrictionPE( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFrictionPE (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(31, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFrictionPF( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFrictionPF (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFrictionF( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFrictionF (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(9, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readFrictionLoadMass( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeFrictionLoadMass (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(10, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readGearP1E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeGearP1E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(37, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readGearP1F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeGearP1F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(32, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readGearP2E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeGearP2E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(33, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readGearP2F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeGearP2F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readGearGearRatio( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeGearGearRatio (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(11, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaInertia( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaInertia (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(12, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaDrumSpeed( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaDrumSpeed (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(34, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaDrumAngleDeg( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaDrumAngleDeg (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(35, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readMotorP1E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeMotorP1E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(39, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readMotorP1F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeMotorP1F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readMotorP2E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeMotorP2E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(37, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readMotorP2F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeMotorP2F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(32, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readMotorMotorDisplacement( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeMotorMotorDisplacement (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(13, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readMotorMotorSpeed( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeMotorMotorSpeed (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(38, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readMotorMotorFlow( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeMotorMotorFlow (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunctionFlow( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunctionFlow (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunctionP1E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunctionP1E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(39, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunctionP2E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunctionP2E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(40, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunctionP3E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunctionP3E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(41, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunctionP1F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunctionP1F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunctionP2F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunctionP2F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunctionP3F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunctionP3F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7Flow( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7Flow (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P1E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P1E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(33, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P2E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P2E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(28, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P3E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P3E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(31, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P4E( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P4E (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(49, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P1F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P1F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P2F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P2F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P3F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P3F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOneJunction7P4F( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOneJunction7P4F (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOpenTankPE( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOpenTankPE (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(40, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOpenTankPF( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOpenTankPF (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOpenTankAtomPressure( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOpenTankAtomPressure (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(14, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readOpenTankFlow2Tank( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeOpenTankFlow2Tank (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readPumpPE( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writePumpPE (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(41, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readPumpPF( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writePumpPF (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readPumpGain( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writePumpGain (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(20, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readPumpPumpPressureMax( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writePumpPumpPressureMax (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(15, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readPumpPumpFlow( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writePumpPumpFlow (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(36, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readPumpPumpPressure( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writePumpPumpPressure (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(41, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readWireF( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeWireF (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(42, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readWireV( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeWireV (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(43, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readSetPoint( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeSetPoint (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(44, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerUIStateDot( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerUIStateDot (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(48, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerUIState( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerUIState (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(45, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readControllerUIStateInitial( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeControllerUIStateInitial (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(16, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaPE( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaPE (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(49, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaMomentum( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaMomentum (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(46, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaMomentumInitial( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaMomentumInitial (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(17, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaPF( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaPF (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(50, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaDrumAngle( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaDrumAngle (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(47, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }
        /**
         * Autogenerated method
         */
        override fun readInertiaDrumAngleInitial( req: FmiDefinitions.UInt, responseObserver: StreamObserver<FmiDefinitions.Real> ) {

            val fmuId = req.value
            val fmu = fmus[fmuId]
            if (fmu != null) {
                val valueReference = req.value
                val reply = FmiDefinitions.Real.newBuilder().setValue(fmu.variableAccessor.getReal(valueReference)).build()
                responseObserver.onNext(reply);
            } else {
                LOG.warn("No FMU with id: {}", fmuId)
            }

            responseObserver.onCompleted()

        }
        /**
         * Autogenerated method
         */
        override fun writeInertiaDrumAngleInitial (req: PumpControlledWinchProto.RealWrite, responseObserver: StreamObserver<FmiDefinitions.Status> ) {

            val fmuId = req.fmuId
            val fmu = fmus[fmuId]
            if (fmu != null) {
                fmu.variableAccessor.setReal(18, req.value);
                statusReply(fmu.lastStatus, responseObserver);
            } else {
                LOG.warn("No FMU with id: {}", fmuId);
                statusReply(Fmi2Status.Error, responseObserver);
            }

        }

    }
}


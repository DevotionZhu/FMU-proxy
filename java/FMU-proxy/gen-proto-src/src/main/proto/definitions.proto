/*
 * The MIT License
 *
 * Copyright 2017-2018 Norwegian University of Technology (NTNU)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

syntax = "proto3";

package no.mechatronics.sfi.fmu_proxy.grpc;
option java_outer_classname = "FmiDefinitions";

message Empty {}

message ScalarVariable {
    uint32 value_reference = 1;
    string name = 2;
    string description = 3;
    VariableType variable_type = 4;
    Initial initial = 5;
    Causality causality = 6;
    Variability variability = 7;
    AnyPrimitive start = 8;
}

message Status {
    StatusCode code = 1;
    string message = 2;
}

message AnyPrimitive {
    oneof value {
        int32 int_value = 1;
        double real_value = 2;
        string str_value = 3;
        bool bool_value = 4;
		uint32 enum_value = 5;
    }
}

message InitRequest {
    uint32 fmu_id = 1;
    double start = 2;
	double stop = 3;
}

message StepRequest {
    uint32 fmu_id = 1;
    double step_size = 2;
}

message UInt {
	uint32 value = 1;
}

message Int {
    int32 value = 1;
}

message IntRead {
	int32 value = 1;
	StatusCode status = 2;
}

message IntList {
	repeated int32 values = 1;
}

message IntListRead {
	repeated int32 values = 1;
	StatusCode status = 2;
}

message Real {
    double value = 1;
}

message RealRead {
	double value = 1;
	StatusCode status = 2;
}

message RealList {
	repeated double values = 1;
}

message RealListRead {
	repeated double values = 1;
	StatusCode status = 2;
}

message Str {
    string value = 1;
}

message StrRead {
	string value = 1;
	StatusCode status = 2;
}

message StrList {
	repeated string values = 1;
}

message StrListRead {
	repeated string values = 1;
	StatusCode status = 2;
}

message Bool {
    bool value = 1;
}

message BoolRead {
	bool value = 1;
	StatusCode status = 2;
}

message BoolList {
	repeated bool values = 1;
}

message BoolListRead {
	repeated bool values = 1;
	StatusCode status = 2;
}

message ReadRequest {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
}

message BulkReadRequest {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
}

message WriteIntegerRequest {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    int32 value = 3;
}

message BulkWriteIntegerRequest {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated int32 values = 3;
}

message WriteRealRequest {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    double value = 3;
}

message BulkWriteRealRequest {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated double values = 3;
}

message WriteStringRequest {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    string value = 3;
}

message BulkWriteStringRequest {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated string values = 3;
}

message WriteBooleanRequest {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    bool value = 3;
}

message BulkWriteBooleanRequest {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated bool values = 3;
}

message Unknown {
    uint32 index = 1;
    repeated uint32 dependencies = 2;
    DependenciesKind dependencies_kind = 3;
}

message ModelStructure {
    repeated uint32 outputs = 1;
    repeated Unknown derivatives = 2;
    repeated Unknown initial_unknowns = 3;
}

enum Causality {
    UNDEFINED_CAUSALITY = 0;
    INPUT_CAUSALITY = 1;
    OUTPUT_CAUSALITY = 2;
    PARAMETER_CAUSALITY = 3;
    CALCULATED_PARAMETER_CAUSALITY = 4;
    LOCAL_CAUSALITY = 5;
    INDEPENDENT_CAUSALITY = 6;
}

enum Variability {
    UNDEFINED_VARIABILITY = 0;
    CONSTANT_VARIABILITY =  1;
    FIXED_VARIABILITY = 2;
    CONTINUOUS_VARIABILITY = 3;
    DISCRETE_VARIABILITY = 4;
    TUNABLE_VARIABILITY = 5;
}

enum Initial {
    UNDEFINED_INITIAL = 0;
    EXACT_INITIAL = 1;
    APPROX_INITIAL = 2;
    CALCULATED_INITIAL = 3;
}

enum VariableType {
    INTEGER_VARIABLE = 0;
    REAL_VARIABLE = 1;
    STRING_VARIABLE = 2;
    BOOLEAN_VARIABLE = 3;
	ENUMERATION_VARIABLE = 4;
}

enum StatusCode {
	OK_STATUS = 0;
	WARNING_STATUS = 1;
	DISCARD_STATUS = 2;
	ERROR_STATUS = 3;
	FATAL_STATUS = 4;
	PENDING_STATUS = 5;
}

enum DependenciesKind {
    DEPENDENT_KIND = 0;
    CONSTANT_KIND = 1;
    TUNABLE_KIND = 2;
    DISCRETE_KIND = 4;
}

message Integrator {
    oneof integrators {
        EulerIntegrator euler = 1;
        ClassicalRungeKuttaIntegrator runge_kutta = 2;
        MidpointIntegrator mid_point = 3;
        GillIntegrator gill = 4;
        AdamsBashforthIntegrator adams_bashforth = 5;
        DormandPrince54Integrator dormand_prince54 = 6;
    }
}

message EulerIntegrator {
	double step_size = 1;
}

message ClassicalRungeKuttaIntegrator {
	double step_size = 1;
}

message MidpointIntegrator {
	double step_size = 1;
}

message GillIntegrator {
	double step_size = 1;
}

message AdamsBashforthIntegrator {
	uint32 n_steps = 1;
	double min_Step = 2;
	double max_step = 3;
	double scal_absolute_tolerance = 4;
	double scal_relative_tolerance = 5;
}

message DormandPrince54Integrator {
    double min_Step = 1;
    double max_step = 2;
    double scal_absolute_tolerance = 3;
    double scal_relative_tolerance = 4;
}





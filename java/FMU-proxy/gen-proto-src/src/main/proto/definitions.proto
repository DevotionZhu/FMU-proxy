/*
 * The MIT License
 *
 * Copyright 2017-2018 Norwegian University of Technology (NTNU)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

syntax = "proto3";

package no.mechatronics.sfi.fmu_proxy.grpc;
option java_multiple_files = true;

message ScalarVariableProto {
    uint32 value_reference = 1;
    string name = 2;
    string description = 3;
    VariableTypeProto variable_type = 4;
    InitialProto initial = 5;
    CausalityProto causality = 6;
    VariabilityProto variability = 7;
    AnyPrimitiveProto start = 8;
}

message StatusProto {
    StatusCodeProto code = 1;
    string message = 2;
}

message AnyPrimitiveProto {
    oneof value {
        int32 int_value = 1;
        double real_value = 2;
        string str_value = 3;
        bool bool_value = 4;
		uint32 enum_value = 5;
    }
}

message InitRequestProto {
    uint32 fmu_id = 1;
    double start = 2;
	double stop = 3;
}

message StepRequestProto {
    uint32 fmu_id = 1;
    double step_size = 2;
}

message UIntProto {
	uint32 value = 1;
}

message IntProto {
    int32 value = 1;
}

message IntReadProto {
	int32 value = 1;
	StatusCodeProto status = 2;
}

message IntListProto {
	repeated int32 values = 1;
}

message IntListReadProto {
	repeated int32 values = 1;
	StatusCodeProto status = 2;
}

message RealProto {
    double value = 1;
}

message RealReadProto {
	double value = 1;
	StatusCodeProto status = 2;
}

message RealListProto {
	repeated double values = 1;
}

message RealListReadProto {
	repeated double values = 1;
	StatusCodeProto status = 2;
}

message StrProto {
    string value = 1;
}

message StrReadProto {
	string value = 1;
	StatusCodeProto status = 2;
}

message StrListProto {
	repeated string values = 1;
}

message StrListReadProto {
	repeated string values = 1;
	StatusCodeProto status = 2;
}

message BoolProto {
    bool value = 1;
}

message BoolReadProto {
	bool value = 1;
	StatusCodeProto status = 2;
}

message BoolListProto {
	repeated bool values = 1;
}

message BoolListReadProto {
	repeated bool values = 1;
	StatusCodeProto status = 2;
}

message ReadRequestProto {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
}

message BulkReadRequestProto {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
}

message WriteIntegerRequestProto {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    int32 value = 3;
}

message BulkWriteIntegerRequestProto {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated int32 values = 3;
}

message WriteRealRequestProto {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    double value = 3;
}

message BulkWriteRealRequestProto {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated double values = 3;
}

message WriteStringRequestProto {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    string value = 3;
}

message BulkWriteStringRequestProto {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated string values = 3;
}

message WriteBooleanRequestProto {
    uint32 fmu_id = 1;
    uint32 value_reference = 2;
    bool value = 3;
}

message BulkWriteBooleanRequestProto {
	uint32 fmu_id = 1;
    repeated uint32 value_references = 2;
	repeated bool values = 3;
}

message UnknownProto {
    uint32 index = 1;
    repeated uint32 dependencies = 2;
    DependenciesKindProto dependencies_kind = 3;
}

message ModelStructureProto {
    repeated uint32 outputs = 1;
    repeated UnknownProto derivatives = 2;
    repeated UnknownProto initial_unknowns = 3;
}

enum CausalityProto {
    UNDEFINED_CAUSALITY = 0;
    INPUT_CAUSALITY = 1;
    OUTPUT_CAUSALITY = 2;
    PARAMETER_CAUSALITY = 3;
    CALCULATED_PARAMETER_CAUSALITY = 4;
    LOCAL_CAUSALITY = 5;
    INDEPENDENT_CAUSALITY = 6;
}

enum VariabilityProto {
    UNDEFINED_VARIABILITY = 0;
    CONSTANT_VARIABILITY =  1;
    FIXED_VARIABILITY = 2;
    CONTINUOUS_VARIABILITY = 3;
    DISCRETE_VARIABILITY = 4;
    TUNABLE_VARIABILITY = 5;
}

enum InitialProto {
    UNDEFINED_INITIAL = 0;
    EXACT_INITIAL = 1;
    APPROX_INITIAL = 2;
    CALCULATED_INITIAL = 3;
}

enum VariableTypeProto {
    INTEGER_VARIABLE = 0;
    REAL_VARIABLE = 1;
    STRING_VARIABLE = 2;
    BOOLEAN_VARIABLE = 3;
	ENUMERATION_VARIABLE = 4;
}

enum StatusCodeProto {
	OK_STATUS = 0;
	WARNING_STATUS = 1;
	DISCARD_STATUS = 2;
	ERROR_STATUS = 3;
	FATAL_STATUS = 4;
	PENDING_STATUS = 5;
}

enum DependenciesKindProto {
    DEPENDENT_KIND = 0;
    CONSTANT_KIND = 1;
    TUNABLE_KIND = 2;
    DISCRETE_KIND = 4;
}

message IntegratorProto {
    oneof integrators {
        EulerIntegratorProto euler = 1;
        ClassicalRungeKuttaIntegratorProto runge_kutta = 2;
        MidpointIntegratorProto mid_point = 3;
        GillIntegratorProto gill = 4;
        AdamsBashforthIntegratorProto adams_bashforth = 5;
        DormandPrince54Integrator dormand_prince54 = 6;
    }
}

message EulerIntegratorProto {
	double step_size = 1;
}

message ClassicalRungeKuttaIntegratorProto {
	double step_size = 1;
}

message MidpointIntegratorProto {
	double step_size = 1;
}

message GillIntegratorProto {
	double step_size = 1;
}

message AdamsBashforthIntegratorProto {
	uint32 n_steps = 1;
	double min_Step = 2;
	double max_step = 3;
	double scal_absolute_tolerance = 4;
	double scal_relative_tolerance = 5;
}

message DormandPrince54Integrator {
    double min_Step = 1;
    double max_step = 2;
    double scal_absolute_tolerance = 3;
    double scal_relative_tolerance = 4;
}





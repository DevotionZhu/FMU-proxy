/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.mechatronics.sfi.fmu_proxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-10")
public class ModelStructure implements org.apache.thrift.TBase<ModelStructure, ModelStructure._Fields>, java.io.Serializable, Cloneable, Comparable<ModelStructure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelStructure");

  private static final org.apache.thrift.protocol.TField OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("outputs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DERIVATIVES_FIELD_DESC = new org.apache.thrift.protocol.TField("derivatives", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INITIAL_NKNOWNS_FIELD_DESC = new org.apache.thrift.protocol.TField("initial_nknowns", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModelStructureStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModelStructureTupleSchemeFactory();

  private java.util.List<java.lang.Integer> outputs; // required
  private java.util.List<Unknown> derivatives; // required
  private java.util.List<Unknown> initial_nknowns; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUTPUTS((short)1, "outputs"),
    DERIVATIVES((short)2, "derivatives"),
    INITIAL_NKNOWNS((short)3, "initial_nknowns");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTPUTS
          return OUTPUTS;
        case 2: // DERIVATIVES
          return DERIVATIVES;
        case 3: // INITIAL_NKNOWNS
          return INITIAL_NKNOWNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("outputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DERIVATIVES, new org.apache.thrift.meta_data.FieldMetaData("derivatives", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unknown.class))));
    tmpMap.put(_Fields.INITIAL_NKNOWNS, new org.apache.thrift.meta_data.FieldMetaData("initial_nknowns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unknown.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelStructure.class, metaDataMap);
  }

  public ModelStructure() {
  }

  public ModelStructure(
    java.util.List<java.lang.Integer> outputs,
    java.util.List<Unknown> derivatives,
    java.util.List<Unknown> initial_nknowns)
  {
    this();
    this.outputs = outputs;
    this.derivatives = derivatives;
    this.initial_nknowns = initial_nknowns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelStructure(ModelStructure other) {
    if (other.isSetOutputs()) {
      java.util.List<java.lang.Integer> __this__outputs = new java.util.ArrayList<java.lang.Integer>(other.outputs);
      this.outputs = __this__outputs;
    }
    if (other.isSetDerivatives()) {
      java.util.List<Unknown> __this__derivatives = new java.util.ArrayList<Unknown>(other.derivatives.size());
      for (Unknown other_element : other.derivatives) {
        __this__derivatives.add(new Unknown(other_element));
      }
      this.derivatives = __this__derivatives;
    }
    if (other.isSetInitial_nknowns()) {
      java.util.List<Unknown> __this__initial_nknowns = new java.util.ArrayList<Unknown>(other.initial_nknowns.size());
      for (Unknown other_element : other.initial_nknowns) {
        __this__initial_nknowns.add(new Unknown(other_element));
      }
      this.initial_nknowns = __this__initial_nknowns;
    }
  }

  public ModelStructure deepCopy() {
    return new ModelStructure(this);
  }

  @Override
  public void clear() {
    this.outputs = null;
    this.derivatives = null;
    this.initial_nknowns = null;
  }

  public int getOutputsSize() {
    return (this.outputs == null) ? 0 : this.outputs.size();
  }

  public java.util.Iterator<java.lang.Integer> getOutputsIterator() {
    return (this.outputs == null) ? null : this.outputs.iterator();
  }

  public void addToOutputs(int elem) {
    if (this.outputs == null) {
      this.outputs = new java.util.ArrayList<java.lang.Integer>();
    }
    this.outputs.add(elem);
  }

  public java.util.List<java.lang.Integer> getOutputs() {
    return this.outputs;
  }

  public ModelStructure setOutputs(java.util.List<java.lang.Integer> outputs) {
    this.outputs = outputs;
    return this;
  }

  public void unsetOutputs() {
    this.outputs = null;
  }

  /** Returns true if field outputs is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputs() {
    return this.outputs != null;
  }

  public void setOutputsIsSet(boolean value) {
    if (!value) {
      this.outputs = null;
    }
  }

  public int getDerivativesSize() {
    return (this.derivatives == null) ? 0 : this.derivatives.size();
  }

  public java.util.Iterator<Unknown> getDerivativesIterator() {
    return (this.derivatives == null) ? null : this.derivatives.iterator();
  }

  public void addToDerivatives(Unknown elem) {
    if (this.derivatives == null) {
      this.derivatives = new java.util.ArrayList<Unknown>();
    }
    this.derivatives.add(elem);
  }

  public java.util.List<Unknown> getDerivatives() {
    return this.derivatives;
  }

  public ModelStructure setDerivatives(java.util.List<Unknown> derivatives) {
    this.derivatives = derivatives;
    return this;
  }

  public void unsetDerivatives() {
    this.derivatives = null;
  }

  /** Returns true if field derivatives is set (has been assigned a value) and false otherwise */
  public boolean isSetDerivatives() {
    return this.derivatives != null;
  }

  public void setDerivativesIsSet(boolean value) {
    if (!value) {
      this.derivatives = null;
    }
  }

  public int getInitial_nknownsSize() {
    return (this.initial_nknowns == null) ? 0 : this.initial_nknowns.size();
  }

  public java.util.Iterator<Unknown> getInitial_nknownsIterator() {
    return (this.initial_nknowns == null) ? null : this.initial_nknowns.iterator();
  }

  public void addToInitial_nknowns(Unknown elem) {
    if (this.initial_nknowns == null) {
      this.initial_nknowns = new java.util.ArrayList<Unknown>();
    }
    this.initial_nknowns.add(elem);
  }

  public java.util.List<Unknown> getInitial_nknowns() {
    return this.initial_nknowns;
  }

  public ModelStructure setInitial_nknowns(java.util.List<Unknown> initial_nknowns) {
    this.initial_nknowns = initial_nknowns;
    return this;
  }

  public void unsetInitial_nknowns() {
    this.initial_nknowns = null;
  }

  /** Returns true if field initial_nknowns is set (has been assigned a value) and false otherwise */
  public boolean isSetInitial_nknowns() {
    return this.initial_nknowns != null;
  }

  public void setInitial_nknownsIsSet(boolean value) {
    if (!value) {
      this.initial_nknowns = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case OUTPUTS:
      if (value == null) {
        unsetOutputs();
      } else {
        setOutputs((java.util.List<java.lang.Integer>)value);
      }
      break;

    case DERIVATIVES:
      if (value == null) {
        unsetDerivatives();
      } else {
        setDerivatives((java.util.List<Unknown>)value);
      }
      break;

    case INITIAL_NKNOWNS:
      if (value == null) {
        unsetInitial_nknowns();
      } else {
        setInitial_nknowns((java.util.List<Unknown>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTPUTS:
      return getOutputs();

    case DERIVATIVES:
      return getDerivatives();

    case INITIAL_NKNOWNS:
      return getInitial_nknowns();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OUTPUTS:
      return isSetOutputs();
    case DERIVATIVES:
      return isSetDerivatives();
    case INITIAL_NKNOWNS:
      return isSetInitial_nknowns();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelStructure)
      return this.equals((ModelStructure)that);
    return false;
  }

  public boolean equals(ModelStructure that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_outputs = true && this.isSetOutputs();
    boolean that_present_outputs = true && that.isSetOutputs();
    if (this_present_outputs || that_present_outputs) {
      if (!(this_present_outputs && that_present_outputs))
        return false;
      if (!this.outputs.equals(that.outputs))
        return false;
    }

    boolean this_present_derivatives = true && this.isSetDerivatives();
    boolean that_present_derivatives = true && that.isSetDerivatives();
    if (this_present_derivatives || that_present_derivatives) {
      if (!(this_present_derivatives && that_present_derivatives))
        return false;
      if (!this.derivatives.equals(that.derivatives))
        return false;
    }

    boolean this_present_initial_nknowns = true && this.isSetInitial_nknowns();
    boolean that_present_initial_nknowns = true && that.isSetInitial_nknowns();
    if (this_present_initial_nknowns || that_present_initial_nknowns) {
      if (!(this_present_initial_nknowns && that_present_initial_nknowns))
        return false;
      if (!this.initial_nknowns.equals(that.initial_nknowns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOutputs()) ? 131071 : 524287);
    if (isSetOutputs())
      hashCode = hashCode * 8191 + outputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetDerivatives()) ? 131071 : 524287);
    if (isSetDerivatives())
      hashCode = hashCode * 8191 + derivatives.hashCode();

    hashCode = hashCode * 8191 + ((isSetInitial_nknowns()) ? 131071 : 524287);
    if (isSetInitial_nknowns())
      hashCode = hashCode * 8191 + initial_nknowns.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ModelStructure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOutputs()).compareTo(other.isSetOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputs, other.outputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDerivatives()).compareTo(other.isSetDerivatives());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerivatives()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derivatives, other.derivatives);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInitial_nknowns()).compareTo(other.isSetInitial_nknowns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitial_nknowns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initial_nknowns, other.initial_nknowns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ModelStructure(");
    boolean first = true;

    sb.append("outputs:");
    if (this.outputs == null) {
      sb.append("null");
    } else {
      sb.append(this.outputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("derivatives:");
    if (this.derivatives == null) {
      sb.append("null");
    } else {
      sb.append(this.derivatives);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initial_nknowns:");
    if (this.initial_nknowns == null) {
      sb.append("null");
    } else {
      sb.append(this.initial_nknowns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelStructureStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelStructureStandardScheme getScheme() {
      return new ModelStructureStandardScheme();
    }
  }

  private static class ModelStructureStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModelStructure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.outputs = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.outputs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DERIVATIVES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.derivatives = new java.util.ArrayList<Unknown>(_list3.size);
                Unknown _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Unknown();
                  _elem4.read(iprot);
                  struct.derivatives.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDerivativesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INITIAL_NKNOWNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.initial_nknowns = new java.util.ArrayList<Unknown>(_list6.size);
                Unknown _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new Unknown();
                  _elem7.read(iprot);
                  struct.initial_nknowns.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setInitial_nknownsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelStructure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outputs != null) {
        oprot.writeFieldBegin(OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.outputs.size()));
          for (int _iter9 : struct.outputs)
          {
            oprot.writeI32(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.derivatives != null) {
        oprot.writeFieldBegin(DERIVATIVES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.derivatives.size()));
          for (Unknown _iter10 : struct.derivatives)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.initial_nknowns != null) {
        oprot.writeFieldBegin(INITIAL_NKNOWNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.initial_nknowns.size()));
          for (Unknown _iter11 : struct.initial_nknowns)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelStructureTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelStructureTupleScheme getScheme() {
      return new ModelStructureTupleScheme();
    }
  }

  private static class ModelStructureTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModelStructure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOutputs()) {
        optionals.set(0);
      }
      if (struct.isSetDerivatives()) {
        optionals.set(1);
      }
      if (struct.isSetInitial_nknowns()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOutputs()) {
        {
          oprot.writeI32(struct.outputs.size());
          for (int _iter12 : struct.outputs)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetDerivatives()) {
        {
          oprot.writeI32(struct.derivatives.size());
          for (Unknown _iter13 : struct.derivatives)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetInitial_nknowns()) {
        {
          oprot.writeI32(struct.initial_nknowns.size());
          for (Unknown _iter14 : struct.initial_nknowns)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.outputs = new java.util.ArrayList<java.lang.Integer>(_list15.size);
          int _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI32();
            struct.outputs.add(_elem16);
          }
        }
        struct.setOutputsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.derivatives = new java.util.ArrayList<Unknown>(_list18.size);
          Unknown _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new Unknown();
            _elem19.read(iprot);
            struct.derivatives.add(_elem19);
          }
        }
        struct.setDerivativesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.initial_nknowns = new java.util.ArrayList<Unknown>(_list21.size);
          Unknown _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new Unknown();
            _elem22.read(iprot);
            struct.initial_nknowns.add(_elem22);
          }
        }
        struct.setInitial_nknownsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


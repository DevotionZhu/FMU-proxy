/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.mechatronics.sfi.fmu_proxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Integrator extends org.apache.thrift.TUnion<Integrator, Integrator._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Integrator");
  private static final org.apache.thrift.protocol.TField EULER_FIELD_DESC = new org.apache.thrift.protocol.TField("euler", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RUNGE_KUTTA_FIELD_DESC = new org.apache.thrift.protocol.TField("runge_kutta", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MID_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("mid_point", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField GILL_FIELD_DESC = new org.apache.thrift.protocol.TField("gill", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ADAMS_BASHFORTH_FIELD_DESC = new org.apache.thrift.protocol.TField("adams_bashforth", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DORMAND_PRINCE54_FIELD_DESC = new org.apache.thrift.protocol.TField("dormand_prince54", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EULER((short)1, "euler"),
    RUNGE_KUTTA((short)2, "runge_kutta"),
    MID_POINT((short)3, "mid_point"),
    GILL((short)4, "gill"),
    ADAMS_BASHFORTH((short)5, "adams_bashforth"),
    DORMAND_PRINCE54((short)6, "dormand_prince54");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EULER
          return EULER;
        case 2: // RUNGE_KUTTA
          return RUNGE_KUTTA;
        case 3: // MID_POINT
          return MID_POINT;
        case 4: // GILL
          return GILL;
        case 5: // ADAMS_BASHFORTH
          return ADAMS_BASHFORTH;
        case 6: // DORMAND_PRINCE54
          return DORMAND_PRINCE54;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EULER, new org.apache.thrift.meta_data.FieldMetaData("euler", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "EulerIntegrator")));
    tmpMap.put(_Fields.RUNGE_KUTTA, new org.apache.thrift.meta_data.FieldMetaData("runge_kutta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ClassicalRungeKuttaIntegrator")));
    tmpMap.put(_Fields.MID_POINT, new org.apache.thrift.meta_data.FieldMetaData("mid_point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MidpointIntegrator")));
    tmpMap.put(_Fields.GILL, new org.apache.thrift.meta_data.FieldMetaData("gill", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "GillIntegrator")));
    tmpMap.put(_Fields.ADAMS_BASHFORTH, new org.apache.thrift.meta_data.FieldMetaData("adams_bashforth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "AdamsBashforthIntegrator")));
    tmpMap.put(_Fields.DORMAND_PRINCE54, new org.apache.thrift.meta_data.FieldMetaData("dormand_prince54", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "DormandPrince54Integrator")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Integrator.class, metaDataMap);
  }

  public Integrator() {
    super();
  }

  public Integrator(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public Integrator(Integrator other) {
    super(other);
  }
  public Integrator deepCopy() {
    return new Integrator(this);
  }

  public static Integrator euler(EulerIntegrator value) {
    Integrator x = new Integrator();
    x.setEuler(value);
    return x;
  }

  public static Integrator runge_kutta(ClassicalRungeKuttaIntegrator value) {
    Integrator x = new Integrator();
    x.setRunge_kutta(value);
    return x;
  }

  public static Integrator mid_point(MidpointIntegrator value) {
    Integrator x = new Integrator();
    x.setMid_point(value);
    return x;
  }

  public static Integrator gill(GillIntegrator value) {
    Integrator x = new Integrator();
    x.setGill(value);
    return x;
  }

  public static Integrator adams_bashforth(AdamsBashforthIntegrator value) {
    Integrator x = new Integrator();
    x.setAdams_bashforth(value);
    return x;
  }

  public static Integrator dormand_prince54(DormandPrince54Integrator value) {
    Integrator x = new Integrator();
    x.setDormand_prince54(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case EULER:
        if (value instanceof EulerIntegrator) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type EulerIntegrator for field 'euler', but got " + value.getClass().getSimpleName());
      case RUNGE_KUTTA:
        if (value instanceof ClassicalRungeKuttaIntegrator) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type ClassicalRungeKuttaIntegrator for field 'runge_kutta', but got " + value.getClass().getSimpleName());
      case MID_POINT:
        if (value instanceof MidpointIntegrator) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type MidpointIntegrator for field 'mid_point', but got " + value.getClass().getSimpleName());
      case GILL:
        if (value instanceof GillIntegrator) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type GillIntegrator for field 'gill', but got " + value.getClass().getSimpleName());
      case ADAMS_BASHFORTH:
        if (value instanceof AdamsBashforthIntegrator) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type AdamsBashforthIntegrator for field 'adams_bashforth', but got " + value.getClass().getSimpleName());
      case DORMAND_PRINCE54:
        if (value instanceof DormandPrince54Integrator) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type DormandPrince54Integrator for field 'dormand_prince54', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case EULER:
          if (field.type == EULER_FIELD_DESC.type) {
            EulerIntegrator euler;
            euler = new EulerIntegrator();
            euler.read(iprot);
            return euler;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RUNGE_KUTTA:
          if (field.type == RUNGE_KUTTA_FIELD_DESC.type) {
            ClassicalRungeKuttaIntegrator runge_kutta;
            runge_kutta = new ClassicalRungeKuttaIntegrator();
            runge_kutta.read(iprot);
            return runge_kutta;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MID_POINT:
          if (field.type == MID_POINT_FIELD_DESC.type) {
            MidpointIntegrator mid_point;
            mid_point = new MidpointIntegrator();
            mid_point.read(iprot);
            return mid_point;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case GILL:
          if (field.type == GILL_FIELD_DESC.type) {
            GillIntegrator gill;
            gill = new GillIntegrator();
            gill.read(iprot);
            return gill;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADAMS_BASHFORTH:
          if (field.type == ADAMS_BASHFORTH_FIELD_DESC.type) {
            AdamsBashforthIntegrator adams_bashforth;
            adams_bashforth = new AdamsBashforthIntegrator();
            adams_bashforth.read(iprot);
            return adams_bashforth;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DORMAND_PRINCE54:
          if (field.type == DORMAND_PRINCE54_FIELD_DESC.type) {
            DormandPrince54Integrator dormand_prince54;
            dormand_prince54 = new DormandPrince54Integrator();
            dormand_prince54.read(iprot);
            return dormand_prince54;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EULER:
        EulerIntegrator euler = (EulerIntegrator)value_;
        euler.write(oprot);
        return;
      case RUNGE_KUTTA:
        ClassicalRungeKuttaIntegrator runge_kutta = (ClassicalRungeKuttaIntegrator)value_;
        runge_kutta.write(oprot);
        return;
      case MID_POINT:
        MidpointIntegrator mid_point = (MidpointIntegrator)value_;
        mid_point.write(oprot);
        return;
      case GILL:
        GillIntegrator gill = (GillIntegrator)value_;
        gill.write(oprot);
        return;
      case ADAMS_BASHFORTH:
        AdamsBashforthIntegrator adams_bashforth = (AdamsBashforthIntegrator)value_;
        adams_bashforth.write(oprot);
        return;
      case DORMAND_PRINCE54:
        DormandPrince54Integrator dormand_prince54 = (DormandPrince54Integrator)value_;
        dormand_prince54.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case EULER:
          EulerIntegrator euler;
          euler = new EulerIntegrator();
          euler.read(iprot);
          return euler;
        case RUNGE_KUTTA:
          ClassicalRungeKuttaIntegrator runge_kutta;
          runge_kutta = new ClassicalRungeKuttaIntegrator();
          runge_kutta.read(iprot);
          return runge_kutta;
        case MID_POINT:
          MidpointIntegrator mid_point;
          mid_point = new MidpointIntegrator();
          mid_point.read(iprot);
          return mid_point;
        case GILL:
          GillIntegrator gill;
          gill = new GillIntegrator();
          gill.read(iprot);
          return gill;
        case ADAMS_BASHFORTH:
          AdamsBashforthIntegrator adams_bashforth;
          adams_bashforth = new AdamsBashforthIntegrator();
          adams_bashforth.read(iprot);
          return adams_bashforth;
        case DORMAND_PRINCE54:
          DormandPrince54Integrator dormand_prince54;
          dormand_prince54 = new DormandPrince54Integrator();
          dormand_prince54.read(iprot);
          return dormand_prince54;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EULER:
        EulerIntegrator euler = (EulerIntegrator)value_;
        euler.write(oprot);
        return;
      case RUNGE_KUTTA:
        ClassicalRungeKuttaIntegrator runge_kutta = (ClassicalRungeKuttaIntegrator)value_;
        runge_kutta.write(oprot);
        return;
      case MID_POINT:
        MidpointIntegrator mid_point = (MidpointIntegrator)value_;
        mid_point.write(oprot);
        return;
      case GILL:
        GillIntegrator gill = (GillIntegrator)value_;
        gill.write(oprot);
        return;
      case ADAMS_BASHFORTH:
        AdamsBashforthIntegrator adams_bashforth = (AdamsBashforthIntegrator)value_;
        adams_bashforth.write(oprot);
        return;
      case DORMAND_PRINCE54:
        DormandPrince54Integrator dormand_prince54 = (DormandPrince54Integrator)value_;
        dormand_prince54.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case EULER:
        return EULER_FIELD_DESC;
      case RUNGE_KUTTA:
        return RUNGE_KUTTA_FIELD_DESC;
      case MID_POINT:
        return MID_POINT_FIELD_DESC;
      case GILL:
        return GILL_FIELD_DESC;
      case ADAMS_BASHFORTH:
        return ADAMS_BASHFORTH_FIELD_DESC;
      case DORMAND_PRINCE54:
        return DORMAND_PRINCE54_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public EulerIntegrator getEuler() {
    if (getSetField() == _Fields.EULER) {
      return (EulerIntegrator)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'euler' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEuler(EulerIntegrator value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.EULER;
    value_ = value;
  }

  public ClassicalRungeKuttaIntegrator getRunge_kutta() {
    if (getSetField() == _Fields.RUNGE_KUTTA) {
      return (ClassicalRungeKuttaIntegrator)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'runge_kutta' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRunge_kutta(ClassicalRungeKuttaIntegrator value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RUNGE_KUTTA;
    value_ = value;
  }

  public MidpointIntegrator getMid_point() {
    if (getSetField() == _Fields.MID_POINT) {
      return (MidpointIntegrator)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'mid_point' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMid_point(MidpointIntegrator value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MID_POINT;
    value_ = value;
  }

  public GillIntegrator getGill() {
    if (getSetField() == _Fields.GILL) {
      return (GillIntegrator)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'gill' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setGill(GillIntegrator value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.GILL;
    value_ = value;
  }

  public AdamsBashforthIntegrator getAdams_bashforth() {
    if (getSetField() == _Fields.ADAMS_BASHFORTH) {
      return (AdamsBashforthIntegrator)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'adams_bashforth' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAdams_bashforth(AdamsBashforthIntegrator value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ADAMS_BASHFORTH;
    value_ = value;
  }

  public DormandPrince54Integrator getDormand_prince54() {
    if (getSetField() == _Fields.DORMAND_PRINCE54) {
      return (DormandPrince54Integrator)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'dormand_prince54' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDormand_prince54(DormandPrince54Integrator value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DORMAND_PRINCE54;
    value_ = value;
  }

  public boolean isSetEuler() {
    return setField_ == _Fields.EULER;
  }


  public boolean isSetRunge_kutta() {
    return setField_ == _Fields.RUNGE_KUTTA;
  }


  public boolean isSetMid_point() {
    return setField_ == _Fields.MID_POINT;
  }


  public boolean isSetGill() {
    return setField_ == _Fields.GILL;
  }


  public boolean isSetAdams_bashforth() {
    return setField_ == _Fields.ADAMS_BASHFORTH;
  }


  public boolean isSetDormand_prince54() {
    return setField_ == _Fields.DORMAND_PRINCE54;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof Integrator) {
      return equals((Integrator)other);
    } else {
      return false;
    }
  }

  public boolean equals(Integrator other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Integrator other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}

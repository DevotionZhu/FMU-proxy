/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.mechatronics.sfi.fmu_proxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-23")
public class ModelDescription implements org.apache.thrift.TBase<ModelDescription, ModelDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ModelDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelDescription");

  private static final org.apache.thrift.protocol.TField FMI_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fmiVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("modelName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COPYRIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("copyright", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("authour", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GENERATION_TOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("generation_tool", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DEFAULT_EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_experiment", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField VARIABLE_NAMING_CONVENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_naming_convention", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MODEL_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("model_variables", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField MODEL_STRUCTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("model_structure", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModelDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModelDescriptionTupleSchemeFactory();

  private java.lang.String fmiVersion; // required
  private java.lang.String modelName; // required
  private java.lang.String guid; // required
  private java.lang.String license; // optional
  private java.lang.String copyright; // optional
  private java.lang.String authour; // optional
  private java.lang.String version; // optional
  private java.lang.String description; // optional
  private java.lang.String generation_tool; // optional
  private DefaultExperiment default_experiment; // optional
  private VariableNamingConvention variable_naming_convention; // optional
  private java.util.List<ScalarVariable> model_variables; // required
  private ModelStructure model_structure; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FMI_VERSION((short)1, "fmiVersion"),
    MODEL_NAME((short)2, "modelName"),
    GUID((short)3, "guid"),
    LICENSE((short)4, "license"),
    COPYRIGHT((short)5, "copyright"),
    AUTHOUR((short)6, "authour"),
    VERSION((short)7, "version"),
    DESCRIPTION((short)8, "description"),
    GENERATION_TOOL((short)9, "generation_tool"),
    DEFAULT_EXPERIMENT((short)10, "default_experiment"),
    VARIABLE_NAMING_CONVENTION((short)11, "variable_naming_convention"),
    MODEL_VARIABLES((short)12, "model_variables"),
    MODEL_STRUCTURE((short)13, "model_structure");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FMI_VERSION
          return FMI_VERSION;
        case 2: // MODEL_NAME
          return MODEL_NAME;
        case 3: // GUID
          return GUID;
        case 4: // LICENSE
          return LICENSE;
        case 5: // COPYRIGHT
          return COPYRIGHT;
        case 6: // AUTHOUR
          return AUTHOUR;
        case 7: // VERSION
          return VERSION;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // GENERATION_TOOL
          return GENERATION_TOOL;
        case 10: // DEFAULT_EXPERIMENT
          return DEFAULT_EXPERIMENT;
        case 11: // VARIABLE_NAMING_CONVENTION
          return VARIABLE_NAMING_CONVENTION;
        case 12: // MODEL_VARIABLES
          return MODEL_VARIABLES;
        case 13: // MODEL_STRUCTURE
          return MODEL_STRUCTURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LICENSE,_Fields.COPYRIGHT,_Fields.AUTHOUR,_Fields.VERSION,_Fields.DESCRIPTION,_Fields.GENERATION_TOOL,_Fields.DEFAULT_EXPERIMENT,_Fields.VARIABLE_NAMING_CONVENTION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FMI_VERSION, new org.apache.thrift.meta_data.FieldMetaData("fmiVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("modelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COPYRIGHT, new org.apache.thrift.meta_data.FieldMetaData("copyright", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOUR, new org.apache.thrift.meta_data.FieldMetaData("authour", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERATION_TOOL, new org.apache.thrift.meta_data.FieldMetaData("generation_tool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("default_experiment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "DefaultExperiment")));
    tmpMap.put(_Fields.VARIABLE_NAMING_CONVENTION, new org.apache.thrift.meta_data.FieldMetaData("variable_naming_convention", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "VariableNamingConvention")));
    tmpMap.put(_Fields.MODEL_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("model_variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ModelVariables")));
    tmpMap.put(_Fields.MODEL_STRUCTURE, new org.apache.thrift.meta_data.FieldMetaData("model_structure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ModelStructure")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelDescription.class, metaDataMap);
  }

  public ModelDescription() {
  }

  public ModelDescription(
    java.lang.String fmiVersion,
    java.lang.String modelName,
    java.lang.String guid,
    java.util.List<ScalarVariable> model_variables,
    ModelStructure model_structure)
  {
    this();
    this.fmiVersion = fmiVersion;
    this.modelName = modelName;
    this.guid = guid;
    this.model_variables = model_variables;
    this.model_structure = model_structure;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelDescription(ModelDescription other) {
    if (other.isSetFmiVersion()) {
      this.fmiVersion = other.fmiVersion;
    }
    if (other.isSetModelName()) {
      this.modelName = other.modelName;
    }
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    if (other.isSetLicense()) {
      this.license = other.license;
    }
    if (other.isSetCopyright()) {
      this.copyright = other.copyright;
    }
    if (other.isSetAuthour()) {
      this.authour = other.authour;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetGeneration_tool()) {
      this.generation_tool = other.generation_tool;
    }
    if (other.isSetDefault_experiment()) {
      this.default_experiment = new DefaultExperiment(other.default_experiment);
    }
    if (other.isSetVariable_naming_convention()) {
      this.variable_naming_convention = other.variable_naming_convention;
    }
    if (other.isSetModel_variables()) {
      java.util.List<ScalarVariable> __this__model_variables = new java.util.ArrayList<ScalarVariable>(other.model_variables.size());
      for (ScalarVariable other_element : other.model_variables) {
        __this__model_variables.add(new ScalarVariable(other_element));
      }
      this.model_variables = __this__model_variables;
    }
    if (other.isSetModel_structure()) {
      this.model_structure = new ModelStructure(other.model_structure);
    }
  }

  public ModelDescription deepCopy() {
    return new ModelDescription(this);
  }

  @Override
  public void clear() {
    this.fmiVersion = null;
    this.modelName = null;
    this.guid = null;
    this.license = null;
    this.copyright = null;
    this.authour = null;
    this.version = null;
    this.description = null;
    this.generation_tool = null;
    this.default_experiment = null;
    this.variable_naming_convention = null;
    this.model_variables = null;
    this.model_structure = null;
  }

  public java.lang.String getFmiVersion() {
    return this.fmiVersion;
  }

  public ModelDescription setFmiVersion(java.lang.String fmiVersion) {
    this.fmiVersion = fmiVersion;
    return this;
  }

  public void unsetFmiVersion() {
    this.fmiVersion = null;
  }

  /** Returns true if field fmiVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetFmiVersion() {
    return this.fmiVersion != null;
  }

  public void setFmiVersionIsSet(boolean value) {
    if (!value) {
      this.fmiVersion = null;
    }
  }

  public java.lang.String getModelName() {
    return this.modelName;
  }

  public ModelDescription setModelName(java.lang.String modelName) {
    this.modelName = modelName;
    return this;
  }

  public void unsetModelName() {
    this.modelName = null;
  }

  /** Returns true if field modelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.modelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.modelName = null;
    }
  }

  public java.lang.String getGuid() {
    return this.guid;
  }

  public ModelDescription setGuid(java.lang.String guid) {
    this.guid = guid;
    return this;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  public java.lang.String getLicense() {
    return this.license;
  }

  public ModelDescription setLicense(java.lang.String license) {
    this.license = license;
    return this;
  }

  public void unsetLicense() {
    this.license = null;
  }

  /** Returns true if field license is set (has been assigned a value) and false otherwise */
  public boolean isSetLicense() {
    return this.license != null;
  }

  public void setLicenseIsSet(boolean value) {
    if (!value) {
      this.license = null;
    }
  }

  public java.lang.String getCopyright() {
    return this.copyright;
  }

  public ModelDescription setCopyright(java.lang.String copyright) {
    this.copyright = copyright;
    return this;
  }

  public void unsetCopyright() {
    this.copyright = null;
  }

  /** Returns true if field copyright is set (has been assigned a value) and false otherwise */
  public boolean isSetCopyright() {
    return this.copyright != null;
  }

  public void setCopyrightIsSet(boolean value) {
    if (!value) {
      this.copyright = null;
    }
  }

  public java.lang.String getAuthour() {
    return this.authour;
  }

  public ModelDescription setAuthour(java.lang.String authour) {
    this.authour = authour;
    return this;
  }

  public void unsetAuthour() {
    this.authour = null;
  }

  /** Returns true if field authour is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthour() {
    return this.authour != null;
  }

  public void setAuthourIsSet(boolean value) {
    if (!value) {
      this.authour = null;
    }
  }

  public java.lang.String getVersion() {
    return this.version;
  }

  public ModelDescription setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public ModelDescription setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public java.lang.String getGeneration_tool() {
    return this.generation_tool;
  }

  public ModelDescription setGeneration_tool(java.lang.String generation_tool) {
    this.generation_tool = generation_tool;
    return this;
  }

  public void unsetGeneration_tool() {
    this.generation_tool = null;
  }

  /** Returns true if field generation_tool is set (has been assigned a value) and false otherwise */
  public boolean isSetGeneration_tool() {
    return this.generation_tool != null;
  }

  public void setGeneration_toolIsSet(boolean value) {
    if (!value) {
      this.generation_tool = null;
    }
  }

  public DefaultExperiment getDefault_experiment() {
    return this.default_experiment;
  }

  public ModelDescription setDefault_experiment(DefaultExperiment default_experiment) {
    this.default_experiment = default_experiment;
    return this;
  }

  public void unsetDefault_experiment() {
    this.default_experiment = null;
  }

  /** Returns true if field default_experiment is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_experiment() {
    return this.default_experiment != null;
  }

  public void setDefault_experimentIsSet(boolean value) {
    if (!value) {
      this.default_experiment = null;
    }
  }

  public VariableNamingConvention getVariable_naming_convention() {
    return this.variable_naming_convention;
  }

  public ModelDescription setVariable_naming_convention(VariableNamingConvention variable_naming_convention) {
    this.variable_naming_convention = variable_naming_convention;
    return this;
  }

  public void unsetVariable_naming_convention() {
    this.variable_naming_convention = null;
  }

  /** Returns true if field variable_naming_convention is set (has been assigned a value) and false otherwise */
  public boolean isSetVariable_naming_convention() {
    return this.variable_naming_convention != null;
  }

  public void setVariable_naming_conventionIsSet(boolean value) {
    if (!value) {
      this.variable_naming_convention = null;
    }
  }

  public int getModel_variablesSize() {
    return (this.model_variables == null) ? 0 : this.model_variables.size();
  }

  public java.util.Iterator<ScalarVariable> getModel_variablesIterator() {
    return (this.model_variables == null) ? null : this.model_variables.iterator();
  }

  public void addToModel_variables(ScalarVariable elem) {
    if (this.model_variables == null) {
      this.model_variables = new java.util.ArrayList<ScalarVariable>();
    }
    this.model_variables.add(elem);
  }

  public java.util.List<ScalarVariable> getModel_variables() {
    return this.model_variables;
  }

  public ModelDescription setModel_variables(java.util.List<ScalarVariable> model_variables) {
    this.model_variables = model_variables;
    return this;
  }

  public void unsetModel_variables() {
    this.model_variables = null;
  }

  /** Returns true if field model_variables is set (has been assigned a value) and false otherwise */
  public boolean isSetModel_variables() {
    return this.model_variables != null;
  }

  public void setModel_variablesIsSet(boolean value) {
    if (!value) {
      this.model_variables = null;
    }
  }

  public ModelStructure getModel_structure() {
    return this.model_structure;
  }

  public ModelDescription setModel_structure(ModelStructure model_structure) {
    this.model_structure = model_structure;
    return this;
  }

  public void unsetModel_structure() {
    this.model_structure = null;
  }

  /** Returns true if field model_structure is set (has been assigned a value) and false otherwise */
  public boolean isSetModel_structure() {
    return this.model_structure != null;
  }

  public void setModel_structureIsSet(boolean value) {
    if (!value) {
      this.model_structure = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FMI_VERSION:
      if (value == null) {
        unsetFmiVersion();
      } else {
        setFmiVersion((java.lang.String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((java.lang.String)value);
      }
      break;

    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((java.lang.String)value);
      }
      break;

    case LICENSE:
      if (value == null) {
        unsetLicense();
      } else {
        setLicense((java.lang.String)value);
      }
      break;

    case COPYRIGHT:
      if (value == null) {
        unsetCopyright();
      } else {
        setCopyright((java.lang.String)value);
      }
      break;

    case AUTHOUR:
      if (value == null) {
        unsetAuthour();
      } else {
        setAuthour((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case GENERATION_TOOL:
      if (value == null) {
        unsetGeneration_tool();
      } else {
        setGeneration_tool((java.lang.String)value);
      }
      break;

    case DEFAULT_EXPERIMENT:
      if (value == null) {
        unsetDefault_experiment();
      } else {
        setDefault_experiment((DefaultExperiment)value);
      }
      break;

    case VARIABLE_NAMING_CONVENTION:
      if (value == null) {
        unsetVariable_naming_convention();
      } else {
        setVariable_naming_convention((VariableNamingConvention)value);
      }
      break;

    case MODEL_VARIABLES:
      if (value == null) {
        unsetModel_variables();
      } else {
        setModel_variables((java.util.List<ScalarVariable>)value);
      }
      break;

    case MODEL_STRUCTURE:
      if (value == null) {
        unsetModel_structure();
      } else {
        setModel_structure((ModelStructure)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FMI_VERSION:
      return getFmiVersion();

    case MODEL_NAME:
      return getModelName();

    case GUID:
      return getGuid();

    case LICENSE:
      return getLicense();

    case COPYRIGHT:
      return getCopyright();

    case AUTHOUR:
      return getAuthour();

    case VERSION:
      return getVersion();

    case DESCRIPTION:
      return getDescription();

    case GENERATION_TOOL:
      return getGeneration_tool();

    case DEFAULT_EXPERIMENT:
      return getDefault_experiment();

    case VARIABLE_NAMING_CONVENTION:
      return getVariable_naming_convention();

    case MODEL_VARIABLES:
      return getModel_variables();

    case MODEL_STRUCTURE:
      return getModel_structure();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FMI_VERSION:
      return isSetFmiVersion();
    case MODEL_NAME:
      return isSetModelName();
    case GUID:
      return isSetGuid();
    case LICENSE:
      return isSetLicense();
    case COPYRIGHT:
      return isSetCopyright();
    case AUTHOUR:
      return isSetAuthour();
    case VERSION:
      return isSetVersion();
    case DESCRIPTION:
      return isSetDescription();
    case GENERATION_TOOL:
      return isSetGeneration_tool();
    case DEFAULT_EXPERIMENT:
      return isSetDefault_experiment();
    case VARIABLE_NAMING_CONVENTION:
      return isSetVariable_naming_convention();
    case MODEL_VARIABLES:
      return isSetModel_variables();
    case MODEL_STRUCTURE:
      return isSetModel_structure();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelDescription)
      return this.equals((ModelDescription)that);
    return false;
  }

  public boolean equals(ModelDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fmiVersion = true && this.isSetFmiVersion();
    boolean that_present_fmiVersion = true && that.isSetFmiVersion();
    if (this_present_fmiVersion || that_present_fmiVersion) {
      if (!(this_present_fmiVersion && that_present_fmiVersion))
        return false;
      if (!this.fmiVersion.equals(that.fmiVersion))
        return false;
    }

    boolean this_present_modelName = true && this.isSetModelName();
    boolean that_present_modelName = true && that.isSetModelName();
    if (this_present_modelName || that_present_modelName) {
      if (!(this_present_modelName && that_present_modelName))
        return false;
      if (!this.modelName.equals(that.modelName))
        return false;
    }

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_license = true && this.isSetLicense();
    boolean that_present_license = true && that.isSetLicense();
    if (this_present_license || that_present_license) {
      if (!(this_present_license && that_present_license))
        return false;
      if (!this.license.equals(that.license))
        return false;
    }

    boolean this_present_copyright = true && this.isSetCopyright();
    boolean that_present_copyright = true && that.isSetCopyright();
    if (this_present_copyright || that_present_copyright) {
      if (!(this_present_copyright && that_present_copyright))
        return false;
      if (!this.copyright.equals(that.copyright))
        return false;
    }

    boolean this_present_authour = true && this.isSetAuthour();
    boolean that_present_authour = true && that.isSetAuthour();
    if (this_present_authour || that_present_authour) {
      if (!(this_present_authour && that_present_authour))
        return false;
      if (!this.authour.equals(that.authour))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_generation_tool = true && this.isSetGeneration_tool();
    boolean that_present_generation_tool = true && that.isSetGeneration_tool();
    if (this_present_generation_tool || that_present_generation_tool) {
      if (!(this_present_generation_tool && that_present_generation_tool))
        return false;
      if (!this.generation_tool.equals(that.generation_tool))
        return false;
    }

    boolean this_present_default_experiment = true && this.isSetDefault_experiment();
    boolean that_present_default_experiment = true && that.isSetDefault_experiment();
    if (this_present_default_experiment || that_present_default_experiment) {
      if (!(this_present_default_experiment && that_present_default_experiment))
        return false;
      if (!this.default_experiment.equals(that.default_experiment))
        return false;
    }

    boolean this_present_variable_naming_convention = true && this.isSetVariable_naming_convention();
    boolean that_present_variable_naming_convention = true && that.isSetVariable_naming_convention();
    if (this_present_variable_naming_convention || that_present_variable_naming_convention) {
      if (!(this_present_variable_naming_convention && that_present_variable_naming_convention))
        return false;
      if (!this.variable_naming_convention.equals(that.variable_naming_convention))
        return false;
    }

    boolean this_present_model_variables = true && this.isSetModel_variables();
    boolean that_present_model_variables = true && that.isSetModel_variables();
    if (this_present_model_variables || that_present_model_variables) {
      if (!(this_present_model_variables && that_present_model_variables))
        return false;
      if (!this.model_variables.equals(that.model_variables))
        return false;
    }

    boolean this_present_model_structure = true && this.isSetModel_structure();
    boolean that_present_model_structure = true && that.isSetModel_structure();
    if (this_present_model_structure || that_present_model_structure) {
      if (!(this_present_model_structure && that_present_model_structure))
        return false;
      if (!this.model_structure.equals(that.model_structure))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFmiVersion()) ? 131071 : 524287);
    if (isSetFmiVersion())
      hashCode = hashCode * 8191 + fmiVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelName()) ? 131071 : 524287);
    if (isSetModelName())
      hashCode = hashCode * 8191 + modelName.hashCode();

    hashCode = hashCode * 8191 + ((isSetGuid()) ? 131071 : 524287);
    if (isSetGuid())
      hashCode = hashCode * 8191 + guid.hashCode();

    hashCode = hashCode * 8191 + ((isSetLicense()) ? 131071 : 524287);
    if (isSetLicense())
      hashCode = hashCode * 8191 + license.hashCode();

    hashCode = hashCode * 8191 + ((isSetCopyright()) ? 131071 : 524287);
    if (isSetCopyright())
      hashCode = hashCode * 8191 + copyright.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthour()) ? 131071 : 524287);
    if (isSetAuthour())
      hashCode = hashCode * 8191 + authour.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetGeneration_tool()) ? 131071 : 524287);
    if (isSetGeneration_tool())
      hashCode = hashCode * 8191 + generation_tool.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefault_experiment()) ? 131071 : 524287);
    if (isSetDefault_experiment())
      hashCode = hashCode * 8191 + default_experiment.hashCode();

    hashCode = hashCode * 8191 + ((isSetVariable_naming_convention()) ? 131071 : 524287);
    if (isSetVariable_naming_convention())
      hashCode = hashCode * 8191 + variable_naming_convention.getValue();

    hashCode = hashCode * 8191 + ((isSetModel_variables()) ? 131071 : 524287);
    if (isSetModel_variables())
      hashCode = hashCode * 8191 + model_variables.hashCode();

    hashCode = hashCode * 8191 + ((isSetModel_structure()) ? 131071 : 524287);
    if (isSetModel_structure())
      hashCode = hashCode * 8191 + model_structure.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ModelDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFmiVersion()).compareTo(other.isSetFmiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmiVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmiVersion, other.fmiVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelName, other.modelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicense()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCopyright()).compareTo(other.isSetCopyright());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopyright()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copyright, other.copyright);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthour()).compareTo(other.isSetAuthour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authour, other.authour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGeneration_tool()).compareTo(other.isSetGeneration_tool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeneration_tool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generation_tool, other.generation_tool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefault_experiment()).compareTo(other.isSetDefault_experiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_experiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_experiment, other.default_experiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVariable_naming_convention()).compareTo(other.isSetVariable_naming_convention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable_naming_convention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_naming_convention, other.variable_naming_convention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModel_variables()).compareTo(other.isSetModel_variables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel_variables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model_variables, other.model_variables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModel_structure()).compareTo(other.isSetModel_structure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel_structure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model_structure, other.model_structure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ModelDescription(");
    boolean first = true;

    sb.append("fmiVersion:");
    if (this.fmiVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.fmiVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelName:");
    if (this.modelName == null) {
      sb.append("null");
    } else {
      sb.append(this.modelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guid:");
    if (this.guid == null) {
      sb.append("null");
    } else {
      sb.append(this.guid);
    }
    first = false;
    if (isSetLicense()) {
      if (!first) sb.append(", ");
      sb.append("license:");
      if (this.license == null) {
        sb.append("null");
      } else {
        sb.append(this.license);
      }
      first = false;
    }
    if (isSetCopyright()) {
      if (!first) sb.append(", ");
      sb.append("copyright:");
      if (this.copyright == null) {
        sb.append("null");
      } else {
        sb.append(this.copyright);
      }
      first = false;
    }
    if (isSetAuthour()) {
      if (!first) sb.append(", ");
      sb.append("authour:");
      if (this.authour == null) {
        sb.append("null");
      } else {
        sb.append(this.authour);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetGeneration_tool()) {
      if (!first) sb.append(", ");
      sb.append("generation_tool:");
      if (this.generation_tool == null) {
        sb.append("null");
      } else {
        sb.append(this.generation_tool);
      }
      first = false;
    }
    if (isSetDefault_experiment()) {
      if (!first) sb.append(", ");
      sb.append("default_experiment:");
      if (this.default_experiment == null) {
        sb.append("null");
      } else {
        sb.append(this.default_experiment);
      }
      first = false;
    }
    if (isSetVariable_naming_convention()) {
      if (!first) sb.append(", ");
      sb.append("variable_naming_convention:");
      if (this.variable_naming_convention == null) {
        sb.append("null");
      } else {
        sb.append(this.variable_naming_convention);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("model_variables:");
    if (this.model_variables == null) {
      sb.append("null");
    } else {
      sb.append(this.model_variables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model_structure:");
    if (this.model_structure == null) {
      sb.append("null");
    } else {
      sb.append(this.model_structure);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelDescriptionStandardScheme getScheme() {
      return new ModelDescriptionStandardScheme();
    }
  }

  private static class ModelDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModelDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FMI_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fmiVersion = iprot.readString();
              struct.setFmiVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guid = iprot.readString();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LICENSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.license = iprot.readString();
              struct.setLicenseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COPYRIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.copyright = iprot.readString();
              struct.setCopyrightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authour = iprot.readString();
              struct.setAuthourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GENERATION_TOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.generation_tool = iprot.readString();
              struct.setGeneration_toolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEFAULT_EXPERIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.default_experiment = new DefaultExperiment();
              struct.default_experiment.read(iprot);
              struct.setDefault_experimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VARIABLE_NAMING_CONVENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.variable_naming_convention = no.mechatronics.sfi.fmu_proxy.thrift.VariableNamingConvention.findByValue(iprot.readI32());
              struct.setVariable_naming_conventionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MODEL_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.model_variables = new java.util.ArrayList<ScalarVariable>(_list0.size);
                ScalarVariable _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ScalarVariable();
                  _elem1.read(iprot);
                  struct.model_variables.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setModel_variablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MODEL_STRUCTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.model_structure = new ModelStructure();
              struct.model_structure.read(iprot);
              struct.setModel_structureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fmiVersion != null) {
        oprot.writeFieldBegin(FMI_VERSION_FIELD_DESC);
        oprot.writeString(struct.fmiVersion);
        oprot.writeFieldEnd();
      }
      if (struct.modelName != null) {
        oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
        oprot.writeString(struct.modelName);
        oprot.writeFieldEnd();
      }
      if (struct.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(struct.guid);
        oprot.writeFieldEnd();
      }
      if (struct.license != null) {
        if (struct.isSetLicense()) {
          oprot.writeFieldBegin(LICENSE_FIELD_DESC);
          oprot.writeString(struct.license);
          oprot.writeFieldEnd();
        }
      }
      if (struct.copyright != null) {
        if (struct.isSetCopyright()) {
          oprot.writeFieldBegin(COPYRIGHT_FIELD_DESC);
          oprot.writeString(struct.copyright);
          oprot.writeFieldEnd();
        }
      }
      if (struct.authour != null) {
        if (struct.isSetAuthour()) {
          oprot.writeFieldBegin(AUTHOUR_FIELD_DESC);
          oprot.writeString(struct.authour);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.generation_tool != null) {
        if (struct.isSetGeneration_tool()) {
          oprot.writeFieldBegin(GENERATION_TOOL_FIELD_DESC);
          oprot.writeString(struct.generation_tool);
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_experiment != null) {
        if (struct.isSetDefault_experiment()) {
          oprot.writeFieldBegin(DEFAULT_EXPERIMENT_FIELD_DESC);
          struct.default_experiment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.variable_naming_convention != null) {
        if (struct.isSetVariable_naming_convention()) {
          oprot.writeFieldBegin(VARIABLE_NAMING_CONVENTION_FIELD_DESC);
          oprot.writeI32(struct.variable_naming_convention.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.model_variables != null) {
        oprot.writeFieldBegin(MODEL_VARIABLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.model_variables.size()));
          for (ScalarVariable _iter3 : struct.model_variables)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.model_structure != null) {
        oprot.writeFieldBegin(MODEL_STRUCTURE_FIELD_DESC);
        struct.model_structure.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelDescriptionTupleScheme getScheme() {
      return new ModelDescriptionTupleScheme();
    }
  }

  private static class ModelDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModelDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFmiVersion()) {
        optionals.set(0);
      }
      if (struct.isSetModelName()) {
        optionals.set(1);
      }
      if (struct.isSetGuid()) {
        optionals.set(2);
      }
      if (struct.isSetLicense()) {
        optionals.set(3);
      }
      if (struct.isSetCopyright()) {
        optionals.set(4);
      }
      if (struct.isSetAuthour()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetDescription()) {
        optionals.set(7);
      }
      if (struct.isSetGeneration_tool()) {
        optionals.set(8);
      }
      if (struct.isSetDefault_experiment()) {
        optionals.set(9);
      }
      if (struct.isSetVariable_naming_convention()) {
        optionals.set(10);
      }
      if (struct.isSetModel_variables()) {
        optionals.set(11);
      }
      if (struct.isSetModel_structure()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetFmiVersion()) {
        oprot.writeString(struct.fmiVersion);
      }
      if (struct.isSetModelName()) {
        oprot.writeString(struct.modelName);
      }
      if (struct.isSetGuid()) {
        oprot.writeString(struct.guid);
      }
      if (struct.isSetLicense()) {
        oprot.writeString(struct.license);
      }
      if (struct.isSetCopyright()) {
        oprot.writeString(struct.copyright);
      }
      if (struct.isSetAuthour()) {
        oprot.writeString(struct.authour);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetGeneration_tool()) {
        oprot.writeString(struct.generation_tool);
      }
      if (struct.isSetDefault_experiment()) {
        struct.default_experiment.write(oprot);
      }
      if (struct.isSetVariable_naming_convention()) {
        oprot.writeI32(struct.variable_naming_convention.getValue());
      }
      if (struct.isSetModel_variables()) {
        {
          oprot.writeI32(struct.model_variables.size());
          for (ScalarVariable _iter4 : struct.model_variables)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetModel_structure()) {
        struct.model_structure.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.fmiVersion = iprot.readString();
        struct.setFmiVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.modelName = iprot.readString();
        struct.setModelNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.guid = iprot.readString();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.license = iprot.readString();
        struct.setLicenseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.copyright = iprot.readString();
        struct.setCopyrightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.authour = iprot.readString();
        struct.setAuthourIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.generation_tool = iprot.readString();
        struct.setGeneration_toolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.default_experiment = new DefaultExperiment();
        struct.default_experiment.read(iprot);
        struct.setDefault_experimentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.variable_naming_convention = no.mechatronics.sfi.fmu_proxy.thrift.VariableNamingConvention.findByValue(iprot.readI32());
        struct.setVariable_naming_conventionIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.model_variables = new java.util.ArrayList<ScalarVariable>(_list5.size);
          ScalarVariable _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ScalarVariable();
            _elem6.read(iprot);
            struct.model_variables.add(_elem6);
          }
        }
        struct.setModel_variablesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.model_structure = new ModelStructure();
        struct.model_structure.read(iprot);
        struct.setModel_structureIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


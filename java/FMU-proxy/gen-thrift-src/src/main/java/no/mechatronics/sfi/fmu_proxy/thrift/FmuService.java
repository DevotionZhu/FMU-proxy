/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.mechatronics.sfi.fmu_proxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-15")
public class FmuService {

  public interface Iface {

    public boolean supportsCosimulation() throws org.apache.thrift.TException;

    public boolean supportsModelExchange() throws org.apache.thrift.TException;

    public java.lang.String getModelDescriptionXml() throws org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription getModelDescription() throws org.apache.thrift.TException;

    public int createInstanceFromCS() throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException;

    public int createInstanceFromME(no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator) throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException;

    public boolean canGetAndSetFMUstate(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException;

    public double getCurrentTime(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException;

    public boolean isTerminated(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException;

    public boolean init(int fmu_id, double start, double stop) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode step(int fmu_id, double step_size) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException;

    public boolean terminate(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException;

    public boolean reset(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.IntRead readInt(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.RealRead readReal(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.StringRead readString(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.BoolRead readBoolen(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeInt(int fmu_id, int vr, int value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeReal(int fmu_id, int vr, double value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeString(int fmu_id, int vr, java.lang.String value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeBoolen(int fmu_id, int vr, boolean value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void supportsCosimulation(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void supportsModelExchange(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getModelDescriptionXml(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getModelDescription(org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription> resultHandler) throws org.apache.thrift.TException;

    public void createInstanceFromCS(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void createInstanceFromME(no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void canGetAndSetFMUstate(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getCurrentTime(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void isTerminated(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void init(int fmu_id, double start, double stop, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void step(int fmu_id, double step_size, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException;

    public void terminate(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void reset(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void readInt(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.IntRead> resultHandler) throws org.apache.thrift.TException;

    public void readReal(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.RealRead> resultHandler) throws org.apache.thrift.TException;

    public void readString(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StringRead> resultHandler) throws org.apache.thrift.TException;

    public void readBoolen(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.BoolRead> resultHandler) throws org.apache.thrift.TException;

    public void writeInt(int fmu_id, int vr, int value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException;

    public void writeReal(int fmu_id, int vr, double value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException;

    public void writeString(int fmu_id, int vr, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException;

    public void writeBoolen(int fmu_id, int vr, boolean value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean supportsCosimulation() throws org.apache.thrift.TException
    {
      send_supportsCosimulation();
      return recv_supportsCosimulation();
    }

    public void send_supportsCosimulation() throws org.apache.thrift.TException
    {
      supportsCosimulation_args args = new supportsCosimulation_args();
      sendBase("supportsCosimulation", args);
    }

    public boolean recv_supportsCosimulation() throws org.apache.thrift.TException
    {
      supportsCosimulation_result result = new supportsCosimulation_result();
      receiveBase(result, "supportsCosimulation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "supportsCosimulation failed: unknown result");
    }

    public boolean supportsModelExchange() throws org.apache.thrift.TException
    {
      send_supportsModelExchange();
      return recv_supportsModelExchange();
    }

    public void send_supportsModelExchange() throws org.apache.thrift.TException
    {
      supportsModelExchange_args args = new supportsModelExchange_args();
      sendBase("supportsModelExchange", args);
    }

    public boolean recv_supportsModelExchange() throws org.apache.thrift.TException
    {
      supportsModelExchange_result result = new supportsModelExchange_result();
      receiveBase(result, "supportsModelExchange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "supportsModelExchange failed: unknown result");
    }

    public java.lang.String getModelDescriptionXml() throws org.apache.thrift.TException
    {
      send_getModelDescriptionXml();
      return recv_getModelDescriptionXml();
    }

    public void send_getModelDescriptionXml() throws org.apache.thrift.TException
    {
      getModelDescriptionXml_args args = new getModelDescriptionXml_args();
      sendBase("getModelDescriptionXml", args);
    }

    public java.lang.String recv_getModelDescriptionXml() throws org.apache.thrift.TException
    {
      getModelDescriptionXml_result result = new getModelDescriptionXml_result();
      receiveBase(result, "getModelDescriptionXml");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getModelDescriptionXml failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription getModelDescription() throws org.apache.thrift.TException
    {
      send_getModelDescription();
      return recv_getModelDescription();
    }

    public void send_getModelDescription() throws org.apache.thrift.TException
    {
      getModelDescription_args args = new getModelDescription_args();
      sendBase("getModelDescription", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription recv_getModelDescription() throws org.apache.thrift.TException
    {
      getModelDescription_result result = new getModelDescription_result();
      receiveBase(result, "getModelDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getModelDescription failed: unknown result");
    }

    public int createInstanceFromCS() throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException
    {
      send_createInstanceFromCS();
      return recv_createInstanceFromCS();
    }

    public void send_createInstanceFromCS() throws org.apache.thrift.TException
    {
      createInstanceFromCS_args args = new createInstanceFromCS_args();
      sendBase("createInstanceFromCS", args);
    }

    public int recv_createInstanceFromCS() throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException
    {
      createInstanceFromCS_result result = new createInstanceFromCS_result();
      receiveBase(result, "createInstanceFromCS");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createInstanceFromCS failed: unknown result");
    }

    public int createInstanceFromME(no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator) throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException
    {
      send_createInstanceFromME(integrator);
      return recv_createInstanceFromME();
    }

    public void send_createInstanceFromME(no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator) throws org.apache.thrift.TException
    {
      createInstanceFromME_args args = new createInstanceFromME_args();
      args.setIntegrator(integrator);
      sendBase("createInstanceFromME", args);
    }

    public int recv_createInstanceFromME() throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException
    {
      createInstanceFromME_result result = new createInstanceFromME_result();
      receiveBase(result, "createInstanceFromME");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createInstanceFromME failed: unknown result");
    }

    public boolean canGetAndSetFMUstate(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      send_canGetAndSetFMUstate(fmu_id);
      return recv_canGetAndSetFMUstate();
    }

    public void send_canGetAndSetFMUstate(int fmu_id) throws org.apache.thrift.TException
    {
      canGetAndSetFMUstate_args args = new canGetAndSetFMUstate_args();
      args.setFmu_id(fmu_id);
      sendBase("canGetAndSetFMUstate", args);
    }

    public boolean recv_canGetAndSetFMUstate() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      canGetAndSetFMUstate_result result = new canGetAndSetFMUstate_result();
      receiveBase(result, "canGetAndSetFMUstate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canGetAndSetFMUstate failed: unknown result");
    }

    public double getCurrentTime(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      send_getCurrentTime(fmu_id);
      return recv_getCurrentTime();
    }

    public void send_getCurrentTime(int fmu_id) throws org.apache.thrift.TException
    {
      getCurrentTime_args args = new getCurrentTime_args();
      args.setFmu_id(fmu_id);
      sendBase("getCurrentTime", args);
    }

    public double recv_getCurrentTime() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      getCurrentTime_result result = new getCurrentTime_result();
      receiveBase(result, "getCurrentTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentTime failed: unknown result");
    }

    public boolean isTerminated(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      send_isTerminated(fmu_id);
      return recv_isTerminated();
    }

    public void send_isTerminated(int fmu_id) throws org.apache.thrift.TException
    {
      isTerminated_args args = new isTerminated_args();
      args.setFmu_id(fmu_id);
      sendBase("isTerminated", args);
    }

    public boolean recv_isTerminated() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      isTerminated_result result = new isTerminated_result();
      receiveBase(result, "isTerminated");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isTerminated failed: unknown result");
    }

    public boolean init(int fmu_id, double start, double stop) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      send_init(fmu_id, start, stop);
      return recv_init();
    }

    public void send_init(int fmu_id, double start, double stop) throws org.apache.thrift.TException
    {
      init_args args = new init_args();
      args.setFmu_id(fmu_id);
      args.setStart(start);
      args.setStop(stop);
      sendBase("init", args);
    }

    public boolean recv_init() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      init_result result = new init_result();
      receiveBase(result, "init");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "init failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode step(int fmu_id, double step_size) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      send_step(fmu_id, step_size);
      return recv_step();
    }

    public void send_step(int fmu_id, double step_size) throws org.apache.thrift.TException
    {
      step_args args = new step_args();
      args.setFmu_id(fmu_id);
      args.setStep_size(step_size);
      sendBase("step", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode recv_step() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      step_result result = new step_result();
      receiveBase(result, "step");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "step failed: unknown result");
    }

    public boolean terminate(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      send_terminate(fmu_id);
      return recv_terminate();
    }

    public void send_terminate(int fmu_id) throws org.apache.thrift.TException
    {
      terminate_args args = new terminate_args();
      args.setFmu_id(fmu_id);
      sendBase("terminate", args);
    }

    public boolean recv_terminate() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      terminate_result result = new terminate_result();
      receiveBase(result, "terminate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminate failed: unknown result");
    }

    public boolean reset(int fmu_id) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      send_reset(fmu_id);
      return recv_reset();
    }

    public void send_reset(int fmu_id) throws org.apache.thrift.TException
    {
      reset_args args = new reset_args();
      args.setFmu_id(fmu_id);
      sendBase("reset", args);
    }

    public boolean recv_reset() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException
    {
      reset_result result = new reset_result();
      receiveBase(result, "reset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reset failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.IntRead readInt(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_readInt(fmu_id, vr);
      return recv_readInt();
    }

    public void send_readInt(int fmu_id, int vr) throws org.apache.thrift.TException
    {
      readInt_args args = new readInt_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      sendBase("readInt", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.IntRead recv_readInt() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      readInt_result result = new readInt_result();
      receiveBase(result, "readInt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readInt failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.RealRead readReal(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_readReal(fmu_id, vr);
      return recv_readReal();
    }

    public void send_readReal(int fmu_id, int vr) throws org.apache.thrift.TException
    {
      readReal_args args = new readReal_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      sendBase("readReal", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.RealRead recv_readReal() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      readReal_result result = new readReal_result();
      receiveBase(result, "readReal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readReal failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StringRead readString(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_readString(fmu_id, vr);
      return recv_readString();
    }

    public void send_readString(int fmu_id, int vr) throws org.apache.thrift.TException
    {
      readString_args args = new readString_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      sendBase("readString", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StringRead recv_readString() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      readString_result result = new readString_result();
      receiveBase(result, "readString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readString failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.BoolRead readBoolen(int fmu_id, int vr) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_readBoolen(fmu_id, vr);
      return recv_readBoolen();
    }

    public void send_readBoolen(int fmu_id, int vr) throws org.apache.thrift.TException
    {
      readBoolen_args args = new readBoolen_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      sendBase("readBoolen", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.BoolRead recv_readBoolen() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      readBoolen_result result = new readBoolen_result();
      receiveBase(result, "readBoolen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readBoolen failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeInt(int fmu_id, int vr, int value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeInt(fmu_id, vr, value);
      return recv_writeInt();
    }

    public void send_writeInt(int fmu_id, int vr, int value) throws org.apache.thrift.TException
    {
      writeInt_args args = new writeInt_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeInt", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode recv_writeInt() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      writeInt_result result = new writeInt_result();
      receiveBase(result, "writeInt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeInt failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeReal(int fmu_id, int vr, double value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeReal(fmu_id, vr, value);
      return recv_writeReal();
    }

    public void send_writeReal(int fmu_id, int vr, double value) throws org.apache.thrift.TException
    {
      writeReal_args args = new writeReal_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeReal", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode recv_writeReal() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      writeReal_result result = new writeReal_result();
      receiveBase(result, "writeReal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeReal failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeString(int fmu_id, int vr, java.lang.String value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeString(fmu_id, vr, value);
      return recv_writeString();
    }

    public void send_writeString(int fmu_id, int vr, java.lang.String value) throws org.apache.thrift.TException
    {
      writeString_args args = new writeString_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeString", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode recv_writeString() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      writeString_result result = new writeString_result();
      receiveBase(result, "writeString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeString failed: unknown result");
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode writeBoolen(int fmu_id, int vr, boolean value) throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeBoolen(fmu_id, vr, value);
      return recv_writeBoolen();
    }

    public void send_writeBoolen(int fmu_id, int vr, boolean value) throws org.apache.thrift.TException
    {
      writeBoolen_args args = new writeBoolen_args();
      args.setFmu_id(fmu_id);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeBoolen", args);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode recv_writeBoolen() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException
    {
      writeBoolen_result result = new writeBoolen_result();
      receiveBase(result, "writeBoolen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeBoolen failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void supportsCosimulation(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      supportsCosimulation_call method_call = new supportsCosimulation_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class supportsCosimulation_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public supportsCosimulation_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("supportsCosimulation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        supportsCosimulation_args args = new supportsCosimulation_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_supportsCosimulation();
      }
    }

    public void supportsModelExchange(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      supportsModelExchange_call method_call = new supportsModelExchange_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class supportsModelExchange_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public supportsModelExchange_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("supportsModelExchange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        supportsModelExchange_args args = new supportsModelExchange_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_supportsModelExchange();
      }
    }

    public void getModelDescriptionXml(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getModelDescriptionXml_call method_call = new getModelDescriptionXml_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getModelDescriptionXml_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public getModelDescriptionXml_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModelDescriptionXml", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getModelDescriptionXml_args args = new getModelDescriptionXml_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getModelDescriptionXml();
      }
    }

    public void getModelDescription(org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getModelDescription_call method_call = new getModelDescription_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getModelDescription_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription> {
      public getModelDescription_call(org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModelDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getModelDescription_args args = new getModelDescription_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getModelDescription();
      }
    }

    public void createInstanceFromCS(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createInstanceFromCS_call method_call = new createInstanceFromCS_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createInstanceFromCS_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      public createInstanceFromCS_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createInstanceFromCS", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createInstanceFromCS_args args = new createInstanceFromCS_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createInstanceFromCS();
      }
    }

    public void createInstanceFromME(no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createInstanceFromME_call method_call = new createInstanceFromME_call(integrator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createInstanceFromME_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator;
      public createInstanceFromME_call(no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.integrator = integrator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createInstanceFromME", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createInstanceFromME_args args = new createInstanceFromME_args();
        args.setIntegrator(integrator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createInstanceFromME();
      }
    }

    public void canGetAndSetFMUstate(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canGetAndSetFMUstate_call method_call = new canGetAndSetFMUstate_call(fmu_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canGetAndSetFMUstate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int fmu_id;
      public canGetAndSetFMUstate_call(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canGetAndSetFMUstate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canGetAndSetFMUstate_args args = new canGetAndSetFMUstate_args();
        args.setFmu_id(fmu_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canGetAndSetFMUstate();
      }
    }

    public void getCurrentTime(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentTime_call method_call = new getCurrentTime_call(fmu_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentTime_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private int fmu_id;
      public getCurrentTime_call(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentTime_args args = new getCurrentTime_args();
        args.setFmu_id(fmu_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentTime();
      }
    }

    public void isTerminated(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isTerminated_call method_call = new isTerminated_call(fmu_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isTerminated_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int fmu_id;
      public isTerminated_call(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isTerminated", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isTerminated_args args = new isTerminated_args();
        args.setFmu_id(fmu_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isTerminated();
      }
    }

    public void init(int fmu_id, double start, double stop, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      init_call method_call = new init_call(fmu_id, start, stop, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class init_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int fmu_id;
      private double start;
      private double stop;
      public init_call(int fmu_id, double start, double stop, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.start = start;
        this.stop = stop;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("init", org.apache.thrift.protocol.TMessageType.CALL, 0));
        init_args args = new init_args();
        args.setFmu_id(fmu_id);
        args.setStart(start);
        args.setStop(stop);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_init();
      }
    }

    public void step(int fmu_id, double step_size, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      step_call method_call = new step_call(fmu_id, step_size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class step_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      private int fmu_id;
      private double step_size;
      public step_call(int fmu_id, double step_size, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.step_size = step_size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("step", org.apache.thrift.protocol.TMessageType.CALL, 0));
        step_args args = new step_args();
        args.setFmu_id(fmu_id);
        args.setStep_size(step_size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_step();
      }
    }

    public void terminate(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminate_call method_call = new terminate_call(fmu_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int fmu_id;
      public terminate_call(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminate_args args = new terminate_args();
        args.setFmu_id(fmu_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminate();
      }
    }

    public void reset(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reset_call method_call = new reset_call(fmu_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reset_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int fmu_id;
      public reset_call(int fmu_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reset_args args = new reset_args();
        args.setFmu_id(fmu_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reset();
      }
    }

    public void readInt(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.IntRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readInt_call method_call = new readInt_call(fmu_id, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readInt_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.IntRead> {
      private int fmu_id;
      private int vr;
      public readInt_call(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.IntRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readInt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readInt_args args = new readInt_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.IntRead getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readInt();
      }
    }

    public void readReal(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.RealRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readReal_call method_call = new readReal_call(fmu_id, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readReal_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.RealRead> {
      private int fmu_id;
      private int vr;
      public readReal_call(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.RealRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readReal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readReal_args args = new readReal_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.RealRead getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readReal();
      }
    }

    public void readString(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StringRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readString_call method_call = new readString_call(fmu_id, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readString_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.StringRead> {
      private int fmu_id;
      private int vr;
      public readString_call(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StringRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readString_args args = new readString_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.StringRead getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readString();
      }
    }

    public void readBoolen(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.BoolRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readBoolen_call method_call = new readBoolen_call(fmu_id, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readBoolen_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.BoolRead> {
      private int fmu_id;
      private int vr;
      public readBoolen_call(int fmu_id, int vr, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.BoolRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readBoolen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readBoolen_args args = new readBoolen_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.BoolRead getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readBoolen();
      }
    }

    public void writeInt(int fmu_id, int vr, int value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeInt_call method_call = new writeInt_call(fmu_id, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeInt_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      private int fmu_id;
      private int vr;
      private int value;
      public writeInt_call(int fmu_id, int vr, int value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeInt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeInt_args args = new writeInt_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeInt();
      }
    }

    public void writeReal(int fmu_id, int vr, double value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeReal_call method_call = new writeReal_call(fmu_id, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeReal_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      private int fmu_id;
      private int vr;
      private double value;
      public writeReal_call(int fmu_id, int vr, double value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeReal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeReal_args args = new writeReal_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeReal();
      }
    }

    public void writeString(int fmu_id, int vr, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeString_call method_call = new writeString_call(fmu_id, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeString_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      private int fmu_id;
      private int vr;
      private java.lang.String value;
      public writeString_call(int fmu_id, int vr, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeString_args args = new writeString_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeString();
      }
    }

    public void writeBoolen(int fmu_id, int vr, boolean value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeBoolen_call method_call = new writeBoolen_call(fmu_id, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeBoolen_call extends org.apache.thrift.async.TAsyncMethodCall<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      private int fmu_id;
      private int vr;
      private boolean value;
      public writeBoolen_call(int fmu_id, int vr, boolean value, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmu_id = fmu_id;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeBoolen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeBoolen_args args = new writeBoolen_args();
        args.setFmu_id(fmu_id);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getResult() throws no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeBoolen();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("supportsCosimulation", new supportsCosimulation());
      processMap.put("supportsModelExchange", new supportsModelExchange());
      processMap.put("getModelDescriptionXml", new getModelDescriptionXml());
      processMap.put("getModelDescription", new getModelDescription());
      processMap.put("createInstanceFromCS", new createInstanceFromCS());
      processMap.put("createInstanceFromME", new createInstanceFromME());
      processMap.put("canGetAndSetFMUstate", new canGetAndSetFMUstate());
      processMap.put("getCurrentTime", new getCurrentTime());
      processMap.put("isTerminated", new isTerminated());
      processMap.put("init", new init());
      processMap.put("step", new step());
      processMap.put("terminate", new terminate());
      processMap.put("reset", new reset());
      processMap.put("readInt", new readInt());
      processMap.put("readReal", new readReal());
      processMap.put("readString", new readString());
      processMap.put("readBoolen", new readBoolen());
      processMap.put("writeInt", new writeInt());
      processMap.put("writeReal", new writeReal());
      processMap.put("writeString", new writeString());
      processMap.put("writeBoolen", new writeBoolen());
      return processMap;
    }

    public static class supportsCosimulation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, supportsCosimulation_args> {
      public supportsCosimulation() {
        super("supportsCosimulation");
      }

      public supportsCosimulation_args getEmptyArgsInstance() {
        return new supportsCosimulation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public supportsCosimulation_result getResult(I iface, supportsCosimulation_args args) throws org.apache.thrift.TException {
        supportsCosimulation_result result = new supportsCosimulation_result();
        result.success = iface.supportsCosimulation();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class supportsModelExchange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, supportsModelExchange_args> {
      public supportsModelExchange() {
        super("supportsModelExchange");
      }

      public supportsModelExchange_args getEmptyArgsInstance() {
        return new supportsModelExchange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public supportsModelExchange_result getResult(I iface, supportsModelExchange_args args) throws org.apache.thrift.TException {
        supportsModelExchange_result result = new supportsModelExchange_result();
        result.success = iface.supportsModelExchange();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getModelDescriptionXml<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getModelDescriptionXml_args> {
      public getModelDescriptionXml() {
        super("getModelDescriptionXml");
      }

      public getModelDescriptionXml_args getEmptyArgsInstance() {
        return new getModelDescriptionXml_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getModelDescriptionXml_result getResult(I iface, getModelDescriptionXml_args args) throws org.apache.thrift.TException {
        getModelDescriptionXml_result result = new getModelDescriptionXml_result();
        result.success = iface.getModelDescriptionXml();
        return result;
      }
    }

    public static class getModelDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getModelDescription_args> {
      public getModelDescription() {
        super("getModelDescription");
      }

      public getModelDescription_args getEmptyArgsInstance() {
        return new getModelDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getModelDescription_result getResult(I iface, getModelDescription_args args) throws org.apache.thrift.TException {
        getModelDescription_result result = new getModelDescription_result();
        result.success = iface.getModelDescription();
        return result;
      }
    }

    public static class createInstanceFromCS<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createInstanceFromCS_args> {
      public createInstanceFromCS() {
        super("createInstanceFromCS");
      }

      public createInstanceFromCS_args getEmptyArgsInstance() {
        return new createInstanceFromCS_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createInstanceFromCS_result getResult(I iface, createInstanceFromCS_args args) throws org.apache.thrift.TException {
        createInstanceFromCS_result result = new createInstanceFromCS_result();
        try {
          result.success = iface.createInstanceFromCS();
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class createInstanceFromME<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createInstanceFromME_args> {
      public createInstanceFromME() {
        super("createInstanceFromME");
      }

      public createInstanceFromME_args getEmptyArgsInstance() {
        return new createInstanceFromME_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createInstanceFromME_result getResult(I iface, createInstanceFromME_args args) throws org.apache.thrift.TException {
        createInstanceFromME_result result = new createInstanceFromME_result();
        try {
          result.success = iface.createInstanceFromME(args.integrator);
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class canGetAndSetFMUstate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canGetAndSetFMUstate_args> {
      public canGetAndSetFMUstate() {
        super("canGetAndSetFMUstate");
      }

      public canGetAndSetFMUstate_args getEmptyArgsInstance() {
        return new canGetAndSetFMUstate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public canGetAndSetFMUstate_result getResult(I iface, canGetAndSetFMUstate_args args) throws org.apache.thrift.TException {
        canGetAndSetFMUstate_result result = new canGetAndSetFMUstate_result();
        try {
          result.success = iface.canGetAndSetFMUstate(args.fmu_id);
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getCurrentTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentTime_args> {
      public getCurrentTime() {
        super("getCurrentTime");
      }

      public getCurrentTime_args getEmptyArgsInstance() {
        return new getCurrentTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getCurrentTime_result getResult(I iface, getCurrentTime_args args) throws org.apache.thrift.TException {
        getCurrentTime_result result = new getCurrentTime_result();
        try {
          result.success = iface.getCurrentTime(args.fmu_id);
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class isTerminated<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTerminated_args> {
      public isTerminated() {
        super("isTerminated");
      }

      public isTerminated_args getEmptyArgsInstance() {
        return new isTerminated_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public isTerminated_result getResult(I iface, isTerminated_args args) throws org.apache.thrift.TException {
        isTerminated_result result = new isTerminated_result();
        try {
          result.success = iface.isTerminated(args.fmu_id);
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class init<I extends Iface> extends org.apache.thrift.ProcessFunction<I, init_args> {
      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public init_result getResult(I iface, init_args args) throws org.apache.thrift.TException {
        init_result result = new init_result();
        try {
          result.success = iface.init(args.fmu_id, args.start, args.stop);
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class step<I extends Iface> extends org.apache.thrift.ProcessFunction<I, step_args> {
      public step() {
        super("step");
      }

      public step_args getEmptyArgsInstance() {
        return new step_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public step_result getResult(I iface, step_args args) throws org.apache.thrift.TException {
        step_result result = new step_result();
        try {
          result.success = iface.step(args.fmu_id, args.step_size);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class terminate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminate_args> {
      public terminate() {
        super("terminate");
      }

      public terminate_args getEmptyArgsInstance() {
        return new terminate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public terminate_result getResult(I iface, terminate_args args) throws org.apache.thrift.TException {
        terminate_result result = new terminate_result();
        try {
          result.success = iface.terminate(args.fmu_id);
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class reset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reset_args> {
      public reset() {
        super("reset");
      }

      public reset_args getEmptyArgsInstance() {
        return new reset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public reset_result getResult(I iface, reset_args args) throws org.apache.thrift.TException {
        reset_result result = new reset_result();
        try {
          result.success = iface.reset(args.fmu_id);
          result.setSuccessIsSet(true);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class readInt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readInt_args> {
      public readInt() {
        super("readInt");
      }

      public readInt_args getEmptyArgsInstance() {
        return new readInt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readInt_result getResult(I iface, readInt_args args) throws org.apache.thrift.TException {
        readInt_result result = new readInt_result();
        try {
          result.success = iface.readInt(args.fmu_id, args.vr);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class readReal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readReal_args> {
      public readReal() {
        super("readReal");
      }

      public readReal_args getEmptyArgsInstance() {
        return new readReal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readReal_result getResult(I iface, readReal_args args) throws org.apache.thrift.TException {
        readReal_result result = new readReal_result();
        try {
          result.success = iface.readReal(args.fmu_id, args.vr);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class readString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readString_args> {
      public readString() {
        super("readString");
      }

      public readString_args getEmptyArgsInstance() {
        return new readString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readString_result getResult(I iface, readString_args args) throws org.apache.thrift.TException {
        readString_result result = new readString_result();
        try {
          result.success = iface.readString(args.fmu_id, args.vr);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class readBoolen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readBoolen_args> {
      public readBoolen() {
        super("readBoolen");
      }

      public readBoolen_args getEmptyArgsInstance() {
        return new readBoolen_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readBoolen_result getResult(I iface, readBoolen_args args) throws org.apache.thrift.TException {
        readBoolen_result result = new readBoolen_result();
        try {
          result.success = iface.readBoolen(args.fmu_id, args.vr);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeInt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeInt_args> {
      public writeInt() {
        super("writeInt");
      }

      public writeInt_args getEmptyArgsInstance() {
        return new writeInt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeInt_result getResult(I iface, writeInt_args args) throws org.apache.thrift.TException {
        writeInt_result result = new writeInt_result();
        try {
          result.success = iface.writeInt(args.fmu_id, args.vr, args.value);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeReal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeReal_args> {
      public writeReal() {
        super("writeReal");
      }

      public writeReal_args getEmptyArgsInstance() {
        return new writeReal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeReal_result getResult(I iface, writeReal_args args) throws org.apache.thrift.TException {
        writeReal_result result = new writeReal_result();
        try {
          result.success = iface.writeReal(args.fmu_id, args.vr, args.value);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeString_args> {
      public writeString() {
        super("writeString");
      }

      public writeString_args getEmptyArgsInstance() {
        return new writeString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeString_result getResult(I iface, writeString_args args) throws org.apache.thrift.TException {
        writeString_result result = new writeString_result();
        try {
          result.success = iface.writeString(args.fmu_id, args.vr, args.value);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeBoolen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeBoolen_args> {
      public writeBoolen() {
        super("writeBoolen");
      }

      public writeBoolen_args getEmptyArgsInstance() {
        return new writeBoolen_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeBoolen_result getResult(I iface, writeBoolen_args args) throws org.apache.thrift.TException {
        writeBoolen_result result = new writeBoolen_result();
        try {
          result.success = iface.writeBoolen(args.fmu_id, args.vr, args.value);
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
          result.ex1 = ex1;
        } catch (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("supportsCosimulation", new supportsCosimulation());
      processMap.put("supportsModelExchange", new supportsModelExchange());
      processMap.put("getModelDescriptionXml", new getModelDescriptionXml());
      processMap.put("getModelDescription", new getModelDescription());
      processMap.put("createInstanceFromCS", new createInstanceFromCS());
      processMap.put("createInstanceFromME", new createInstanceFromME());
      processMap.put("canGetAndSetFMUstate", new canGetAndSetFMUstate());
      processMap.put("getCurrentTime", new getCurrentTime());
      processMap.put("isTerminated", new isTerminated());
      processMap.put("init", new init());
      processMap.put("step", new step());
      processMap.put("terminate", new terminate());
      processMap.put("reset", new reset());
      processMap.put("readInt", new readInt());
      processMap.put("readReal", new readReal());
      processMap.put("readString", new readString());
      processMap.put("readBoolen", new readBoolen());
      processMap.put("writeInt", new writeInt());
      processMap.put("writeReal", new writeReal());
      processMap.put("writeString", new writeString());
      processMap.put("writeBoolen", new writeBoolen());
      return processMap;
    }

    public static class supportsCosimulation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, supportsCosimulation_args, java.lang.Boolean> {
      public supportsCosimulation() {
        super("supportsCosimulation");
      }

      public supportsCosimulation_args getEmptyArgsInstance() {
        return new supportsCosimulation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            supportsCosimulation_result result = new supportsCosimulation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            supportsCosimulation_result result = new supportsCosimulation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, supportsCosimulation_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.supportsCosimulation(resultHandler);
      }
    }

    public static class supportsModelExchange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, supportsModelExchange_args, java.lang.Boolean> {
      public supportsModelExchange() {
        super("supportsModelExchange");
      }

      public supportsModelExchange_args getEmptyArgsInstance() {
        return new supportsModelExchange_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            supportsModelExchange_result result = new supportsModelExchange_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            supportsModelExchange_result result = new supportsModelExchange_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, supportsModelExchange_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.supportsModelExchange(resultHandler);
      }
    }

    public static class getModelDescriptionXml<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getModelDescriptionXml_args, java.lang.String> {
      public getModelDescriptionXml() {
        super("getModelDescriptionXml");
      }

      public getModelDescriptionXml_args getEmptyArgsInstance() {
        return new getModelDescriptionXml_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getModelDescriptionXml_result result = new getModelDescriptionXml_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getModelDescriptionXml_result result = new getModelDescriptionXml_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getModelDescriptionXml_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getModelDescriptionXml(resultHandler);
      }
    }

    public static class getModelDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getModelDescription_args, no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription> {
      public getModelDescription() {
        super("getModelDescription");
      }

      public getModelDescription_args getEmptyArgsInstance() {
        return new getModelDescription_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription o) {
            getModelDescription_result result = new getModelDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getModelDescription_result result = new getModelDescription_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getModelDescription_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription> resultHandler) throws org.apache.thrift.TException {
        iface.getModelDescription(resultHandler);
      }
    }

    public static class createInstanceFromCS<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createInstanceFromCS_args, java.lang.Integer> {
      public createInstanceFromCS() {
        super("createInstanceFromCS");
      }

      public createInstanceFromCS_args getEmptyArgsInstance() {
        return new createInstanceFromCS_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            createInstanceFromCS_result result = new createInstanceFromCS_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createInstanceFromCS_result result = new createInstanceFromCS_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createInstanceFromCS_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.createInstanceFromCS(resultHandler);
      }
    }

    public static class createInstanceFromME<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createInstanceFromME_args, java.lang.Integer> {
      public createInstanceFromME() {
        super("createInstanceFromME");
      }

      public createInstanceFromME_args getEmptyArgsInstance() {
        return new createInstanceFromME_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            createInstanceFromME_result result = new createInstanceFromME_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createInstanceFromME_result result = new createInstanceFromME_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createInstanceFromME_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.createInstanceFromME(args.integrator,resultHandler);
      }
    }

    public static class canGetAndSetFMUstate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canGetAndSetFMUstate_args, java.lang.Boolean> {
      public canGetAndSetFMUstate() {
        super("canGetAndSetFMUstate");
      }

      public canGetAndSetFMUstate_args getEmptyArgsInstance() {
        return new canGetAndSetFMUstate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            canGetAndSetFMUstate_result result = new canGetAndSetFMUstate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            canGetAndSetFMUstate_result result = new canGetAndSetFMUstate_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, canGetAndSetFMUstate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.canGetAndSetFMUstate(args.fmu_id,resultHandler);
      }
    }

    public static class getCurrentTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentTime_args, java.lang.Double> {
      public getCurrentTime() {
        super("getCurrentTime");
      }

      public getCurrentTime_args getEmptyArgsInstance() {
        return new getCurrentTime_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            getCurrentTime_result result = new getCurrentTime_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCurrentTime_result result = new getCurrentTime_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentTime_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.getCurrentTime(args.fmu_id,resultHandler);
      }
    }

    public static class isTerminated<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isTerminated_args, java.lang.Boolean> {
      public isTerminated() {
        super("isTerminated");
      }

      public isTerminated_args getEmptyArgsInstance() {
        return new isTerminated_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            isTerminated_result result = new isTerminated_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isTerminated_result result = new isTerminated_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isTerminated_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.isTerminated(args.fmu_id,resultHandler);
      }
    }

    public static class init<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, init_args, java.lang.Boolean> {
      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            init_result result = new init_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            init_result result = new init_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, init_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.init(args.fmu_id, args.start, args.stop,resultHandler);
      }
    }

    public static class step<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, step_args, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      public step() {
        super("step");
      }

      public step_args getEmptyArgsInstance() {
        return new step_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode o) {
            step_result result = new step_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            step_result result = new step_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, step_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
        iface.step(args.fmu_id, args.step_size,resultHandler);
      }
    }

    public static class terminate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminate_args, java.lang.Boolean> {
      public terminate() {
        super("terminate");
      }

      public terminate_args getEmptyArgsInstance() {
        return new terminate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            terminate_result result = new terminate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            terminate_result result = new terminate_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.terminate(args.fmu_id,resultHandler);
      }
    }

    public static class reset<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reset_args, java.lang.Boolean> {
      public reset() {
        super("reset");
      }

      public reset_args getEmptyArgsInstance() {
        return new reset_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            reset_result result = new reset_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reset_result result = new reset_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reset_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.reset(args.fmu_id,resultHandler);
      }
    }

    public static class readInt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readInt_args, no.mechatronics.sfi.fmu_proxy.thrift.IntRead> {
      public readInt() {
        super("readInt");
      }

      public readInt_args getEmptyArgsInstance() {
        return new readInt_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.IntRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.IntRead>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.IntRead o) {
            readInt_result result = new readInt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readInt_result result = new readInt_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readInt_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.IntRead> resultHandler) throws org.apache.thrift.TException {
        iface.readInt(args.fmu_id, args.vr,resultHandler);
      }
    }

    public static class readReal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readReal_args, no.mechatronics.sfi.fmu_proxy.thrift.RealRead> {
      public readReal() {
        super("readReal");
      }

      public readReal_args getEmptyArgsInstance() {
        return new readReal_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.RealRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.RealRead>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.RealRead o) {
            readReal_result result = new readReal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readReal_result result = new readReal_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readReal_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.RealRead> resultHandler) throws org.apache.thrift.TException {
        iface.readReal(args.fmu_id, args.vr,resultHandler);
      }
    }

    public static class readString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readString_args, no.mechatronics.sfi.fmu_proxy.thrift.StringRead> {
      public readString() {
        super("readString");
      }

      public readString_args getEmptyArgsInstance() {
        return new readString_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StringRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StringRead>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.StringRead o) {
            readString_result result = new readString_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readString_result result = new readString_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readString_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StringRead> resultHandler) throws org.apache.thrift.TException {
        iface.readString(args.fmu_id, args.vr,resultHandler);
      }
    }

    public static class readBoolen<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readBoolen_args, no.mechatronics.sfi.fmu_proxy.thrift.BoolRead> {
      public readBoolen() {
        super("readBoolen");
      }

      public readBoolen_args getEmptyArgsInstance() {
        return new readBoolen_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.BoolRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.BoolRead>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.BoolRead o) {
            readBoolen_result result = new readBoolen_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readBoolen_result result = new readBoolen_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readBoolen_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.BoolRead> resultHandler) throws org.apache.thrift.TException {
        iface.readBoolen(args.fmu_id, args.vr,resultHandler);
      }
    }

    public static class writeInt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeInt_args, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      public writeInt() {
        super("writeInt");
      }

      public writeInt_args getEmptyArgsInstance() {
        return new writeInt_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode o) {
            writeInt_result result = new writeInt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeInt_result result = new writeInt_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeInt_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
        iface.writeInt(args.fmu_id, args.vr, args.value,resultHandler);
      }
    }

    public static class writeReal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeReal_args, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      public writeReal() {
        super("writeReal");
      }

      public writeReal_args getEmptyArgsInstance() {
        return new writeReal_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode o) {
            writeReal_result result = new writeReal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeReal_result result = new writeReal_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeReal_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
        iface.writeReal(args.fmu_id, args.vr, args.value,resultHandler);
      }
    }

    public static class writeString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeString_args, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      public writeString() {
        super("writeString");
      }

      public writeString_args getEmptyArgsInstance() {
        return new writeString_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode o) {
            writeString_result result = new writeString_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeString_result result = new writeString_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeString_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
        iface.writeString(args.fmu_id, args.vr, args.value,resultHandler);
      }
    }

    public static class writeBoolen<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeBoolen_args, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> {
      public writeBoolen() {
        super("writeBoolen");
      }

      public writeBoolen_args getEmptyArgsInstance() {
        return new writeBoolen_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode>() { 
          public void onComplete(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode o) {
            writeBoolen_result result = new writeBoolen_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeBoolen_result result = new writeBoolen_result();
            if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) {
              result.ex1 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) {
              result.ex2 = (no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeBoolen_args args, org.apache.thrift.async.AsyncMethodCallback<no.mechatronics.sfi.fmu_proxy.thrift.StatusCode> resultHandler) throws org.apache.thrift.TException {
        iface.writeBoolen(args.fmu_id, args.vr, args.value,resultHandler);
      }
    }

  }

  public static class supportsCosimulation_args implements org.apache.thrift.TBase<supportsCosimulation_args, supportsCosimulation_args._Fields>, java.io.Serializable, Cloneable, Comparable<supportsCosimulation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportsCosimulation_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new supportsCosimulation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new supportsCosimulation_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportsCosimulation_args.class, metaDataMap);
    }

    public supportsCosimulation_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportsCosimulation_args(supportsCosimulation_args other) {
    }

    public supportsCosimulation_args deepCopy() {
      return new supportsCosimulation_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof supportsCosimulation_args)
        return this.equals((supportsCosimulation_args)that);
      return false;
    }

    public boolean equals(supportsCosimulation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(supportsCosimulation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("supportsCosimulation_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportsCosimulation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsCosimulation_argsStandardScheme getScheme() {
        return new supportsCosimulation_argsStandardScheme();
      }
    }

    private static class supportsCosimulation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<supportsCosimulation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportsCosimulation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportsCosimulation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportsCosimulation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsCosimulation_argsTupleScheme getScheme() {
        return new supportsCosimulation_argsTupleScheme();
      }
    }

    private static class supportsCosimulation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<supportsCosimulation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportsCosimulation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportsCosimulation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class supportsCosimulation_result implements org.apache.thrift.TBase<supportsCosimulation_result, supportsCosimulation_result._Fields>, java.io.Serializable, Cloneable, Comparable<supportsCosimulation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportsCosimulation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new supportsCosimulation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new supportsCosimulation_resultTupleSchemeFactory();

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportsCosimulation_result.class, metaDataMap);
    }

    public supportsCosimulation_result() {
    }

    public supportsCosimulation_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportsCosimulation_result(supportsCosimulation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public supportsCosimulation_result deepCopy() {
      return new supportsCosimulation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public supportsCosimulation_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof supportsCosimulation_result)
        return this.equals((supportsCosimulation_result)that);
      return false;
    }

    public boolean equals(supportsCosimulation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(supportsCosimulation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("supportsCosimulation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportsCosimulation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsCosimulation_resultStandardScheme getScheme() {
        return new supportsCosimulation_resultStandardScheme();
      }
    }

    private static class supportsCosimulation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<supportsCosimulation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportsCosimulation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportsCosimulation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportsCosimulation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsCosimulation_resultTupleScheme getScheme() {
        return new supportsCosimulation_resultTupleScheme();
      }
    }

    private static class supportsCosimulation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<supportsCosimulation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportsCosimulation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportsCosimulation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class supportsModelExchange_args implements org.apache.thrift.TBase<supportsModelExchange_args, supportsModelExchange_args._Fields>, java.io.Serializable, Cloneable, Comparable<supportsModelExchange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportsModelExchange_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new supportsModelExchange_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new supportsModelExchange_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportsModelExchange_args.class, metaDataMap);
    }

    public supportsModelExchange_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportsModelExchange_args(supportsModelExchange_args other) {
    }

    public supportsModelExchange_args deepCopy() {
      return new supportsModelExchange_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof supportsModelExchange_args)
        return this.equals((supportsModelExchange_args)that);
      return false;
    }

    public boolean equals(supportsModelExchange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(supportsModelExchange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("supportsModelExchange_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportsModelExchange_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsModelExchange_argsStandardScheme getScheme() {
        return new supportsModelExchange_argsStandardScheme();
      }
    }

    private static class supportsModelExchange_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<supportsModelExchange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportsModelExchange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportsModelExchange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportsModelExchange_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsModelExchange_argsTupleScheme getScheme() {
        return new supportsModelExchange_argsTupleScheme();
      }
    }

    private static class supportsModelExchange_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<supportsModelExchange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportsModelExchange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportsModelExchange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class supportsModelExchange_result implements org.apache.thrift.TBase<supportsModelExchange_result, supportsModelExchange_result._Fields>, java.io.Serializable, Cloneable, Comparable<supportsModelExchange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportsModelExchange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new supportsModelExchange_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new supportsModelExchange_resultTupleSchemeFactory();

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportsModelExchange_result.class, metaDataMap);
    }

    public supportsModelExchange_result() {
    }

    public supportsModelExchange_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportsModelExchange_result(supportsModelExchange_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public supportsModelExchange_result deepCopy() {
      return new supportsModelExchange_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public supportsModelExchange_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof supportsModelExchange_result)
        return this.equals((supportsModelExchange_result)that);
      return false;
    }

    public boolean equals(supportsModelExchange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(supportsModelExchange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("supportsModelExchange_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportsModelExchange_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsModelExchange_resultStandardScheme getScheme() {
        return new supportsModelExchange_resultStandardScheme();
      }
    }

    private static class supportsModelExchange_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<supportsModelExchange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportsModelExchange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportsModelExchange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportsModelExchange_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supportsModelExchange_resultTupleScheme getScheme() {
        return new supportsModelExchange_resultTupleScheme();
      }
    }

    private static class supportsModelExchange_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<supportsModelExchange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportsModelExchange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportsModelExchange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getModelDescriptionXml_args implements org.apache.thrift.TBase<getModelDescriptionXml_args, getModelDescriptionXml_args._Fields>, java.io.Serializable, Cloneable, Comparable<getModelDescriptionXml_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelDescriptionXml_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getModelDescriptionXml_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getModelDescriptionXml_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelDescriptionXml_args.class, metaDataMap);
    }

    public getModelDescriptionXml_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelDescriptionXml_args(getModelDescriptionXml_args other) {
    }

    public getModelDescriptionXml_args deepCopy() {
      return new getModelDescriptionXml_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelDescriptionXml_args)
        return this.equals((getModelDescriptionXml_args)that);
      return false;
    }

    public boolean equals(getModelDescriptionXml_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getModelDescriptionXml_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getModelDescriptionXml_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelDescriptionXml_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescriptionXml_argsStandardScheme getScheme() {
        return new getModelDescriptionXml_argsStandardScheme();
      }
    }

    private static class getModelDescriptionXml_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getModelDescriptionXml_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelDescriptionXml_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelDescriptionXml_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelDescriptionXml_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescriptionXml_argsTupleScheme getScheme() {
        return new getModelDescriptionXml_argsTupleScheme();
      }
    }

    private static class getModelDescriptionXml_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getModelDescriptionXml_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelDescriptionXml_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelDescriptionXml_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getModelDescriptionXml_result implements org.apache.thrift.TBase<getModelDescriptionXml_result, getModelDescriptionXml_result._Fields>, java.io.Serializable, Cloneable, Comparable<getModelDescriptionXml_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelDescriptionXml_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getModelDescriptionXml_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getModelDescriptionXml_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelDescriptionXml_result.class, metaDataMap);
    }

    public getModelDescriptionXml_result() {
    }

    public getModelDescriptionXml_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelDescriptionXml_result(getModelDescriptionXml_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getModelDescriptionXml_result deepCopy() {
      return new getModelDescriptionXml_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getModelDescriptionXml_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelDescriptionXml_result)
        return this.equals((getModelDescriptionXml_result)that);
      return false;
    }

    public boolean equals(getModelDescriptionXml_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getModelDescriptionXml_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getModelDescriptionXml_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelDescriptionXml_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescriptionXml_resultStandardScheme getScheme() {
        return new getModelDescriptionXml_resultStandardScheme();
      }
    }

    private static class getModelDescriptionXml_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getModelDescriptionXml_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelDescriptionXml_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelDescriptionXml_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelDescriptionXml_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescriptionXml_resultTupleScheme getScheme() {
        return new getModelDescriptionXml_resultTupleScheme();
      }
    }

    private static class getModelDescriptionXml_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getModelDescriptionXml_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelDescriptionXml_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelDescriptionXml_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getModelDescription_args implements org.apache.thrift.TBase<getModelDescription_args, getModelDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<getModelDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelDescription_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getModelDescription_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getModelDescription_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelDescription_args.class, metaDataMap);
    }

    public getModelDescription_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelDescription_args(getModelDescription_args other) {
    }

    public getModelDescription_args deepCopy() {
      return new getModelDescription_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelDescription_args)
        return this.equals((getModelDescription_args)that);
      return false;
    }

    public boolean equals(getModelDescription_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getModelDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getModelDescription_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelDescription_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_argsStandardScheme getScheme() {
        return new getModelDescription_argsStandardScheme();
      }
    }

    private static class getModelDescription_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getModelDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelDescription_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_argsTupleScheme getScheme() {
        return new getModelDescription_argsTupleScheme();
      }
    }

    private static class getModelDescription_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getModelDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getModelDescription_result implements org.apache.thrift.TBase<getModelDescription_result, getModelDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<getModelDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getModelDescription_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getModelDescription_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelDescription_result.class, metaDataMap);
    }

    public getModelDescription_result() {
    }

    public getModelDescription_result(
      no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelDescription_result(getModelDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = new no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription(other.success);
      }
    }

    public getModelDescription_result deepCopy() {
      return new getModelDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription getSuccess() {
      return this.success;
    }

    public getModelDescription_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelDescription_result)
        return this.equals((getModelDescription_result)that);
      return false;
    }

    public boolean equals(getModelDescription_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getModelDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getModelDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelDescription_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_resultStandardScheme getScheme() {
        return new getModelDescription_resultStandardScheme();
      }
    }

    private static class getModelDescription_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getModelDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelDescription_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_resultTupleScheme getScheme() {
        return new getModelDescription_resultTupleScheme();
      }
    }

    private static class getModelDescription_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getModelDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.ModelDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromCS_args implements org.apache.thrift.TBase<createInstanceFromCS_args, createInstanceFromCS_args._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromCS_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromCS_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromCS_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromCS_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromCS_args.class, metaDataMap);
    }

    public createInstanceFromCS_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromCS_args(createInstanceFromCS_args other) {
    }

    public createInstanceFromCS_args deepCopy() {
      return new createInstanceFromCS_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromCS_args)
        return this.equals((createInstanceFromCS_args)that);
      return false;
    }

    public boolean equals(createInstanceFromCS_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromCS_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromCS_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromCS_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_argsStandardScheme getScheme() {
        return new createInstanceFromCS_argsStandardScheme();
      }
    }

    private static class createInstanceFromCS_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromCS_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromCS_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_argsTupleScheme getScheme() {
        return new createInstanceFromCS_argsTupleScheme();
      }
    }

    private static class createInstanceFromCS_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromCS_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromCS_result implements org.apache.thrift.TBase<createInstanceFromCS_result, createInstanceFromCS_result._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromCS_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromCS_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromCS_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromCS_resultTupleSchemeFactory();

    private int success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromCS_result.class, metaDataMap);
    }

    public createInstanceFromCS_result() {
    }

    public createInstanceFromCS_result(
      int success,
      no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromCS_result(createInstanceFromCS_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException(other.ex);
      }
    }

    public createInstanceFromCS_result deepCopy() {
      return new createInstanceFromCS_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public createInstanceFromCS_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException getEx() {
      return this.ex;
    }

    public createInstanceFromCS_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromCS_result)
        return this.equals((createInstanceFromCS_result)that);
      return false;
    }

    public boolean equals(createInstanceFromCS_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromCS_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromCS_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromCS_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_resultStandardScheme getScheme() {
        return new createInstanceFromCS_resultStandardScheme();
      }
    }

    private static class createInstanceFromCS_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromCS_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromCS_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_resultTupleScheme getScheme() {
        return new createInstanceFromCS_resultTupleScheme();
      }
    }

    private static class createInstanceFromCS_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromCS_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromME_args implements org.apache.thrift.TBase<createInstanceFromME_args, createInstanceFromME_args._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromME_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromME_args");

    private static final org.apache.thrift.protocol.TField INTEGRATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("integrator", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromME_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromME_argsTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTEGRATOR((short)1, "integrator");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTEGRATOR
            return INTEGRATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTEGRATOR, new org.apache.thrift.meta_data.FieldMetaData("integrator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.Integrator.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromME_args.class, metaDataMap);
    }

    public createInstanceFromME_args() {
    }

    public createInstanceFromME_args(
      no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator)
    {
      this();
      this.integrator = integrator;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromME_args(createInstanceFromME_args other) {
      if (other.isSetIntegrator()) {
        this.integrator = new no.mechatronics.sfi.fmu_proxy.thrift.Integrator(other.integrator);
      }
    }

    public createInstanceFromME_args deepCopy() {
      return new createInstanceFromME_args(this);
    }

    @Override
    public void clear() {
      this.integrator = null;
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.Integrator getIntegrator() {
      return this.integrator;
    }

    public createInstanceFromME_args setIntegrator(no.mechatronics.sfi.fmu_proxy.thrift.Integrator integrator) {
      this.integrator = integrator;
      return this;
    }

    public void unsetIntegrator() {
      this.integrator = null;
    }

    /** Returns true if field integrator is set (has been assigned a value) and false otherwise */
    public boolean isSetIntegrator() {
      return this.integrator != null;
    }

    public void setIntegratorIsSet(boolean value) {
      if (!value) {
        this.integrator = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INTEGRATOR:
        if (value == null) {
          unsetIntegrator();
        } else {
          setIntegrator((no.mechatronics.sfi.fmu_proxy.thrift.Integrator)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INTEGRATOR:
        return getIntegrator();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INTEGRATOR:
        return isSetIntegrator();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromME_args)
        return this.equals((createInstanceFromME_args)that);
      return false;
    }

    public boolean equals(createInstanceFromME_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_integrator = true && this.isSetIntegrator();
      boolean that_present_integrator = true && that.isSetIntegrator();
      if (this_present_integrator || that_present_integrator) {
        if (!(this_present_integrator && that_present_integrator))
          return false;
        if (!this.integrator.equals(that.integrator))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIntegrator()) ? 131071 : 524287);
      if (isSetIntegrator())
        hashCode = hashCode * 8191 + integrator.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromME_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIntegrator()).compareTo(other.isSetIntegrator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntegrator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integrator, other.integrator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromME_args(");
      boolean first = true;

      sb.append("integrator:");
      if (this.integrator == null) {
        sb.append("null");
      } else {
        sb.append(this.integrator);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromME_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_argsStandardScheme getScheme() {
        return new createInstanceFromME_argsStandardScheme();
      }
    }

    private static class createInstanceFromME_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromME_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTEGRATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.integrator = new no.mechatronics.sfi.fmu_proxy.thrift.Integrator();
                struct.integrator.read(iprot);
                struct.setIntegratorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.integrator != null) {
          oprot.writeFieldBegin(INTEGRATOR_FIELD_DESC);
          struct.integrator.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromME_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_argsTupleScheme getScheme() {
        return new createInstanceFromME_argsTupleScheme();
      }
    }

    private static class createInstanceFromME_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromME_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIntegrator()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntegrator()) {
          struct.integrator.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.integrator = new no.mechatronics.sfi.fmu_proxy.thrift.Integrator();
          struct.integrator.read(iprot);
          struct.setIntegratorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromME_result implements org.apache.thrift.TBase<createInstanceFromME_result, createInstanceFromME_result._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromME_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromME_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromME_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromME_resultTupleSchemeFactory();

    private int success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromME_result.class, metaDataMap);
    }

    public createInstanceFromME_result() {
    }

    public createInstanceFromME_result(
      int success,
      no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromME_result(createInstanceFromME_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException(other.ex);
      }
    }

    public createInstanceFromME_result deepCopy() {
      return new createInstanceFromME_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public createInstanceFromME_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException getEx() {
      return this.ex;
    }

    public createInstanceFromME_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromME_result)
        return this.equals((createInstanceFromME_result)that);
      return false;
    }

    public boolean equals(createInstanceFromME_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromME_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromME_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromME_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_resultStandardScheme getScheme() {
        return new createInstanceFromME_resultStandardScheme();
      }
    }

    private static class createInstanceFromME_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromME_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromME_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_resultTupleScheme getScheme() {
        return new createInstanceFromME_resultTupleScheme();
      }
    }

    private static class createInstanceFromME_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromME_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.UnsupportedOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canGetAndSetFMUstate_args implements org.apache.thrift.TBase<canGetAndSetFMUstate_args, canGetAndSetFMUstate_args._Fields>, java.io.Serializable, Cloneable, Comparable<canGetAndSetFMUstate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canGetAndSetFMUstate_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canGetAndSetFMUstate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canGetAndSetFMUstate_argsTupleSchemeFactory();

    private int fmu_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canGetAndSetFMUstate_args.class, metaDataMap);
    }

    public canGetAndSetFMUstate_args() {
    }

    public canGetAndSetFMUstate_args(
      int fmu_id)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canGetAndSetFMUstate_args(canGetAndSetFMUstate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
    }

    public canGetAndSetFMUstate_args deepCopy() {
      return new canGetAndSetFMUstate_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public canGetAndSetFMUstate_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof canGetAndSetFMUstate_args)
        return this.equals((canGetAndSetFMUstate_args)that);
      return false;
    }

    public boolean equals(canGetAndSetFMUstate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      return hashCode;
    }

    @Override
    public int compareTo(canGetAndSetFMUstate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canGetAndSetFMUstate_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canGetAndSetFMUstate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canGetAndSetFMUstate_argsStandardScheme getScheme() {
        return new canGetAndSetFMUstate_argsStandardScheme();
      }
    }

    private static class canGetAndSetFMUstate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<canGetAndSetFMUstate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canGetAndSetFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canGetAndSetFMUstate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canGetAndSetFMUstate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canGetAndSetFMUstate_argsTupleScheme getScheme() {
        return new canGetAndSetFMUstate_argsTupleScheme();
      }
    }

    private static class canGetAndSetFMUstate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<canGetAndSetFMUstate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canGetAndSetFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canGetAndSetFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canGetAndSetFMUstate_result implements org.apache.thrift.TBase<canGetAndSetFMUstate_result, canGetAndSetFMUstate_result._Fields>, java.io.Serializable, Cloneable, Comparable<canGetAndSetFMUstate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canGetAndSetFMUstate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canGetAndSetFMUstate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canGetAndSetFMUstate_resultTupleSchemeFactory();

    private boolean success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canGetAndSetFMUstate_result.class, metaDataMap);
    }

    public canGetAndSetFMUstate_result() {
    }

    public canGetAndSetFMUstate_result(
      boolean success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canGetAndSetFMUstate_result(canGetAndSetFMUstate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex);
      }
    }

    public canGetAndSetFMUstate_result deepCopy() {
      return new canGetAndSetFMUstate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canGetAndSetFMUstate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx() {
      return this.ex;
    }

    public canGetAndSetFMUstate_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof canGetAndSetFMUstate_result)
        return this.equals((canGetAndSetFMUstate_result)that);
      return false;
    }

    public boolean equals(canGetAndSetFMUstate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canGetAndSetFMUstate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canGetAndSetFMUstate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canGetAndSetFMUstate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canGetAndSetFMUstate_resultStandardScheme getScheme() {
        return new canGetAndSetFMUstate_resultStandardScheme();
      }
    }

    private static class canGetAndSetFMUstate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<canGetAndSetFMUstate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canGetAndSetFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canGetAndSetFMUstate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canGetAndSetFMUstate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canGetAndSetFMUstate_resultTupleScheme getScheme() {
        return new canGetAndSetFMUstate_resultTupleScheme();
      }
    }

    private static class canGetAndSetFMUstate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<canGetAndSetFMUstate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canGetAndSetFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canGetAndSetFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCurrentTime_args implements org.apache.thrift.TBase<getCurrentTime_args, getCurrentTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentTime_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCurrentTime_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCurrentTime_argsTupleSchemeFactory();

    private int fmu_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentTime_args.class, metaDataMap);
    }

    public getCurrentTime_args() {
    }

    public getCurrentTime_args(
      int fmu_id)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentTime_args(getCurrentTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
    }

    public getCurrentTime_args deepCopy() {
      return new getCurrentTime_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public getCurrentTime_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentTime_args)
        return this.equals((getCurrentTime_args)that);
      return false;
    }

    public boolean equals(getCurrentTime_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      return hashCode;
    }

    @Override
    public int compareTo(getCurrentTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCurrentTime_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentTime_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCurrentTime_argsStandardScheme getScheme() {
        return new getCurrentTime_argsStandardScheme();
      }
    }

    private static class getCurrentTime_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCurrentTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentTime_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCurrentTime_argsTupleScheme getScheme() {
        return new getCurrentTime_argsTupleScheme();
      }
    }

    private static class getCurrentTime_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCurrentTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCurrentTime_result implements org.apache.thrift.TBase<getCurrentTime_result, getCurrentTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCurrentTime_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCurrentTime_resultTupleSchemeFactory();

    private double success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentTime_result.class, metaDataMap);
    }

    public getCurrentTime_result() {
    }

    public getCurrentTime_result(
      double success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentTime_result(getCurrentTime_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex);
      }
    }

    public getCurrentTime_result deepCopy() {
      return new getCurrentTime_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.ex = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public getCurrentTime_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx() {
      return this.ex;
    }

    public getCurrentTime_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentTime_result)
        return this.equals((getCurrentTime_result)that);
      return false;
    }

    public boolean equals(getCurrentTime_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCurrentTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCurrentTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentTime_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCurrentTime_resultStandardScheme getScheme() {
        return new getCurrentTime_resultStandardScheme();
      }
    }

    private static class getCurrentTime_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCurrentTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentTime_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCurrentTime_resultTupleScheme getScheme() {
        return new getCurrentTime_resultTupleScheme();
      }
    }

    private static class getCurrentTime_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCurrentTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isTerminated_args implements org.apache.thrift.TBase<isTerminated_args, isTerminated_args._Fields>, java.io.Serializable, Cloneable, Comparable<isTerminated_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTerminated_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isTerminated_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isTerminated_argsTupleSchemeFactory();

    private int fmu_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTerminated_args.class, metaDataMap);
    }

    public isTerminated_args() {
    }

    public isTerminated_args(
      int fmu_id)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isTerminated_args(isTerminated_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
    }

    public isTerminated_args deepCopy() {
      return new isTerminated_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public isTerminated_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isTerminated_args)
        return this.equals((isTerminated_args)that);
      return false;
    }

    public boolean equals(isTerminated_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      return hashCode;
    }

    @Override
    public int compareTo(isTerminated_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isTerminated_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isTerminated_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isTerminated_argsStandardScheme getScheme() {
        return new isTerminated_argsStandardScheme();
      }
    }

    private static class isTerminated_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isTerminated_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isTerminated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isTerminated_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isTerminated_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isTerminated_argsTupleScheme getScheme() {
        return new isTerminated_argsTupleScheme();
      }
    }

    private static class isTerminated_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isTerminated_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isTerminated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isTerminated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isTerminated_result implements org.apache.thrift.TBase<isTerminated_result, isTerminated_result._Fields>, java.io.Serializable, Cloneable, Comparable<isTerminated_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTerminated_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isTerminated_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isTerminated_resultTupleSchemeFactory();

    private boolean success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTerminated_result.class, metaDataMap);
    }

    public isTerminated_result() {
    }

    public isTerminated_result(
      boolean success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isTerminated_result(isTerminated_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex);
      }
    }

    public isTerminated_result deepCopy() {
      return new isTerminated_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isTerminated_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx() {
      return this.ex;
    }

    public isTerminated_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isTerminated_result)
        return this.equals((isTerminated_result)that);
      return false;
    }

    public boolean equals(isTerminated_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isTerminated_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isTerminated_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isTerminated_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isTerminated_resultStandardScheme getScheme() {
        return new isTerminated_resultStandardScheme();
      }
    }

    private static class isTerminated_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isTerminated_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isTerminated_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isTerminated_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isTerminated_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isTerminated_resultTupleScheme getScheme() {
        return new isTerminated_resultTupleScheme();
      }
    }

    private static class isTerminated_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isTerminated_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isTerminated_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isTerminated_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class init_args implements org.apache.thrift.TBase<init_args, init_args._Fields>, java.io.Serializable, Cloneable, Comparable<init_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField STOP_FIELD_DESC = new org.apache.thrift.protocol.TField("stop", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new init_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new init_argsTupleSchemeFactory();

    private int fmu_id; // required
    private double start; // required
    private double stop; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      START((short)2, "start"),
      STOP((short)3, "stop");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // START
            return START;
          case 3: // STOP
            return STOP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __STOP_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.STOP, new org.apache.thrift.meta_data.FieldMetaData("stop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_args.class, metaDataMap);
    }

    public init_args() {
    }

    public init_args(
      int fmu_id,
      double start,
      double stop)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.stop = stop;
      setStopIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_args(init_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.start = other.start;
      this.stop = other.stop;
    }

    public init_args deepCopy() {
      return new init_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setStartIsSet(false);
      this.start = 0.0;
      setStopIsSet(false);
      this.stop = 0.0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public init_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public double getStart() {
      return this.start;
    }

    public init_args setStart(double start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public double getStop() {
      return this.stop;
    }

    public init_args setStop(double stop) {
      this.stop = stop;
      setStopIsSet(true);
      return this;
    }

    public void unsetStop() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOP_ISSET_ID);
    }

    /** Returns true if field stop is set (has been assigned a value) and false otherwise */
    public boolean isSetStop() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOP_ISSET_ID);
    }

    public void setStopIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Double)value);
        }
        break;

      case STOP:
        if (value == null) {
          unsetStop();
        } else {
          setStop((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case START:
        return getStart();

      case STOP:
        return getStop();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case START:
        return isSetStart();
      case STOP:
        return isSetStop();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof init_args)
        return this.equals((init_args)that);
      return false;
    }

    public boolean equals(init_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_stop = true;
      boolean that_present_stop = true;
      if (this_present_stop || that_present_stop) {
        if (!(this_present_stop && that_present_stop))
          return false;
        if (this.stop != that.stop)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(stop);

      return hashCode;
    }

    @Override
    public int compareTo(init_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStop()).compareTo(other.isSetStop());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStop()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop, other.stop);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("init_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stop:");
      sb.append(this.stop);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public init_argsStandardScheme getScheme() {
        return new init_argsStandardScheme();
      }
    }

    private static class init_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<init_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.start = iprot.readDouble();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.stop = iprot.readDouble();
                struct.setStopIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeDouble(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STOP_FIELD_DESC);
        oprot.writeDouble(struct.stop);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public init_argsTupleScheme getScheme() {
        return new init_argsTupleScheme();
      }
    }

    private static class init_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<init_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetStop()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetStart()) {
          oprot.writeDouble(struct.start);
        }
        if (struct.isSetStop()) {
          oprot.writeDouble(struct.stop);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readDouble();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stop = iprot.readDouble();
          struct.setStopIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class init_result implements org.apache.thrift.TBase<init_result, init_result._Fields>, java.io.Serializable, Cloneable, Comparable<init_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new init_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new init_resultTupleSchemeFactory();

    private boolean success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_result.class, metaDataMap);
    }

    public init_result() {
    }

    public init_result(
      boolean success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_result(init_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex);
      }
    }

    public init_result deepCopy() {
      return new init_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public init_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx() {
      return this.ex;
    }

    public init_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof init_result)
        return this.equals((init_result)that);
      return false;
    }

    public boolean equals(init_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(init_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("init_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public init_resultStandardScheme getScheme() {
        return new init_resultStandardScheme();
      }
    }

    private static class init_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<init_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public init_resultTupleScheme getScheme() {
        return new init_resultTupleScheme();
      }
    }

    private static class init_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<init_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class step_args implements org.apache.thrift.TBase<step_args, step_args._Fields>, java.io.Serializable, Cloneable, Comparable<step_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("step_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STEP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("step_size", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new step_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new step_argsTupleSchemeFactory();

    private int fmu_id; // required
    private double step_size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      STEP_SIZE((short)2, "step_size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // STEP_SIZE
            return STEP_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __STEP_SIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.STEP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("step_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(step_args.class, metaDataMap);
    }

    public step_args() {
    }

    public step_args(
      int fmu_id,
      double step_size)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.step_size = step_size;
      setStep_sizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public step_args(step_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.step_size = other.step_size;
    }

    public step_args deepCopy() {
      return new step_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setStep_sizeIsSet(false);
      this.step_size = 0.0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public step_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public double getStep_size() {
      return this.step_size;
    }

    public step_args setStep_size(double step_size) {
      this.step_size = step_size;
      setStep_sizeIsSet(true);
      return this;
    }

    public void unsetStep_size() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STEP_SIZE_ISSET_ID);
    }

    /** Returns true if field step_size is set (has been assigned a value) and false otherwise */
    public boolean isSetStep_size() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STEP_SIZE_ISSET_ID);
    }

    public void setStep_sizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STEP_SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case STEP_SIZE:
        if (value == null) {
          unsetStep_size();
        } else {
          setStep_size((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case STEP_SIZE:
        return getStep_size();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case STEP_SIZE:
        return isSetStep_size();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof step_args)
        return this.equals((step_args)that);
      return false;
    }

    public boolean equals(step_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_step_size = true;
      boolean that_present_step_size = true;
      if (this_present_step_size || that_present_step_size) {
        if (!(this_present_step_size && that_present_step_size))
          return false;
        if (this.step_size != that.step_size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(step_size);

      return hashCode;
    }

    @Override
    public int compareTo(step_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStep_size()).compareTo(other.isSetStep_size());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStep_size()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step_size, other.step_size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("step_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("step_size:");
      sb.append(this.step_size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class step_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_argsStandardScheme getScheme() {
        return new step_argsStandardScheme();
      }
    }

    private static class step_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<step_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, step_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STEP_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.step_size = iprot.readDouble();
                struct.setStep_sizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, step_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STEP_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.step_size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class step_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_argsTupleScheme getScheme() {
        return new step_argsTupleScheme();
      }
    }

    private static class step_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<step_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, step_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetStep_size()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetStep_size()) {
          oprot.writeDouble(struct.step_size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, step_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.step_size = iprot.readDouble();
          struct.setStep_sizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class step_result implements org.apache.thrift.TBase<step_result, step_result._Fields>, java.io.Serializable, Cloneable, Comparable<step_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("step_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new step_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new step_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
       */
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(step_result.class, metaDataMap);
    }

    public step_result() {
    }

    public step_result(
      no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public step_result(step_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex);
      }
    }

    public step_result deepCopy() {
      return new step_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public step_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx() {
      return this.ex;
    }

    public step_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.StatusCode)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof step_result)
        return this.equals((step_result)that);
      return false;
    }

    public boolean equals(step_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(step_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("step_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class step_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_resultStandardScheme getScheme() {
        return new step_resultStandardScheme();
      }
    }

    private static class step_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<step_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, step_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, step_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class step_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_resultTupleScheme getScheme() {
        return new step_resultTupleScheme();
      }
    }

    private static class step_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<step_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, step_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, step_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminate_args implements org.apache.thrift.TBase<terminate_args, terminate_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminate_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_argsTupleSchemeFactory();

    private int fmu_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_args.class, metaDataMap);
    }

    public terminate_args() {
    }

    public terminate_args(
      int fmu_id)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminate_args(terminate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
    }

    public terminate_args deepCopy() {
      return new terminate_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public terminate_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminate_args)
        return this.equals((terminate_args)that);
      return false;
    }

    public boolean equals(terminate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      return hashCode;
    }

    @Override
    public int compareTo(terminate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_argsStandardScheme getScheme() {
        return new terminate_argsStandardScheme();
      }
    }

    private static class terminate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_argsTupleScheme getScheme() {
        return new terminate_argsTupleScheme();
      }
    }

    private static class terminate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminate_result implements org.apache.thrift.TBase<terminate_result, terminate_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_resultTupleSchemeFactory();

    private boolean success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_result.class, metaDataMap);
    }

    public terminate_result() {
    }

    public terminate_result(
      boolean success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminate_result(terminate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex);
      }
    }

    public terminate_result deepCopy() {
      return new terminate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public terminate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx() {
      return this.ex;
    }

    public terminate_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminate_result)
        return this.equals((terminate_result)that);
      return false;
    }

    public boolean equals(terminate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_resultStandardScheme getScheme() {
        return new terminate_resultStandardScheme();
      }
    }

    private static class terminate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_resultTupleScheme getScheme() {
        return new terminate_resultTupleScheme();
      }
    }

    private static class terminate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reset_args implements org.apache.thrift.TBase<reset_args, reset_args._Fields>, java.io.Serializable, Cloneable, Comparable<reset_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reset_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reset_argsTupleSchemeFactory();

    private int fmu_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_args.class, metaDataMap);
    }

    public reset_args() {
    }

    public reset_args(
      int fmu_id)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_args(reset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
    }

    public reset_args deepCopy() {
      return new reset_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public reset_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_args)
        return this.equals((reset_args)that);
      return false;
    }

    public boolean equals(reset_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      return hashCode;
    }

    @Override
    public int compareTo(reset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reset_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_argsStandardScheme getScheme() {
        return new reset_argsStandardScheme();
      }
    }

    private static class reset_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_argsTupleScheme getScheme() {
        return new reset_argsTupleScheme();
      }
    }

    private static class reset_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reset_result implements org.apache.thrift.TBase<reset_result, reset_result._Fields>, java.io.Serializable, Cloneable, Comparable<reset_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reset_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reset_resultTupleSchemeFactory();

    private boolean success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_result.class, metaDataMap);
    }

    public reset_result() {
    }

    public reset_result(
      boolean success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_result(reset_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex);
      }
    }

    public reset_result deepCopy() {
      return new reset_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public reset_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx() {
      return this.ex;
    }

    public reset_result setEx(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_result)
        return this.equals((reset_result)that);
      return false;
    }

    public boolean equals(reset_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reset_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_resultStandardScheme getScheme() {
        return new reset_resultStandardScheme();
      }
    }

    private static class reset_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_resultTupleScheme getScheme() {
        return new reset_resultTupleScheme();
      }
    }

    private static class reset_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readInt_args implements org.apache.thrift.TBase<readInt_args, readInt_args._Fields>, java.io.Serializable, Cloneable, Comparable<readInt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readInt_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readInt_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readInt_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readInt_args.class, metaDataMap);
    }

    public readInt_args() {
    }

    public readInt_args(
      int fmu_id,
      int vr)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readInt_args(readInt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
    }

    public readInt_args deepCopy() {
      return new readInt_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public readInt_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public readInt_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readInt_args)
        return this.equals((readInt_args)that);
      return false;
    }

    public boolean equals(readInt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      return hashCode;
    }

    @Override
    public int compareTo(readInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readInt_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readInt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInt_argsStandardScheme getScheme() {
        return new readInt_argsStandardScheme();
      }
    }

    private static class readInt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readInt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readInt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readInt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInt_argsTupleScheme getScheme() {
        return new readInt_argsTupleScheme();
      }
    }

    private static class readInt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readInt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readInt_result implements org.apache.thrift.TBase<readInt_result, readInt_result._Fields>, java.io.Serializable, Cloneable, Comparable<readInt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readInt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readInt_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readInt_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.IntRead success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.IntRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readInt_result.class, metaDataMap);
    }

    public readInt_result() {
    }

    public readInt_result(
      no.mechatronics.sfi.fmu_proxy.thrift.IntRead success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readInt_result(readInt_result other) {
      if (other.isSetSuccess()) {
        this.success = new no.mechatronics.sfi.fmu_proxy.thrift.IntRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public readInt_result deepCopy() {
      return new readInt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.IntRead getSuccess() {
      return this.success;
    }

    public readInt_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.IntRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public readInt_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readInt_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.IntRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readInt_result)
        return this.equals((readInt_result)that);
      return false;
    }

    public boolean equals(readInt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readInt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInt_resultStandardScheme getScheme() {
        return new readInt_resultStandardScheme();
      }
    }

    private static class readInt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readInt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.IntRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readInt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readInt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInt_resultTupleScheme getScheme() {
        return new readInt_resultTupleScheme();
      }
    }

    private static class readInt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readInt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.IntRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readReal_args implements org.apache.thrift.TBase<readReal_args, readReal_args._Fields>, java.io.Serializable, Cloneable, Comparable<readReal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readReal_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readReal_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readReal_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readReal_args.class, metaDataMap);
    }

    public readReal_args() {
    }

    public readReal_args(
      int fmu_id,
      int vr)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readReal_args(readReal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
    }

    public readReal_args deepCopy() {
      return new readReal_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public readReal_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public readReal_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readReal_args)
        return this.equals((readReal_args)that);
      return false;
    }

    public boolean equals(readReal_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      return hashCode;
    }

    @Override
    public int compareTo(readReal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readReal_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readReal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_argsStandardScheme getScheme() {
        return new readReal_argsStandardScheme();
      }
    }

    private static class readReal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readReal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readReal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readReal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_argsTupleScheme getScheme() {
        return new readReal_argsTupleScheme();
      }
    }

    private static class readReal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readReal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readReal_result implements org.apache.thrift.TBase<readReal_result, readReal_result._Fields>, java.io.Serializable, Cloneable, Comparable<readReal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readReal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readReal_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readReal_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.RealRead success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.RealRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readReal_result.class, metaDataMap);
    }

    public readReal_result() {
    }

    public readReal_result(
      no.mechatronics.sfi.fmu_proxy.thrift.RealRead success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readReal_result(readReal_result other) {
      if (other.isSetSuccess()) {
        this.success = new no.mechatronics.sfi.fmu_proxy.thrift.RealRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public readReal_result deepCopy() {
      return new readReal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.RealRead getSuccess() {
      return this.success;
    }

    public readReal_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.RealRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public readReal_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readReal_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.RealRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readReal_result)
        return this.equals((readReal_result)that);
      return false;
    }

    public boolean equals(readReal_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readReal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readReal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readReal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_resultStandardScheme getScheme() {
        return new readReal_resultStandardScheme();
      }
    }

    private static class readReal_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readReal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.RealRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readReal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readReal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_resultTupleScheme getScheme() {
        return new readReal_resultTupleScheme();
      }
    }

    private static class readReal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readReal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.RealRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readString_args implements org.apache.thrift.TBase<readString_args, readString_args._Fields>, java.io.Serializable, Cloneable, Comparable<readString_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readString_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readString_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readString_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readString_args.class, metaDataMap);
    }

    public readString_args() {
    }

    public readString_args(
      int fmu_id,
      int vr)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readString_args(readString_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
    }

    public readString_args deepCopy() {
      return new readString_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public readString_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public readString_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readString_args)
        return this.equals((readString_args)that);
      return false;
    }

    public boolean equals(readString_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      return hashCode;
    }

    @Override
    public int compareTo(readString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readString_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_argsStandardScheme getScheme() {
        return new readString_argsStandardScheme();
      }
    }

    private static class readString_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_argsTupleScheme getScheme() {
        return new readString_argsTupleScheme();
      }
    }

    private static class readString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readString_result implements org.apache.thrift.TBase<readString_result, readString_result._Fields>, java.io.Serializable, Cloneable, Comparable<readString_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readString_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readString_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.StringRead success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.StringRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readString_result.class, metaDataMap);
    }

    public readString_result() {
    }

    public readString_result(
      no.mechatronics.sfi.fmu_proxy.thrift.StringRead success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readString_result(readString_result other) {
      if (other.isSetSuccess()) {
        this.success = new no.mechatronics.sfi.fmu_proxy.thrift.StringRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public readString_result deepCopy() {
      return new readString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.StringRead getSuccess() {
      return this.success;
    }

    public readString_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.StringRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public readString_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readString_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.StringRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readString_result)
        return this.equals((readString_result)that);
      return false;
    }

    public boolean equals(readString_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_resultStandardScheme getScheme() {
        return new readString_resultStandardScheme();
      }
    }

    private static class readString_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.StringRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_resultTupleScheme getScheme() {
        return new readString_resultTupleScheme();
      }
    }

    private static class readString_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.StringRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readBoolen_args implements org.apache.thrift.TBase<readBoolen_args, readBoolen_args._Fields>, java.io.Serializable, Cloneable, Comparable<readBoolen_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readBoolen_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readBoolen_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readBoolen_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readBoolen_args.class, metaDataMap);
    }

    public readBoolen_args() {
    }

    public readBoolen_args(
      int fmu_id,
      int vr)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBoolen_args(readBoolen_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
    }

    public readBoolen_args deepCopy() {
      return new readBoolen_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public readBoolen_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public readBoolen_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readBoolen_args)
        return this.equals((readBoolen_args)that);
      return false;
    }

    public boolean equals(readBoolen_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      return hashCode;
    }

    @Override
    public int compareTo(readBoolen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readBoolen_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readBoolen_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolen_argsStandardScheme getScheme() {
        return new readBoolen_argsStandardScheme();
      }
    }

    private static class readBoolen_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readBoolen_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readBoolen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readBoolen_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readBoolen_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolen_argsTupleScheme getScheme() {
        return new readBoolen_argsTupleScheme();
      }
    }

    private static class readBoolen_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readBoolen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readBoolen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readBoolen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readBoolen_result implements org.apache.thrift.TBase<readBoolen_result, readBoolen_result._Fields>, java.io.Serializable, Cloneable, Comparable<readBoolen_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readBoolen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readBoolen_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readBoolen_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.BoolRead success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.BoolRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readBoolen_result.class, metaDataMap);
    }

    public readBoolen_result() {
    }

    public readBoolen_result(
      no.mechatronics.sfi.fmu_proxy.thrift.BoolRead success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBoolen_result(readBoolen_result other) {
      if (other.isSetSuccess()) {
        this.success = new no.mechatronics.sfi.fmu_proxy.thrift.BoolRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public readBoolen_result deepCopy() {
      return new readBoolen_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.BoolRead getSuccess() {
      return this.success;
    }

    public readBoolen_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.BoolRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public readBoolen_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readBoolen_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.BoolRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readBoolen_result)
        return this.equals((readBoolen_result)that);
      return false;
    }

    public boolean equals(readBoolen_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readBoolen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readBoolen_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readBoolen_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolen_resultStandardScheme getScheme() {
        return new readBoolen_resultStandardScheme();
      }
    }

    private static class readBoolen_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readBoolen_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readBoolen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.BoolRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readBoolen_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readBoolen_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolen_resultTupleScheme getScheme() {
        return new readBoolen_resultTupleScheme();
      }
    }

    private static class readBoolen_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readBoolen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readBoolen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readBoolen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new no.mechatronics.sfi.fmu_proxy.thrift.BoolRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeInt_args implements org.apache.thrift.TBase<writeInt_args, writeInt_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeInt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeInt_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeInt_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeInt_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required
    private int value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private static final int __VALUE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeInt_args.class, metaDataMap);
    }

    public writeInt_args() {
    }

    public writeInt_args(
      int fmu_id,
      int vr,
      int value)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeInt_args(writeInt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
      this.value = other.value;
    }

    public writeInt_args deepCopy() {
      return new writeInt_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
      setValueIsSet(false);
      this.value = 0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public writeInt_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public writeInt_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public int getValue() {
      return this.value;
    }

    public writeInt_args setValue(int value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeInt_args)
        return this.equals((writeInt_args)that);
      return false;
    }

    public boolean equals(writeInt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      hashCode = hashCode * 8191 + value;

      return hashCode;
    }

    @Override
    public int compareTo(writeInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeInt_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeInt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInt_argsStandardScheme getScheme() {
        return new writeInt_argsStandardScheme();
      }
    }

    private static class writeInt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeInt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.value = iprot.readI32();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeInt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeI32(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeInt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInt_argsTupleScheme getScheme() {
        return new writeInt_argsTupleScheme();
      }
    }

    private static class writeInt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeInt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
        if (struct.isSetValue()) {
          oprot.writeI32(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readI32();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeInt_result implements org.apache.thrift.TBase<writeInt_result, writeInt_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeInt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeInt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeInt_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeInt_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeInt_result.class, metaDataMap);
    }

    public writeInt_result() {
    }

    public writeInt_result(
      no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeInt_result(writeInt_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public writeInt_result deepCopy() {
      return new writeInt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public writeInt_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public writeInt_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeInt_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.StatusCode)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeInt_result)
        return this.equals((writeInt_result)that);
      return false;
    }

    public boolean equals(writeInt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeInt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInt_resultStandardScheme getScheme() {
        return new writeInt_resultStandardScheme();
      }
    }

    private static class writeInt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeInt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeInt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeInt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInt_resultTupleScheme getScheme() {
        return new writeInt_resultTupleScheme();
      }
    }

    private static class writeInt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeInt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeReal_args implements org.apache.thrift.TBase<writeReal_args, writeReal_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeReal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeReal_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeReal_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeReal_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required
    private double value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private static final int __VALUE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeReal_args.class, metaDataMap);
    }

    public writeReal_args() {
    }

    public writeReal_args(
      int fmu_id,
      int vr,
      double value)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeReal_args(writeReal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
      this.value = other.value;
    }

    public writeReal_args deepCopy() {
      return new writeReal_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
      setValueIsSet(false);
      this.value = 0.0;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public writeReal_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public writeReal_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public double getValue() {
      return this.value;
    }

    public writeReal_args setValue(double value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeReal_args)
        return this.equals((writeReal_args)that);
      return false;
    }

    public boolean equals(writeReal_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(value);

      return hashCode;
    }

    @Override
    public int compareTo(writeReal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeReal_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeReal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_argsStandardScheme getScheme() {
        return new writeReal_argsStandardScheme();
      }
    }

    private static class writeReal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeReal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.value = iprot.readDouble();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeReal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeDouble(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeReal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_argsTupleScheme getScheme() {
        return new writeReal_argsTupleScheme();
      }
    }

    private static class writeReal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeReal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
        if (struct.isSetValue()) {
          oprot.writeDouble(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readDouble();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeReal_result implements org.apache.thrift.TBase<writeReal_result, writeReal_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeReal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeReal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeReal_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeReal_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeReal_result.class, metaDataMap);
    }

    public writeReal_result() {
    }

    public writeReal_result(
      no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeReal_result(writeReal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public writeReal_result deepCopy() {
      return new writeReal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public writeReal_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public writeReal_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeReal_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.StatusCode)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeReal_result)
        return this.equals((writeReal_result)that);
      return false;
    }

    public boolean equals(writeReal_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeReal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeReal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeReal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_resultStandardScheme getScheme() {
        return new writeReal_resultStandardScheme();
      }
    }

    private static class writeReal_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeReal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeReal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeReal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_resultTupleScheme getScheme() {
        return new writeReal_resultTupleScheme();
      }
    }

    private static class writeReal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeReal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeString_args implements org.apache.thrift.TBase<writeString_args, writeString_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeString_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeString_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeString_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeString_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required
    private java.lang.String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeString_args.class, metaDataMap);
    }

    public writeString_args() {
    }

    public writeString_args(
      int fmu_id,
      int vr,
      java.lang.String value)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeString_args(writeString_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public writeString_args deepCopy() {
      return new writeString_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
      this.value = null;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public writeString_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public writeString_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public java.lang.String getValue() {
      return this.value;
    }

    public writeString_args setValue(java.lang.String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeString_args)
        return this.equals((writeString_args)that);
      return false;
    }

    public boolean equals(writeString_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeString_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_argsStandardScheme getScheme() {
        return new writeString_argsStandardScheme();
      }
    }

    private static class writeString_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_argsTupleScheme getScheme() {
        return new writeString_argsTupleScheme();
      }
    }

    private static class writeString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeString_result implements org.apache.thrift.TBase<writeString_result, writeString_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeString_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeString_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeString_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeString_result.class, metaDataMap);
    }

    public writeString_result() {
    }

    public writeString_result(
      no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeString_result(writeString_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public writeString_result deepCopy() {
      return new writeString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public writeString_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public writeString_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeString_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.StatusCode)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeString_result)
        return this.equals((writeString_result)that);
      return false;
    }

    public boolean equals(writeString_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_resultStandardScheme getScheme() {
        return new writeString_resultStandardScheme();
      }
    }

    private static class writeString_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_resultTupleScheme getScheme() {
        return new writeString_resultTupleScheme();
      }
    }

    private static class writeString_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeBoolen_args implements org.apache.thrift.TBase<writeBoolen_args, writeBoolen_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeBoolen_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeBoolen_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmu_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeBoolen_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeBoolen_argsTupleSchemeFactory();

    private int fmu_id; // required
    private int vr; // required
    private boolean value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmu_id"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FMU_ID_ISSET_ID = 0;
    private static final int __VR_ISSET_ID = 1;
    private static final int __VALUE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmu_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "FmuId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ValueReference")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeBoolen_args.class, metaDataMap);
    }

    public writeBoolen_args() {
    }

    public writeBoolen_args(
      int fmu_id,
      int vr,
      boolean value)
    {
      this();
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      this.vr = vr;
      setVrIsSet(true);
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeBoolen_args(writeBoolen_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fmu_id = other.fmu_id;
      this.vr = other.vr;
      this.value = other.value;
    }

    public writeBoolen_args deepCopy() {
      return new writeBoolen_args(this);
    }

    @Override
    public void clear() {
      setFmu_idIsSet(false);
      this.fmu_id = 0;
      setVrIsSet(false);
      this.vr = 0;
      setValueIsSet(false);
      this.value = false;
    }

    public int getFmu_id() {
      return this.fmu_id;
    }

    public writeBoolen_args setFmu_id(int fmu_id) {
      this.fmu_id = fmu_id;
      setFmu_idIsSet(true);
      return this;
    }

    public void unsetFmu_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    /** Returns true if field fmu_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFmu_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FMU_ID_ISSET_ID);
    }

    public void setFmu_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FMU_ID_ISSET_ID, value);
    }

    public int getVr() {
      return this.vr;
    }

    public writeBoolen_args setVr(int vr) {
      this.vr = vr;
      setVrIsSet(true);
      return this;
    }

    public void unsetVr() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VR_ISSET_ID);
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VR_ISSET_ID);
    }

    public void setVrIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VR_ISSET_ID, value);
    }

    public boolean isValue() {
      return this.value;
    }

    public writeBoolen_args setValue(boolean value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmu_id();
        } else {
          setFmu_id((java.lang.Integer)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.lang.Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmu_id();

      case VR:
        return getVr();

      case VALUE:
        return isValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmu_id();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeBoolen_args)
        return this.equals((writeBoolen_args)that);
      return false;
    }

    public boolean equals(writeBoolen_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmu_id = true;
      boolean that_present_fmu_id = true;
      if (this_present_fmu_id || that_present_fmu_id) {
        if (!(this_present_fmu_id && that_present_fmu_id))
          return false;
        if (this.fmu_id != that.fmu_id)
          return false;
      }

      boolean this_present_vr = true;
      boolean that_present_vr = true;
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (this.vr != that.vr)
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fmu_id;

      hashCode = hashCode * 8191 + vr;

      hashCode = hashCode * 8191 + ((value) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(writeBoolen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmu_id()).compareTo(other.isSetFmu_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmu_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmu_id, other.fmu_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeBoolen_args(");
      boolean first = true;

      sb.append("fmu_id:");
      sb.append(this.fmu_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      sb.append(this.vr);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeBoolen_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolen_argsStandardScheme getScheme() {
        return new writeBoolen_argsStandardScheme();
      }
    }

    private static class writeBoolen_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeBoolen_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeBoolen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fmu_id = iprot.readI32();
                struct.setFmu_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vr = iprot.readI32();
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.value = iprot.readBool();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeBoolen_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
        oprot.writeI32(struct.fmu_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeI32(struct.vr);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBool(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeBoolen_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolen_argsTupleScheme getScheme() {
        return new writeBoolen_argsTupleScheme();
      }
    }

    private static class writeBoolen_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeBoolen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeBoolen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmu_id()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFmu_id()) {
          oprot.writeI32(struct.fmu_id);
        }
        if (struct.isSetVr()) {
          oprot.writeI32(struct.vr);
        }
        if (struct.isSetValue()) {
          oprot.writeBool(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeBoolen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fmu_id = iprot.readI32();
          struct.setFmu_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vr = iprot.readI32();
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readBool();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeBoolen_result implements org.apache.thrift.TBase<writeBoolen_result, writeBoolen_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeBoolen_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeBoolen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeBoolen_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeBoolen_resultTupleSchemeFactory();

    private no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1; // required
    private no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeBoolen_result.class, metaDataMap);
    }

    public writeBoolen_result() {
    }

    public writeBoolen_result(
      no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1,
      no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeBoolen_result(writeBoolen_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException(other.ex2);
      }
    }

    public writeBoolen_result deepCopy() {
      return new writeBoolen_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public no.mechatronics.sfi.fmu_proxy.thrift.StatusCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see no.mechatronics.sfi.fmu_proxy.thrift.StatusCode
     */
    public writeBoolen_result setSuccess(no.mechatronics.sfi.fmu_proxy.thrift.StatusCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException getEx1() {
      return this.ex1;
    }

    public writeBoolen_result setEx1(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeBoolen_result setEx2(no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((no.mechatronics.sfi.fmu_proxy.thrift.StatusCode)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeBoolen_result)
        return this.equals((writeBoolen_result)that);
      return false;
    }

    public boolean equals(writeBoolen_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeBoolen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeBoolen_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeBoolen_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolen_resultStandardScheme getScheme() {
        return new writeBoolen_resultStandardScheme();
      }
    }

    private static class writeBoolen_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeBoolen_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeBoolen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeBoolen_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeBoolen_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolen_resultTupleScheme getScheme() {
        return new writeBoolen_resultTupleScheme();
      }
    }

    private static class writeBoolen_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeBoolen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeBoolen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeBoolen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.mechatronics.sfi.fmu_proxy.thrift.StatusCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchFmuException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new no.mechatronics.sfi.fmu_proxy.thrift.NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.ntnu.ihb.fmuproxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-01-21")
public class ModelDescription implements org.apache.thrift.TBase<ModelDescription, ModelDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ModelDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelDescription");

  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FMI_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fmiVersion", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("modelName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COPYRIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("copyright", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GENERATION_TOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("generationTool", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField GENERATION_DATE_AND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("generationDateAndTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DEFAULT_EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultExperiment", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField VARIABLE_NAMING_CONVENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("variableNamingConvention", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MODEL_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("modelVariables", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MODEL_STRUCTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("modelStructure", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModelDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModelDescriptionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String guid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fmiVersion; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String modelName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String license; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String copyright; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String author; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String version; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String generationTool; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String generationDateAndTime; // optional
  public @org.apache.thrift.annotation.Nullable DefaultExperiment defaultExperiment; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String variableNamingConvention; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ScalarVariable> modelVariables; // required
  public @org.apache.thrift.annotation.Nullable ModelStructure modelStructure; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUID((short)1, "guid"),
    FMI_VERSION((short)2, "fmiVersion"),
    MODEL_NAME((short)3, "modelName"),
    LICENSE((short)4, "license"),
    COPYRIGHT((short)5, "copyright"),
    AUTHOR((short)6, "author"),
    VERSION((short)7, "version"),
    DESCRIPTION((short)8, "description"),
    GENERATION_TOOL((short)9, "generationTool"),
    GENERATION_DATE_AND_TIME((short)10, "generationDateAndTime"),
    DEFAULT_EXPERIMENT((short)11, "defaultExperiment"),
    VARIABLE_NAMING_CONVENTION((short)12, "variableNamingConvention"),
    MODEL_VARIABLES((short)13, "modelVariables"),
    MODEL_STRUCTURE((short)14, "modelStructure");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUID
          return GUID;
        case 2: // FMI_VERSION
          return FMI_VERSION;
        case 3: // MODEL_NAME
          return MODEL_NAME;
        case 4: // LICENSE
          return LICENSE;
        case 5: // COPYRIGHT
          return COPYRIGHT;
        case 6: // AUTHOR
          return AUTHOR;
        case 7: // VERSION
          return VERSION;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // GENERATION_TOOL
          return GENERATION_TOOL;
        case 10: // GENERATION_DATE_AND_TIME
          return GENERATION_DATE_AND_TIME;
        case 11: // DEFAULT_EXPERIMENT
          return DEFAULT_EXPERIMENT;
        case 12: // VARIABLE_NAMING_CONVENTION
          return VARIABLE_NAMING_CONVENTION;
        case 13: // MODEL_VARIABLES
          return MODEL_VARIABLES;
        case 14: // MODEL_STRUCTURE
          return MODEL_STRUCTURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LICENSE,_Fields.COPYRIGHT,_Fields.AUTHOR,_Fields.VERSION,_Fields.DESCRIPTION,_Fields.GENERATION_TOOL,_Fields.GENERATION_DATE_AND_TIME,_Fields.DEFAULT_EXPERIMENT,_Fields.VARIABLE_NAMING_CONVENTION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FMI_VERSION, new org.apache.thrift.meta_data.FieldMetaData("fmiVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("modelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COPYRIGHT, new org.apache.thrift.meta_data.FieldMetaData("copyright", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERATION_TOOL, new org.apache.thrift.meta_data.FieldMetaData("generationTool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERATION_DATE_AND_TIME, new org.apache.thrift.meta_data.FieldMetaData("generationDateAndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("defaultExperiment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DefaultExperiment.class)));
    tmpMap.put(_Fields.VARIABLE_NAMING_CONVENTION, new org.apache.thrift.meta_data.FieldMetaData("variableNamingConvention", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("modelVariables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ModelVariables")));
    tmpMap.put(_Fields.MODEL_STRUCTURE, new org.apache.thrift.meta_data.FieldMetaData("modelStructure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelStructure.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelDescription.class, metaDataMap);
  }

  public ModelDescription() {
  }

  public ModelDescription(
    java.lang.String guid,
    java.lang.String fmiVersion,
    java.lang.String modelName,
    java.util.List<ScalarVariable> modelVariables,
    ModelStructure modelStructure)
  {
    this();
    this.guid = guid;
    this.fmiVersion = fmiVersion;
    this.modelName = modelName;
    this.modelVariables = modelVariables;
    this.modelStructure = modelStructure;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelDescription(ModelDescription other) {
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    if (other.isSetFmiVersion()) {
      this.fmiVersion = other.fmiVersion;
    }
    if (other.isSetModelName()) {
      this.modelName = other.modelName;
    }
    if (other.isSetLicense()) {
      this.license = other.license;
    }
    if (other.isSetCopyright()) {
      this.copyright = other.copyright;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetGenerationTool()) {
      this.generationTool = other.generationTool;
    }
    if (other.isSetGenerationDateAndTime()) {
      this.generationDateAndTime = other.generationDateAndTime;
    }
    if (other.isSetDefaultExperiment()) {
      this.defaultExperiment = new DefaultExperiment(other.defaultExperiment);
    }
    if (other.isSetVariableNamingConvention()) {
      this.variableNamingConvention = other.variableNamingConvention;
    }
    if (other.isSetModelVariables()) {
      java.util.List<ScalarVariable> __this__modelVariables = new java.util.ArrayList<ScalarVariable>(other.modelVariables.size());
      for (ScalarVariable other_element : other.modelVariables) {
        __this__modelVariables.add(new ScalarVariable(other_element));
      }
      this.modelVariables = __this__modelVariables;
    }
    if (other.isSetModelStructure()) {
      this.modelStructure = new ModelStructure(other.modelStructure);
    }
  }

  public ModelDescription deepCopy() {
    return new ModelDescription(this);
  }

  @Override
  public void clear() {
    this.guid = null;
    this.fmiVersion = null;
    this.modelName = null;
    this.license = null;
    this.copyright = null;
    this.author = null;
    this.version = null;
    this.description = null;
    this.generationTool = null;
    this.generationDateAndTime = null;
    this.defaultExperiment = null;
    this.variableNamingConvention = null;
    this.modelVariables = null;
    this.modelStructure = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGuid() {
    return this.guid;
  }

  public ModelDescription setGuid(@org.apache.thrift.annotation.Nullable java.lang.String guid) {
    this.guid = guid;
    return this;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFmiVersion() {
    return this.fmiVersion;
  }

  public ModelDescription setFmiVersion(@org.apache.thrift.annotation.Nullable java.lang.String fmiVersion) {
    this.fmiVersion = fmiVersion;
    return this;
  }

  public void unsetFmiVersion() {
    this.fmiVersion = null;
  }

  /** Returns true if field fmiVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetFmiVersion() {
    return this.fmiVersion != null;
  }

  public void setFmiVersionIsSet(boolean value) {
    if (!value) {
      this.fmiVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getModelName() {
    return this.modelName;
  }

  public ModelDescription setModelName(@org.apache.thrift.annotation.Nullable java.lang.String modelName) {
    this.modelName = modelName;
    return this;
  }

  public void unsetModelName() {
    this.modelName = null;
  }

  /** Returns true if field modelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.modelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.modelName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLicense() {
    return this.license;
  }

  public ModelDescription setLicense(@org.apache.thrift.annotation.Nullable java.lang.String license) {
    this.license = license;
    return this;
  }

  public void unsetLicense() {
    this.license = null;
  }

  /** Returns true if field license is set (has been assigned a value) and false otherwise */
  public boolean isSetLicense() {
    return this.license != null;
  }

  public void setLicenseIsSet(boolean value) {
    if (!value) {
      this.license = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCopyright() {
    return this.copyright;
  }

  public ModelDescription setCopyright(@org.apache.thrift.annotation.Nullable java.lang.String copyright) {
    this.copyright = copyright;
    return this;
  }

  public void unsetCopyright() {
    this.copyright = null;
  }

  /** Returns true if field copyright is set (has been assigned a value) and false otherwise */
  public boolean isSetCopyright() {
    return this.copyright != null;
  }

  public void setCopyrightIsSet(boolean value) {
    if (!value) {
      this.copyright = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthor() {
    return this.author;
  }

  public ModelDescription setAuthor(@org.apache.thrift.annotation.Nullable java.lang.String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.version;
  }

  public ModelDescription setVersion(@org.apache.thrift.annotation.Nullable java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public ModelDescription setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGenerationTool() {
    return this.generationTool;
  }

  public ModelDescription setGenerationTool(@org.apache.thrift.annotation.Nullable java.lang.String generationTool) {
    this.generationTool = generationTool;
    return this;
  }

  public void unsetGenerationTool() {
    this.generationTool = null;
  }

  /** Returns true if field generationTool is set (has been assigned a value) and false otherwise */
  public boolean isSetGenerationTool() {
    return this.generationTool != null;
  }

  public void setGenerationToolIsSet(boolean value) {
    if (!value) {
      this.generationTool = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGenerationDateAndTime() {
    return this.generationDateAndTime;
  }

  public ModelDescription setGenerationDateAndTime(@org.apache.thrift.annotation.Nullable java.lang.String generationDateAndTime) {
    this.generationDateAndTime = generationDateAndTime;
    return this;
  }

  public void unsetGenerationDateAndTime() {
    this.generationDateAndTime = null;
  }

  /** Returns true if field generationDateAndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetGenerationDateAndTime() {
    return this.generationDateAndTime != null;
  }

  public void setGenerationDateAndTimeIsSet(boolean value) {
    if (!value) {
      this.generationDateAndTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DefaultExperiment getDefaultExperiment() {
    return this.defaultExperiment;
  }

  public ModelDescription setDefaultExperiment(@org.apache.thrift.annotation.Nullable DefaultExperiment defaultExperiment) {
    this.defaultExperiment = defaultExperiment;
    return this;
  }

  public void unsetDefaultExperiment() {
    this.defaultExperiment = null;
  }

  /** Returns true if field defaultExperiment is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultExperiment() {
    return this.defaultExperiment != null;
  }

  public void setDefaultExperimentIsSet(boolean value) {
    if (!value) {
      this.defaultExperiment = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVariableNamingConvention() {
    return this.variableNamingConvention;
  }

  public ModelDescription setVariableNamingConvention(@org.apache.thrift.annotation.Nullable java.lang.String variableNamingConvention) {
    this.variableNamingConvention = variableNamingConvention;
    return this;
  }

  public void unsetVariableNamingConvention() {
    this.variableNamingConvention = null;
  }

  /** Returns true if field variableNamingConvention is set (has been assigned a value) and false otherwise */
  public boolean isSetVariableNamingConvention() {
    return this.variableNamingConvention != null;
  }

  public void setVariableNamingConventionIsSet(boolean value) {
    if (!value) {
      this.variableNamingConvention = null;
    }
  }

  public int getModelVariablesSize() {
    return (this.modelVariables == null) ? 0 : this.modelVariables.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ScalarVariable> getModelVariablesIterator() {
    return (this.modelVariables == null) ? null : this.modelVariables.iterator();
  }

  public void addToModelVariables(ScalarVariable elem) {
    if (this.modelVariables == null) {
      this.modelVariables = new java.util.ArrayList<ScalarVariable>();
    }
    this.modelVariables.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ScalarVariable> getModelVariables() {
    return this.modelVariables;
  }

  public ModelDescription setModelVariables(@org.apache.thrift.annotation.Nullable java.util.List<ScalarVariable> modelVariables) {
    this.modelVariables = modelVariables;
    return this;
  }

  public void unsetModelVariables() {
    this.modelVariables = null;
  }

  /** Returns true if field modelVariables is set (has been assigned a value) and false otherwise */
  public boolean isSetModelVariables() {
    return this.modelVariables != null;
  }

  public void setModelVariablesIsSet(boolean value) {
    if (!value) {
      this.modelVariables = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ModelStructure getModelStructure() {
    return this.modelStructure;
  }

  public ModelDescription setModelStructure(@org.apache.thrift.annotation.Nullable ModelStructure modelStructure) {
    this.modelStructure = modelStructure;
    return this;
  }

  public void unsetModelStructure() {
    this.modelStructure = null;
  }

  /** Returns true if field modelStructure is set (has been assigned a value) and false otherwise */
  public boolean isSetModelStructure() {
    return this.modelStructure != null;
  }

  public void setModelStructureIsSet(boolean value) {
    if (!value) {
      this.modelStructure = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((java.lang.String)value);
      }
      break;

    case FMI_VERSION:
      if (value == null) {
        unsetFmiVersion();
      } else {
        setFmiVersion((java.lang.String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((java.lang.String)value);
      }
      break;

    case LICENSE:
      if (value == null) {
        unsetLicense();
      } else {
        setLicense((java.lang.String)value);
      }
      break;

    case COPYRIGHT:
      if (value == null) {
        unsetCopyright();
      } else {
        setCopyright((java.lang.String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case GENERATION_TOOL:
      if (value == null) {
        unsetGenerationTool();
      } else {
        setGenerationTool((java.lang.String)value);
      }
      break;

    case GENERATION_DATE_AND_TIME:
      if (value == null) {
        unsetGenerationDateAndTime();
      } else {
        setGenerationDateAndTime((java.lang.String)value);
      }
      break;

    case DEFAULT_EXPERIMENT:
      if (value == null) {
        unsetDefaultExperiment();
      } else {
        setDefaultExperiment((DefaultExperiment)value);
      }
      break;

    case VARIABLE_NAMING_CONVENTION:
      if (value == null) {
        unsetVariableNamingConvention();
      } else {
        setVariableNamingConvention((java.lang.String)value);
      }
      break;

    case MODEL_VARIABLES:
      if (value == null) {
        unsetModelVariables();
      } else {
        setModelVariables((java.util.List<ScalarVariable>)value);
      }
      break;

    case MODEL_STRUCTURE:
      if (value == null) {
        unsetModelStructure();
      } else {
        setModelStructure((ModelStructure)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GUID:
      return getGuid();

    case FMI_VERSION:
      return getFmiVersion();

    case MODEL_NAME:
      return getModelName();

    case LICENSE:
      return getLicense();

    case COPYRIGHT:
      return getCopyright();

    case AUTHOR:
      return getAuthor();

    case VERSION:
      return getVersion();

    case DESCRIPTION:
      return getDescription();

    case GENERATION_TOOL:
      return getGenerationTool();

    case GENERATION_DATE_AND_TIME:
      return getGenerationDateAndTime();

    case DEFAULT_EXPERIMENT:
      return getDefaultExperiment();

    case VARIABLE_NAMING_CONVENTION:
      return getVariableNamingConvention();

    case MODEL_VARIABLES:
      return getModelVariables();

    case MODEL_STRUCTURE:
      return getModelStructure();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GUID:
      return isSetGuid();
    case FMI_VERSION:
      return isSetFmiVersion();
    case MODEL_NAME:
      return isSetModelName();
    case LICENSE:
      return isSetLicense();
    case COPYRIGHT:
      return isSetCopyright();
    case AUTHOR:
      return isSetAuthor();
    case VERSION:
      return isSetVersion();
    case DESCRIPTION:
      return isSetDescription();
    case GENERATION_TOOL:
      return isSetGenerationTool();
    case GENERATION_DATE_AND_TIME:
      return isSetGenerationDateAndTime();
    case DEFAULT_EXPERIMENT:
      return isSetDefaultExperiment();
    case VARIABLE_NAMING_CONVENTION:
      return isSetVariableNamingConvention();
    case MODEL_VARIABLES:
      return isSetModelVariables();
    case MODEL_STRUCTURE:
      return isSetModelStructure();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelDescription)
      return this.equals((ModelDescription)that);
    return false;
  }

  public boolean equals(ModelDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_fmiVersion = true && this.isSetFmiVersion();
    boolean that_present_fmiVersion = true && that.isSetFmiVersion();
    if (this_present_fmiVersion || that_present_fmiVersion) {
      if (!(this_present_fmiVersion && that_present_fmiVersion))
        return false;
      if (!this.fmiVersion.equals(that.fmiVersion))
        return false;
    }

    boolean this_present_modelName = true && this.isSetModelName();
    boolean that_present_modelName = true && that.isSetModelName();
    if (this_present_modelName || that_present_modelName) {
      if (!(this_present_modelName && that_present_modelName))
        return false;
      if (!this.modelName.equals(that.modelName))
        return false;
    }

    boolean this_present_license = true && this.isSetLicense();
    boolean that_present_license = true && that.isSetLicense();
    if (this_present_license || that_present_license) {
      if (!(this_present_license && that_present_license))
        return false;
      if (!this.license.equals(that.license))
        return false;
    }

    boolean this_present_copyright = true && this.isSetCopyright();
    boolean that_present_copyright = true && that.isSetCopyright();
    if (this_present_copyright || that_present_copyright) {
      if (!(this_present_copyright && that_present_copyright))
        return false;
      if (!this.copyright.equals(that.copyright))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_generationTool = true && this.isSetGenerationTool();
    boolean that_present_generationTool = true && that.isSetGenerationTool();
    if (this_present_generationTool || that_present_generationTool) {
      if (!(this_present_generationTool && that_present_generationTool))
        return false;
      if (!this.generationTool.equals(that.generationTool))
        return false;
    }

    boolean this_present_generationDateAndTime = true && this.isSetGenerationDateAndTime();
    boolean that_present_generationDateAndTime = true && that.isSetGenerationDateAndTime();
    if (this_present_generationDateAndTime || that_present_generationDateAndTime) {
      if (!(this_present_generationDateAndTime && that_present_generationDateAndTime))
        return false;
      if (!this.generationDateAndTime.equals(that.generationDateAndTime))
        return false;
    }

    boolean this_present_defaultExperiment = true && this.isSetDefaultExperiment();
    boolean that_present_defaultExperiment = true && that.isSetDefaultExperiment();
    if (this_present_defaultExperiment || that_present_defaultExperiment) {
      if (!(this_present_defaultExperiment && that_present_defaultExperiment))
        return false;
      if (!this.defaultExperiment.equals(that.defaultExperiment))
        return false;
    }

    boolean this_present_variableNamingConvention = true && this.isSetVariableNamingConvention();
    boolean that_present_variableNamingConvention = true && that.isSetVariableNamingConvention();
    if (this_present_variableNamingConvention || that_present_variableNamingConvention) {
      if (!(this_present_variableNamingConvention && that_present_variableNamingConvention))
        return false;
      if (!this.variableNamingConvention.equals(that.variableNamingConvention))
        return false;
    }

    boolean this_present_modelVariables = true && this.isSetModelVariables();
    boolean that_present_modelVariables = true && that.isSetModelVariables();
    if (this_present_modelVariables || that_present_modelVariables) {
      if (!(this_present_modelVariables && that_present_modelVariables))
        return false;
      if (!this.modelVariables.equals(that.modelVariables))
        return false;
    }

    boolean this_present_modelStructure = true && this.isSetModelStructure();
    boolean that_present_modelStructure = true && that.isSetModelStructure();
    if (this_present_modelStructure || that_present_modelStructure) {
      if (!(this_present_modelStructure && that_present_modelStructure))
        return false;
      if (!this.modelStructure.equals(that.modelStructure))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGuid()) ? 131071 : 524287);
    if (isSetGuid())
      hashCode = hashCode * 8191 + guid.hashCode();

    hashCode = hashCode * 8191 + ((isSetFmiVersion()) ? 131071 : 524287);
    if (isSetFmiVersion())
      hashCode = hashCode * 8191 + fmiVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelName()) ? 131071 : 524287);
    if (isSetModelName())
      hashCode = hashCode * 8191 + modelName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLicense()) ? 131071 : 524287);
    if (isSetLicense())
      hashCode = hashCode * 8191 + license.hashCode();

    hashCode = hashCode * 8191 + ((isSetCopyright()) ? 131071 : 524287);
    if (isSetCopyright())
      hashCode = hashCode * 8191 + copyright.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthor()) ? 131071 : 524287);
    if (isSetAuthor())
      hashCode = hashCode * 8191 + author.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetGenerationTool()) ? 131071 : 524287);
    if (isSetGenerationTool())
      hashCode = hashCode * 8191 + generationTool.hashCode();

    hashCode = hashCode * 8191 + ((isSetGenerationDateAndTime()) ? 131071 : 524287);
    if (isSetGenerationDateAndTime())
      hashCode = hashCode * 8191 + generationDateAndTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultExperiment()) ? 131071 : 524287);
    if (isSetDefaultExperiment())
      hashCode = hashCode * 8191 + defaultExperiment.hashCode();

    hashCode = hashCode * 8191 + ((isSetVariableNamingConvention()) ? 131071 : 524287);
    if (isSetVariableNamingConvention())
      hashCode = hashCode * 8191 + variableNamingConvention.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelVariables()) ? 131071 : 524287);
    if (isSetModelVariables())
      hashCode = hashCode * 8191 + modelVariables.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelStructure()) ? 131071 : 524287);
    if (isSetModelStructure())
      hashCode = hashCode * 8191 + modelStructure.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ModelDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFmiVersion()).compareTo(other.isSetFmiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmiVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmiVersion, other.fmiVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelName, other.modelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicense()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCopyright()).compareTo(other.isSetCopyright());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopyright()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copyright, other.copyright);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGenerationTool()).compareTo(other.isSetGenerationTool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenerationTool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generationTool, other.generationTool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGenerationDateAndTime()).compareTo(other.isSetGenerationDateAndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenerationDateAndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generationDateAndTime, other.generationDateAndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultExperiment()).compareTo(other.isSetDefaultExperiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultExperiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultExperiment, other.defaultExperiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVariableNamingConvention()).compareTo(other.isSetVariableNamingConvention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariableNamingConvention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variableNamingConvention, other.variableNamingConvention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelVariables()).compareTo(other.isSetModelVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelVariables, other.modelVariables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelStructure()).compareTo(other.isSetModelStructure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelStructure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelStructure, other.modelStructure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ModelDescription(");
    boolean first = true;

    sb.append("guid:");
    if (this.guid == null) {
      sb.append("null");
    } else {
      sb.append(this.guid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fmiVersion:");
    if (this.fmiVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.fmiVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelName:");
    if (this.modelName == null) {
      sb.append("null");
    } else {
      sb.append(this.modelName);
    }
    first = false;
    if (isSetLicense()) {
      if (!first) sb.append(", ");
      sb.append("license:");
      if (this.license == null) {
        sb.append("null");
      } else {
        sb.append(this.license);
      }
      first = false;
    }
    if (isSetCopyright()) {
      if (!first) sb.append(", ");
      sb.append("copyright:");
      if (this.copyright == null) {
        sb.append("null");
      } else {
        sb.append(this.copyright);
      }
      first = false;
    }
    if (isSetAuthor()) {
      if (!first) sb.append(", ");
      sb.append("author:");
      if (this.author == null) {
        sb.append("null");
      } else {
        sb.append(this.author);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetGenerationTool()) {
      if (!first) sb.append(", ");
      sb.append("generationTool:");
      if (this.generationTool == null) {
        sb.append("null");
      } else {
        sb.append(this.generationTool);
      }
      first = false;
    }
    if (isSetGenerationDateAndTime()) {
      if (!first) sb.append(", ");
      sb.append("generationDateAndTime:");
      if (this.generationDateAndTime == null) {
        sb.append("null");
      } else {
        sb.append(this.generationDateAndTime);
      }
      first = false;
    }
    if (isSetDefaultExperiment()) {
      if (!first) sb.append(", ");
      sb.append("defaultExperiment:");
      if (this.defaultExperiment == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultExperiment);
      }
      first = false;
    }
    if (isSetVariableNamingConvention()) {
      if (!first) sb.append(", ");
      sb.append("variableNamingConvention:");
      if (this.variableNamingConvention == null) {
        sb.append("null");
      } else {
        sb.append(this.variableNamingConvention);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("modelVariables:");
    if (this.modelVariables == null) {
      sb.append("null");
    } else {
      sb.append(this.modelVariables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelStructure:");
    if (this.modelStructure == null) {
      sb.append("null");
    } else {
      sb.append(this.modelStructure);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (defaultExperiment != null) {
      defaultExperiment.validate();
    }
    if (modelStructure != null) {
      modelStructure.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelDescriptionStandardScheme getScheme() {
      return new ModelDescriptionStandardScheme();
    }
  }

  private static class ModelDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModelDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guid = iprot.readString();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FMI_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fmiVersion = iprot.readString();
              struct.setFmiVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LICENSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.license = iprot.readString();
              struct.setLicenseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COPYRIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.copyright = iprot.readString();
              struct.setCopyrightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GENERATION_TOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.generationTool = iprot.readString();
              struct.setGenerationToolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GENERATION_DATE_AND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.generationDateAndTime = iprot.readString();
              struct.setGenerationDateAndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEFAULT_EXPERIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultExperiment = new DefaultExperiment();
              struct.defaultExperiment.read(iprot);
              struct.setDefaultExperimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VARIABLE_NAMING_CONVENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.variableNamingConvention = iprot.readString();
              struct.setVariableNamingConventionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MODEL_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.modelVariables = new java.util.ArrayList<ScalarVariable>(_list64.size);
                @org.apache.thrift.annotation.Nullable ScalarVariable _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new ScalarVariable();
                  _elem65.read(iprot);
                  struct.modelVariables.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setModelVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MODEL_STRUCTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.modelStructure = new ModelStructure();
              struct.modelStructure.read(iprot);
              struct.setModelStructureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(struct.guid);
        oprot.writeFieldEnd();
      }
      if (struct.fmiVersion != null) {
        oprot.writeFieldBegin(FMI_VERSION_FIELD_DESC);
        oprot.writeString(struct.fmiVersion);
        oprot.writeFieldEnd();
      }
      if (struct.modelName != null) {
        oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
        oprot.writeString(struct.modelName);
        oprot.writeFieldEnd();
      }
      if (struct.license != null) {
        if (struct.isSetLicense()) {
          oprot.writeFieldBegin(LICENSE_FIELD_DESC);
          oprot.writeString(struct.license);
          oprot.writeFieldEnd();
        }
      }
      if (struct.copyright != null) {
        if (struct.isSetCopyright()) {
          oprot.writeFieldBegin(COPYRIGHT_FIELD_DESC);
          oprot.writeString(struct.copyright);
          oprot.writeFieldEnd();
        }
      }
      if (struct.author != null) {
        if (struct.isSetAuthor()) {
          oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
          oprot.writeString(struct.author);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.generationTool != null) {
        if (struct.isSetGenerationTool()) {
          oprot.writeFieldBegin(GENERATION_TOOL_FIELD_DESC);
          oprot.writeString(struct.generationTool);
          oprot.writeFieldEnd();
        }
      }
      if (struct.generationDateAndTime != null) {
        if (struct.isSetGenerationDateAndTime()) {
          oprot.writeFieldBegin(GENERATION_DATE_AND_TIME_FIELD_DESC);
          oprot.writeString(struct.generationDateAndTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultExperiment != null) {
        if (struct.isSetDefaultExperiment()) {
          oprot.writeFieldBegin(DEFAULT_EXPERIMENT_FIELD_DESC);
          struct.defaultExperiment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.variableNamingConvention != null) {
        if (struct.isSetVariableNamingConvention()) {
          oprot.writeFieldBegin(VARIABLE_NAMING_CONVENTION_FIELD_DESC);
          oprot.writeString(struct.variableNamingConvention);
          oprot.writeFieldEnd();
        }
      }
      if (struct.modelVariables != null) {
        oprot.writeFieldBegin(MODEL_VARIABLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.modelVariables.size()));
          for (ScalarVariable _iter67 : struct.modelVariables)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.modelStructure != null) {
        oprot.writeFieldBegin(MODEL_STRUCTURE_FIELD_DESC);
        struct.modelStructure.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelDescriptionTupleScheme getScheme() {
      return new ModelDescriptionTupleScheme();
    }
  }

  private static class ModelDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModelDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGuid()) {
        optionals.set(0);
      }
      if (struct.isSetFmiVersion()) {
        optionals.set(1);
      }
      if (struct.isSetModelName()) {
        optionals.set(2);
      }
      if (struct.isSetLicense()) {
        optionals.set(3);
      }
      if (struct.isSetCopyright()) {
        optionals.set(4);
      }
      if (struct.isSetAuthor()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetDescription()) {
        optionals.set(7);
      }
      if (struct.isSetGenerationTool()) {
        optionals.set(8);
      }
      if (struct.isSetGenerationDateAndTime()) {
        optionals.set(9);
      }
      if (struct.isSetDefaultExperiment()) {
        optionals.set(10);
      }
      if (struct.isSetVariableNamingConvention()) {
        optionals.set(11);
      }
      if (struct.isSetModelVariables()) {
        optionals.set(12);
      }
      if (struct.isSetModelStructure()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetGuid()) {
        oprot.writeString(struct.guid);
      }
      if (struct.isSetFmiVersion()) {
        oprot.writeString(struct.fmiVersion);
      }
      if (struct.isSetModelName()) {
        oprot.writeString(struct.modelName);
      }
      if (struct.isSetLicense()) {
        oprot.writeString(struct.license);
      }
      if (struct.isSetCopyright()) {
        oprot.writeString(struct.copyright);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetGenerationTool()) {
        oprot.writeString(struct.generationTool);
      }
      if (struct.isSetGenerationDateAndTime()) {
        oprot.writeString(struct.generationDateAndTime);
      }
      if (struct.isSetDefaultExperiment()) {
        struct.defaultExperiment.write(oprot);
      }
      if (struct.isSetVariableNamingConvention()) {
        oprot.writeString(struct.variableNamingConvention);
      }
      if (struct.isSetModelVariables()) {
        {
          oprot.writeI32(struct.modelVariables.size());
          for (ScalarVariable _iter68 : struct.modelVariables)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetModelStructure()) {
        struct.modelStructure.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.guid = iprot.readString();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fmiVersion = iprot.readString();
        struct.setFmiVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modelName = iprot.readString();
        struct.setModelNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.license = iprot.readString();
        struct.setLicenseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.copyright = iprot.readString();
        struct.setCopyrightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.generationTool = iprot.readString();
        struct.setGenerationToolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.generationDateAndTime = iprot.readString();
        struct.setGenerationDateAndTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.defaultExperiment = new DefaultExperiment();
        struct.defaultExperiment.read(iprot);
        struct.setDefaultExperimentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.variableNamingConvention = iprot.readString();
        struct.setVariableNamingConventionIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.modelVariables = new java.util.ArrayList<ScalarVariable>(_list69.size);
          @org.apache.thrift.annotation.Nullable ScalarVariable _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new ScalarVariable();
            _elem70.read(iprot);
            struct.modelVariables.add(_elem70);
          }
        }
        struct.setModelVariablesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.modelStructure = new ModelStructure();
        struct.modelStructure.read(iprot);
        struct.setModelStructureIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


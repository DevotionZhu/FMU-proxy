/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.ntnu.ihb.fmuproxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-01-21")
public class FmuService {

  public interface Iface {

    public ModelDescription getModelDescription(java.lang.String fmuId) throws NoSuchFmuException, org.apache.thrift.TException;

    public CoSimulationAttributes getCoSimulationAttributes(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException;

    public boolean canCreateInstanceFromCS(java.lang.String fmuId) throws NoSuchFmuException, org.apache.thrift.TException;

    public boolean canCreateInstanceFromME(java.lang.String fmuId) throws NoSuchFmuException, org.apache.thrift.TException;

    public java.lang.String createInstanceFromCS(java.lang.String fmuId) throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException;

    public java.lang.String createInstanceFromME(java.lang.String fmuId, Solver solver) throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException;

    public Status setupExperiment(java.lang.String instanceId, double start, double stop, double tolerance) throws NoSuchInstanceException, org.apache.thrift.TException;

    public Status enterInitializationMode(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException;

    public Status exitInitializationMode(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException;

    public StepResult step(java.lang.String instanceId, double stepSize) throws NoSuchInstanceException, org.apache.thrift.TException;

    public Status reset(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException;

    public Status terminate(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException;

    public IntegerRead readInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public RealRead readReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public StringRead readString(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public BooleanRead readBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public Status writeInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Integer> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public Status writeReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Double> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public Status writeString(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.String> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public Status writeBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Boolean> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException;

    public GetFmuStateResult getFMUstate(java.lang.String instanceId) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException;

    public Status setFMUstate(java.lang.String instanceId, long state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException;

    public Status freeFMUstate(java.lang.String instanceId, long state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException;

    public SerializeFmuStateResult serializeFMUstate(java.lang.String instanceId, long state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException;

    public DeSerializeFmuStateResult deSerializeFMUstate(java.lang.String instanceId, java.nio.ByteBuffer state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException;

    public DirectionalDerivativeResult getDirectionalDerivative(java.lang.String instanceId, java.util.List<java.lang.Long> vUnknownRef, java.util.List<java.lang.Long> vKnownRef, java.util.List<java.lang.Double> dvKnownRef) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getModelDescription(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<ModelDescription> resultHandler) throws org.apache.thrift.TException;

    public void getCoSimulationAttributes(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<CoSimulationAttributes> resultHandler) throws org.apache.thrift.TException;

    public void canCreateInstanceFromCS(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void canCreateInstanceFromME(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void createInstanceFromCS(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createInstanceFromME(java.lang.String fmuId, Solver solver, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void setupExperiment(java.lang.String instanceId, double start, double stop, double tolerance, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void enterInitializationMode(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void exitInitializationMode(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void step(java.lang.String instanceId, double stepSize, org.apache.thrift.async.AsyncMethodCallback<StepResult> resultHandler) throws org.apache.thrift.TException;

    public void reset(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void terminate(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void readInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<IntegerRead> resultHandler) throws org.apache.thrift.TException;

    public void readReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<RealRead> resultHandler) throws org.apache.thrift.TException;

    public void readString(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<StringRead> resultHandler) throws org.apache.thrift.TException;

    public void readBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<BooleanRead> resultHandler) throws org.apache.thrift.TException;

    public void writeInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Integer> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void writeReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Double> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void writeString(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.String> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void writeBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Boolean> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void getFMUstate(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<GetFmuStateResult> resultHandler) throws org.apache.thrift.TException;

    public void setFMUstate(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void freeFMUstate(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException;

    public void serializeFMUstate(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<SerializeFmuStateResult> resultHandler) throws org.apache.thrift.TException;

    public void deSerializeFMUstate(java.lang.String instanceId, java.nio.ByteBuffer state, org.apache.thrift.async.AsyncMethodCallback<DeSerializeFmuStateResult> resultHandler) throws org.apache.thrift.TException;

    public void getDirectionalDerivative(java.lang.String instanceId, java.util.List<java.lang.Long> vUnknownRef, java.util.List<java.lang.Long> vKnownRef, java.util.List<java.lang.Double> dvKnownRef, org.apache.thrift.async.AsyncMethodCallback<DirectionalDerivativeResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ModelDescription getModelDescription(java.lang.String fmuId) throws NoSuchFmuException, org.apache.thrift.TException
    {
      send_getModelDescription(fmuId);
      return recv_getModelDescription();
    }

    public void send_getModelDescription(java.lang.String fmuId) throws org.apache.thrift.TException
    {
      getModelDescription_args args = new getModelDescription_args();
      args.setFmuId(fmuId);
      sendBase("getModelDescription", args);
    }

    public ModelDescription recv_getModelDescription() throws NoSuchFmuException, org.apache.thrift.TException
    {
      getModelDescription_result result = new getModelDescription_result();
      receiveBase(result, "getModelDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getModelDescription failed: unknown result");
    }

    public CoSimulationAttributes getCoSimulationAttributes(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException
    {
      send_getCoSimulationAttributes(instanceId);
      return recv_getCoSimulationAttributes();
    }

    public void send_getCoSimulationAttributes(java.lang.String instanceId) throws org.apache.thrift.TException
    {
      getCoSimulationAttributes_args args = new getCoSimulationAttributes_args();
      args.setInstanceId(instanceId);
      sendBase("getCoSimulationAttributes", args);
    }

    public CoSimulationAttributes recv_getCoSimulationAttributes() throws NoSuchInstanceException, org.apache.thrift.TException
    {
      getCoSimulationAttributes_result result = new getCoSimulationAttributes_result();
      receiveBase(result, "getCoSimulationAttributes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCoSimulationAttributes failed: unknown result");
    }

    public boolean canCreateInstanceFromCS(java.lang.String fmuId) throws NoSuchFmuException, org.apache.thrift.TException
    {
      send_canCreateInstanceFromCS(fmuId);
      return recv_canCreateInstanceFromCS();
    }

    public void send_canCreateInstanceFromCS(java.lang.String fmuId) throws org.apache.thrift.TException
    {
      canCreateInstanceFromCS_args args = new canCreateInstanceFromCS_args();
      args.setFmuId(fmuId);
      sendBase("canCreateInstanceFromCS", args);
    }

    public boolean recv_canCreateInstanceFromCS() throws NoSuchFmuException, org.apache.thrift.TException
    {
      canCreateInstanceFromCS_result result = new canCreateInstanceFromCS_result();
      receiveBase(result, "canCreateInstanceFromCS");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canCreateInstanceFromCS failed: unknown result");
    }

    public boolean canCreateInstanceFromME(java.lang.String fmuId) throws NoSuchFmuException, org.apache.thrift.TException
    {
      send_canCreateInstanceFromME(fmuId);
      return recv_canCreateInstanceFromME();
    }

    public void send_canCreateInstanceFromME(java.lang.String fmuId) throws org.apache.thrift.TException
    {
      canCreateInstanceFromME_args args = new canCreateInstanceFromME_args();
      args.setFmuId(fmuId);
      sendBase("canCreateInstanceFromME", args);
    }

    public boolean recv_canCreateInstanceFromME() throws NoSuchFmuException, org.apache.thrift.TException
    {
      canCreateInstanceFromME_result result = new canCreateInstanceFromME_result();
      receiveBase(result, "canCreateInstanceFromME");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canCreateInstanceFromME failed: unknown result");
    }

    public java.lang.String createInstanceFromCS(java.lang.String fmuId) throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException
    {
      send_createInstanceFromCS(fmuId);
      return recv_createInstanceFromCS();
    }

    public void send_createInstanceFromCS(java.lang.String fmuId) throws org.apache.thrift.TException
    {
      createInstanceFromCS_args args = new createInstanceFromCS_args();
      args.setFmuId(fmuId);
      sendBase("createInstanceFromCS", args);
    }

    public java.lang.String recv_createInstanceFromCS() throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException
    {
      createInstanceFromCS_result result = new createInstanceFromCS_result();
      receiveBase(result, "createInstanceFromCS");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createInstanceFromCS failed: unknown result");
    }

    public java.lang.String createInstanceFromME(java.lang.String fmuId, Solver solver) throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException
    {
      send_createInstanceFromME(fmuId, solver);
      return recv_createInstanceFromME();
    }

    public void send_createInstanceFromME(java.lang.String fmuId, Solver solver) throws org.apache.thrift.TException
    {
      createInstanceFromME_args args = new createInstanceFromME_args();
      args.setFmuId(fmuId);
      args.setSolver(solver);
      sendBase("createInstanceFromME", args);
    }

    public java.lang.String recv_createInstanceFromME() throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException
    {
      createInstanceFromME_result result = new createInstanceFromME_result();
      receiveBase(result, "createInstanceFromME");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createInstanceFromME failed: unknown result");
    }

    public Status setupExperiment(java.lang.String instanceId, double start, double stop, double tolerance) throws NoSuchInstanceException, org.apache.thrift.TException
    {
      send_setupExperiment(instanceId, start, stop, tolerance);
      return recv_setupExperiment();
    }

    public void send_setupExperiment(java.lang.String instanceId, double start, double stop, double tolerance) throws org.apache.thrift.TException
    {
      setupExperiment_args args = new setupExperiment_args();
      args.setInstanceId(instanceId);
      args.setStart(start);
      args.setStop(stop);
      args.setTolerance(tolerance);
      sendBase("setupExperiment", args);
    }

    public Status recv_setupExperiment() throws NoSuchInstanceException, org.apache.thrift.TException
    {
      setupExperiment_result result = new setupExperiment_result();
      receiveBase(result, "setupExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setupExperiment failed: unknown result");
    }

    public Status enterInitializationMode(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException
    {
      send_enterInitializationMode(instanceId);
      return recv_enterInitializationMode();
    }

    public void send_enterInitializationMode(java.lang.String instanceId) throws org.apache.thrift.TException
    {
      enterInitializationMode_args args = new enterInitializationMode_args();
      args.setInstanceId(instanceId);
      sendBase("enterInitializationMode", args);
    }

    public Status recv_enterInitializationMode() throws NoSuchInstanceException, org.apache.thrift.TException
    {
      enterInitializationMode_result result = new enterInitializationMode_result();
      receiveBase(result, "enterInitializationMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enterInitializationMode failed: unknown result");
    }

    public Status exitInitializationMode(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException
    {
      send_exitInitializationMode(instanceId);
      return recv_exitInitializationMode();
    }

    public void send_exitInitializationMode(java.lang.String instanceId) throws org.apache.thrift.TException
    {
      exitInitializationMode_args args = new exitInitializationMode_args();
      args.setInstanceId(instanceId);
      sendBase("exitInitializationMode", args);
    }

    public Status recv_exitInitializationMode() throws NoSuchInstanceException, org.apache.thrift.TException
    {
      exitInitializationMode_result result = new exitInitializationMode_result();
      receiveBase(result, "exitInitializationMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exitInitializationMode failed: unknown result");
    }

    public StepResult step(java.lang.String instanceId, double stepSize) throws NoSuchInstanceException, org.apache.thrift.TException
    {
      send_step(instanceId, stepSize);
      return recv_step();
    }

    public void send_step(java.lang.String instanceId, double stepSize) throws org.apache.thrift.TException
    {
      step_args args = new step_args();
      args.setInstanceId(instanceId);
      args.setStepSize(stepSize);
      sendBase("step", args);
    }

    public StepResult recv_step() throws NoSuchInstanceException, org.apache.thrift.TException
    {
      step_result result = new step_result();
      receiveBase(result, "step");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "step failed: unknown result");
    }

    public Status reset(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException
    {
      send_reset(instanceId);
      return recv_reset();
    }

    public void send_reset(java.lang.String instanceId) throws org.apache.thrift.TException
    {
      reset_args args = new reset_args();
      args.setInstanceId(instanceId);
      sendBase("reset", args);
    }

    public Status recv_reset() throws NoSuchInstanceException, org.apache.thrift.TException
    {
      reset_result result = new reset_result();
      receiveBase(result, "reset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reset failed: unknown result");
    }

    public Status terminate(java.lang.String instanceId) throws NoSuchInstanceException, org.apache.thrift.TException
    {
      send_terminate(instanceId);
      return recv_terminate();
    }

    public void send_terminate(java.lang.String instanceId) throws org.apache.thrift.TException
    {
      terminate_args args = new terminate_args();
      args.setInstanceId(instanceId);
      sendBase("terminate", args);
    }

    public Status recv_terminate() throws NoSuchInstanceException, org.apache.thrift.TException
    {
      terminate_result result = new terminate_result();
      receiveBase(result, "terminate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminate failed: unknown result");
    }

    public IntegerRead readInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_readInteger(instanceId, vr);
      return recv_readInteger();
    }

    public void send_readInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws org.apache.thrift.TException
    {
      readInteger_args args = new readInteger_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      sendBase("readInteger", args);
    }

    public IntegerRead recv_readInteger() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      readInteger_result result = new readInteger_result();
      receiveBase(result, "readInteger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readInteger failed: unknown result");
    }

    public RealRead readReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_readReal(instanceId, vr);
      return recv_readReal();
    }

    public void send_readReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws org.apache.thrift.TException
    {
      readReal_args args = new readReal_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      sendBase("readReal", args);
    }

    public RealRead recv_readReal() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      readReal_result result = new readReal_result();
      receiveBase(result, "readReal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readReal failed: unknown result");
    }

    public StringRead readString(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_readString(instanceId, vr);
      return recv_readString();
    }

    public void send_readString(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws org.apache.thrift.TException
    {
      readString_args args = new readString_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      sendBase("readString", args);
    }

    public StringRead recv_readString() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      readString_result result = new readString_result();
      receiveBase(result, "readString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readString failed: unknown result");
    }

    public BooleanRead readBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_readBoolean(instanceId, vr);
      return recv_readBoolean();
    }

    public void send_readBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr) throws org.apache.thrift.TException
    {
      readBoolean_args args = new readBoolean_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      sendBase("readBoolean", args);
    }

    public BooleanRead recv_readBoolean() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      readBoolean_result result = new readBoolean_result();
      receiveBase(result, "readBoolean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readBoolean failed: unknown result");
    }

    public Status writeInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Integer> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeInteger(instanceId, vr, value);
      return recv_writeInteger();
    }

    public void send_writeInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Integer> value) throws org.apache.thrift.TException
    {
      writeInteger_args args = new writeInteger_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeInteger", args);
    }

    public Status recv_writeInteger() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      writeInteger_result result = new writeInteger_result();
      receiveBase(result, "writeInteger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeInteger failed: unknown result");
    }

    public Status writeReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Double> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeReal(instanceId, vr, value);
      return recv_writeReal();
    }

    public void send_writeReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Double> value) throws org.apache.thrift.TException
    {
      writeReal_args args = new writeReal_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeReal", args);
    }

    public Status recv_writeReal() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      writeReal_result result = new writeReal_result();
      receiveBase(result, "writeReal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeReal failed: unknown result");
    }

    public Status writeString(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.String> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeString(instanceId, vr, value);
      return recv_writeString();
    }

    public void send_writeString(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.String> value) throws org.apache.thrift.TException
    {
      writeString_args args = new writeString_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeString", args);
    }

    public Status recv_writeString() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      writeString_result result = new writeString_result();
      receiveBase(result, "writeString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeString failed: unknown result");
    }

    public Status writeBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Boolean> value) throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      send_writeBoolean(instanceId, vr, value);
      return recv_writeBoolean();
    }

    public void send_writeBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Boolean> value) throws org.apache.thrift.TException
    {
      writeBoolean_args args = new writeBoolean_args();
      args.setInstanceId(instanceId);
      args.setVr(vr);
      args.setValue(value);
      sendBase("writeBoolean", args);
    }

    public Status recv_writeBoolean() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException
    {
      writeBoolean_result result = new writeBoolean_result();
      receiveBase(result, "writeBoolean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeBoolean failed: unknown result");
    }

    public GetFmuStateResult getFMUstate(java.lang.String instanceId) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      send_getFMUstate(instanceId);
      return recv_getFMUstate();
    }

    public void send_getFMUstate(java.lang.String instanceId) throws org.apache.thrift.TException
    {
      getFMUstate_args args = new getFMUstate_args();
      args.setInstanceId(instanceId);
      sendBase("getFMUstate", args);
    }

    public GetFmuStateResult recv_getFMUstate() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      getFMUstate_result result = new getFMUstate_result();
      receiveBase(result, "getFMUstate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFMUstate failed: unknown result");
    }

    public Status setFMUstate(java.lang.String instanceId, long state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      send_setFMUstate(instanceId, state);
      return recv_setFMUstate();
    }

    public void send_setFMUstate(java.lang.String instanceId, long state) throws org.apache.thrift.TException
    {
      setFMUstate_args args = new setFMUstate_args();
      args.setInstanceId(instanceId);
      args.setState(state);
      sendBase("setFMUstate", args);
    }

    public Status recv_setFMUstate() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      setFMUstate_result result = new setFMUstate_result();
      receiveBase(result, "setFMUstate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setFMUstate failed: unknown result");
    }

    public Status freeFMUstate(java.lang.String instanceId, long state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      send_freeFMUstate(instanceId, state);
      return recv_freeFMUstate();
    }

    public void send_freeFMUstate(java.lang.String instanceId, long state) throws org.apache.thrift.TException
    {
      freeFMUstate_args args = new freeFMUstate_args();
      args.setInstanceId(instanceId);
      args.setState(state);
      sendBase("freeFMUstate", args);
    }

    public Status recv_freeFMUstate() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      freeFMUstate_result result = new freeFMUstate_result();
      receiveBase(result, "freeFMUstate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "freeFMUstate failed: unknown result");
    }

    public SerializeFmuStateResult serializeFMUstate(java.lang.String instanceId, long state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      send_serializeFMUstate(instanceId, state);
      return recv_serializeFMUstate();
    }

    public void send_serializeFMUstate(java.lang.String instanceId, long state) throws org.apache.thrift.TException
    {
      serializeFMUstate_args args = new serializeFMUstate_args();
      args.setInstanceId(instanceId);
      args.setState(state);
      sendBase("serializeFMUstate", args);
    }

    public SerializeFmuStateResult recv_serializeFMUstate() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      serializeFMUstate_result result = new serializeFMUstate_result();
      receiveBase(result, "serializeFMUstate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "serializeFMUstate failed: unknown result");
    }

    public DeSerializeFmuStateResult deSerializeFMUstate(java.lang.String instanceId, java.nio.ByteBuffer state) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      send_deSerializeFMUstate(instanceId, state);
      return recv_deSerializeFMUstate();
    }

    public void send_deSerializeFMUstate(java.lang.String instanceId, java.nio.ByteBuffer state) throws org.apache.thrift.TException
    {
      deSerializeFMUstate_args args = new deSerializeFMUstate_args();
      args.setInstanceId(instanceId);
      args.setState(state);
      sendBase("deSerializeFMUstate", args);
    }

    public DeSerializeFmuStateResult recv_deSerializeFMUstate() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      deSerializeFMUstate_result result = new deSerializeFMUstate_result();
      receiveBase(result, "deSerializeFMUstate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deSerializeFMUstate failed: unknown result");
    }

    public DirectionalDerivativeResult getDirectionalDerivative(java.lang.String instanceId, java.util.List<java.lang.Long> vUnknownRef, java.util.List<java.lang.Long> vKnownRef, java.util.List<java.lang.Double> dvKnownRef) throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      send_getDirectionalDerivative(instanceId, vUnknownRef, vKnownRef, dvKnownRef);
      return recv_getDirectionalDerivative();
    }

    public void send_getDirectionalDerivative(java.lang.String instanceId, java.util.List<java.lang.Long> vUnknownRef, java.util.List<java.lang.Long> vKnownRef, java.util.List<java.lang.Double> dvKnownRef) throws org.apache.thrift.TException
    {
      getDirectionalDerivative_args args = new getDirectionalDerivative_args();
      args.setInstanceId(instanceId);
      args.setVUnknownRef(vUnknownRef);
      args.setVKnownRef(vKnownRef);
      args.setDvKnownRef(dvKnownRef);
      sendBase("getDirectionalDerivative", args);
    }

    public DirectionalDerivativeResult recv_getDirectionalDerivative() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException
    {
      getDirectionalDerivative_result result = new getDirectionalDerivative_result();
      receiveBase(result, "getDirectionalDerivative");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDirectionalDerivative failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getModelDescription(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<ModelDescription> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getModelDescription_call method_call = new getModelDescription_call(fmuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getModelDescription_call extends org.apache.thrift.async.TAsyncMethodCall<ModelDescription> {
      private java.lang.String fmuId;
      public getModelDescription_call(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<ModelDescription> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmuId = fmuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModelDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getModelDescription_args args = new getModelDescription_args();
        args.setFmuId(fmuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ModelDescription getResult() throws NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getModelDescription();
      }
    }

    public void getCoSimulationAttributes(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<CoSimulationAttributes> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCoSimulationAttributes_call method_call = new getCoSimulationAttributes_call(instanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCoSimulationAttributes_call extends org.apache.thrift.async.TAsyncMethodCall<CoSimulationAttributes> {
      private java.lang.String instanceId;
      public getCoSimulationAttributes_call(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<CoSimulationAttributes> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCoSimulationAttributes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCoSimulationAttributes_args args = new getCoSimulationAttributes_args();
        args.setInstanceId(instanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CoSimulationAttributes getResult() throws NoSuchInstanceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCoSimulationAttributes();
      }
    }

    public void canCreateInstanceFromCS(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canCreateInstanceFromCS_call method_call = new canCreateInstanceFromCS_call(fmuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canCreateInstanceFromCS_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String fmuId;
      public canCreateInstanceFromCS_call(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmuId = fmuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canCreateInstanceFromCS", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canCreateInstanceFromCS_args args = new canCreateInstanceFromCS_args();
        args.setFmuId(fmuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canCreateInstanceFromCS();
      }
    }

    public void canCreateInstanceFromME(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canCreateInstanceFromME_call method_call = new canCreateInstanceFromME_call(fmuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canCreateInstanceFromME_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String fmuId;
      public canCreateInstanceFromME_call(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmuId = fmuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canCreateInstanceFromME", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canCreateInstanceFromME_args args = new canCreateInstanceFromME_args();
        args.setFmuId(fmuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canCreateInstanceFromME();
      }
    }

    public void createInstanceFromCS(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createInstanceFromCS_call method_call = new createInstanceFromCS_call(fmuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createInstanceFromCS_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fmuId;
      public createInstanceFromCS_call(java.lang.String fmuId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmuId = fmuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createInstanceFromCS", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createInstanceFromCS_args args = new createInstanceFromCS_args();
        args.setFmuId(fmuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createInstanceFromCS();
      }
    }

    public void createInstanceFromME(java.lang.String fmuId, Solver solver, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createInstanceFromME_call method_call = new createInstanceFromME_call(fmuId, solver, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createInstanceFromME_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fmuId;
      private Solver solver;
      public createInstanceFromME_call(java.lang.String fmuId, Solver solver, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmuId = fmuId;
        this.solver = solver;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createInstanceFromME", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createInstanceFromME_args args = new createInstanceFromME_args();
        args.setFmuId(fmuId);
        args.setSolver(solver);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws UnsupportedOperationException, NoSuchFmuException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createInstanceFromME();
      }
    }

    public void setupExperiment(java.lang.String instanceId, double start, double stop, double tolerance, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setupExperiment_call method_call = new setupExperiment_call(instanceId, start, stop, tolerance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setupExperiment_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      private double start;
      private double stop;
      private double tolerance;
      public setupExperiment_call(java.lang.String instanceId, double start, double stop, double tolerance, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.start = start;
        this.stop = stop;
        this.tolerance = tolerance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setupExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setupExperiment_args args = new setupExperiment_args();
        args.setInstanceId(instanceId);
        args.setStart(start);
        args.setStop(stop);
        args.setTolerance(tolerance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setupExperiment();
      }
    }

    public void enterInitializationMode(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enterInitializationMode_call method_call = new enterInitializationMode_call(instanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enterInitializationMode_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      public enterInitializationMode_call(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enterInitializationMode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enterInitializationMode_args args = new enterInitializationMode_args();
        args.setInstanceId(instanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enterInitializationMode();
      }
    }

    public void exitInitializationMode(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exitInitializationMode_call method_call = new exitInitializationMode_call(instanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exitInitializationMode_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      public exitInitializationMode_call(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exitInitializationMode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exitInitializationMode_args args = new exitInitializationMode_args();
        args.setInstanceId(instanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exitInitializationMode();
      }
    }

    public void step(java.lang.String instanceId, double stepSize, org.apache.thrift.async.AsyncMethodCallback<StepResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      step_call method_call = new step_call(instanceId, stepSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class step_call extends org.apache.thrift.async.TAsyncMethodCall<StepResult> {
      private java.lang.String instanceId;
      private double stepSize;
      public step_call(java.lang.String instanceId, double stepSize, org.apache.thrift.async.AsyncMethodCallback<StepResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.stepSize = stepSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("step", org.apache.thrift.protocol.TMessageType.CALL, 0));
        step_args args = new step_args();
        args.setInstanceId(instanceId);
        args.setStepSize(stepSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StepResult getResult() throws NoSuchInstanceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_step();
      }
    }

    public void reset(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reset_call method_call = new reset_call(instanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reset_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      public reset_call(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reset_args args = new reset_args();
        args.setInstanceId(instanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reset();
      }
    }

    public void terminate(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminate_call method_call = new terminate_call(instanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminate_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      public terminate_call(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminate_args args = new terminate_args();
        args.setInstanceId(instanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminate();
      }
    }

    public void readInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<IntegerRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readInteger_call method_call = new readInteger_call(instanceId, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readInteger_call extends org.apache.thrift.async.TAsyncMethodCall<IntegerRead> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      public readInteger_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<IntegerRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readInteger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readInteger_args args = new readInteger_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IntegerRead getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readInteger();
      }
    }

    public void readReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<RealRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readReal_call method_call = new readReal_call(instanceId, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readReal_call extends org.apache.thrift.async.TAsyncMethodCall<RealRead> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      public readReal_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<RealRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readReal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readReal_args args = new readReal_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RealRead getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readReal();
      }
    }

    public void readString(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<StringRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readString_call method_call = new readString_call(instanceId, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readString_call extends org.apache.thrift.async.TAsyncMethodCall<StringRead> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      public readString_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<StringRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readString_args args = new readString_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StringRead getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readString();
      }
    }

    public void readBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<BooleanRead> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readBoolean_call method_call = new readBoolean_call(instanceId, vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readBoolean_call extends org.apache.thrift.async.TAsyncMethodCall<BooleanRead> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      public readBoolean_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, org.apache.thrift.async.AsyncMethodCallback<BooleanRead> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readBoolean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readBoolean_args args = new readBoolean_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BooleanRead getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readBoolean();
      }
    }

    public void writeInteger(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Integer> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeInteger_call method_call = new writeInteger_call(instanceId, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeInteger_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      private java.util.List<java.lang.Integer> value;
      public writeInteger_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Integer> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeInteger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeInteger_args args = new writeInteger_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeInteger();
      }
    }

    public void writeReal(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Double> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeReal_call method_call = new writeReal_call(instanceId, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeReal_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      private java.util.List<java.lang.Double> value;
      public writeReal_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Double> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeReal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeReal_args args = new writeReal_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeReal();
      }
    }

    public void writeString(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.String> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeString_call method_call = new writeString_call(instanceId, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeString_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      private java.util.List<java.lang.String> value;
      public writeString_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.String> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeString_args args = new writeString_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeString();
      }
    }

    public void writeBoolean(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Boolean> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeBoolean_call method_call = new writeBoolean_call(instanceId, vr, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeBoolean_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vr;
      private java.util.List<java.lang.Boolean> value;
      public writeBoolean_call(java.lang.String instanceId, java.util.List<java.lang.Long> vr, java.util.List<java.lang.Boolean> value, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vr = vr;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeBoolean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeBoolean_args args = new writeBoolean_args();
        args.setInstanceId(instanceId);
        args.setVr(vr);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, NoSuchVariableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeBoolean();
      }
    }

    public void getFMUstate(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<GetFmuStateResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFMUstate_call method_call = new getFMUstate_call(instanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFMUstate_call extends org.apache.thrift.async.TAsyncMethodCall<GetFmuStateResult> {
      private java.lang.String instanceId;
      public getFMUstate_call(java.lang.String instanceId, org.apache.thrift.async.AsyncMethodCallback<GetFmuStateResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFMUstate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFMUstate_args args = new getFMUstate_args();
        args.setInstanceId(instanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetFmuStateResult getResult() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFMUstate();
      }
    }

    public void setFMUstate(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setFMUstate_call method_call = new setFMUstate_call(instanceId, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setFMUstate_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      private long state;
      public setFMUstate_call(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setFMUstate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setFMUstate_args args = new setFMUstate_args();
        args.setInstanceId(instanceId);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setFMUstate();
      }
    }

    public void freeFMUstate(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      freeFMUstate_call method_call = new freeFMUstate_call(instanceId, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class freeFMUstate_call extends org.apache.thrift.async.TAsyncMethodCall<Status> {
      private java.lang.String instanceId;
      private long state;
      public freeFMUstate_call(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("freeFMUstate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        freeFMUstate_args args = new freeFMUstate_args();
        args.setInstanceId(instanceId);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_freeFMUstate();
      }
    }

    public void serializeFMUstate(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<SerializeFmuStateResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      serializeFMUstate_call method_call = new serializeFMUstate_call(instanceId, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class serializeFMUstate_call extends org.apache.thrift.async.TAsyncMethodCall<SerializeFmuStateResult> {
      private java.lang.String instanceId;
      private long state;
      public serializeFMUstate_call(java.lang.String instanceId, long state, org.apache.thrift.async.AsyncMethodCallback<SerializeFmuStateResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("serializeFMUstate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        serializeFMUstate_args args = new serializeFMUstate_args();
        args.setInstanceId(instanceId);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SerializeFmuStateResult getResult() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_serializeFMUstate();
      }
    }

    public void deSerializeFMUstate(java.lang.String instanceId, java.nio.ByteBuffer state, org.apache.thrift.async.AsyncMethodCallback<DeSerializeFmuStateResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deSerializeFMUstate_call method_call = new deSerializeFMUstate_call(instanceId, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deSerializeFMUstate_call extends org.apache.thrift.async.TAsyncMethodCall<DeSerializeFmuStateResult> {
      private java.lang.String instanceId;
      private java.nio.ByteBuffer state;
      public deSerializeFMUstate_call(java.lang.String instanceId, java.nio.ByteBuffer state, org.apache.thrift.async.AsyncMethodCallback<DeSerializeFmuStateResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deSerializeFMUstate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deSerializeFMUstate_args args = new deSerializeFMUstate_args();
        args.setInstanceId(instanceId);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeSerializeFmuStateResult getResult() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deSerializeFMUstate();
      }
    }

    public void getDirectionalDerivative(java.lang.String instanceId, java.util.List<java.lang.Long> vUnknownRef, java.util.List<java.lang.Long> vKnownRef, java.util.List<java.lang.Double> dvKnownRef, org.apache.thrift.async.AsyncMethodCallback<DirectionalDerivativeResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDirectionalDerivative_call method_call = new getDirectionalDerivative_call(instanceId, vUnknownRef, vKnownRef, dvKnownRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDirectionalDerivative_call extends org.apache.thrift.async.TAsyncMethodCall<DirectionalDerivativeResult> {
      private java.lang.String instanceId;
      private java.util.List<java.lang.Long> vUnknownRef;
      private java.util.List<java.lang.Long> vKnownRef;
      private java.util.List<java.lang.Double> dvKnownRef;
      public getDirectionalDerivative_call(java.lang.String instanceId, java.util.List<java.lang.Long> vUnknownRef, java.util.List<java.lang.Long> vKnownRef, java.util.List<java.lang.Double> dvKnownRef, org.apache.thrift.async.AsyncMethodCallback<DirectionalDerivativeResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceId = instanceId;
        this.vUnknownRef = vUnknownRef;
        this.vKnownRef = vKnownRef;
        this.dvKnownRef = dvKnownRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDirectionalDerivative", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDirectionalDerivative_args args = new getDirectionalDerivative_args();
        args.setInstanceId(instanceId);
        args.setVUnknownRef(vUnknownRef);
        args.setVKnownRef(vKnownRef);
        args.setDvKnownRef(dvKnownRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DirectionalDerivativeResult getResult() throws NoSuchInstanceException, UnsupportedOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDirectionalDerivative();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getModelDescription", new getModelDescription());
      processMap.put("getCoSimulationAttributes", new getCoSimulationAttributes());
      processMap.put("canCreateInstanceFromCS", new canCreateInstanceFromCS());
      processMap.put("canCreateInstanceFromME", new canCreateInstanceFromME());
      processMap.put("createInstanceFromCS", new createInstanceFromCS());
      processMap.put("createInstanceFromME", new createInstanceFromME());
      processMap.put("setupExperiment", new setupExperiment());
      processMap.put("enterInitializationMode", new enterInitializationMode());
      processMap.put("exitInitializationMode", new exitInitializationMode());
      processMap.put("step", new step());
      processMap.put("reset", new reset());
      processMap.put("terminate", new terminate());
      processMap.put("readInteger", new readInteger());
      processMap.put("readReal", new readReal());
      processMap.put("readString", new readString());
      processMap.put("readBoolean", new readBoolean());
      processMap.put("writeInteger", new writeInteger());
      processMap.put("writeReal", new writeReal());
      processMap.put("writeString", new writeString());
      processMap.put("writeBoolean", new writeBoolean());
      processMap.put("getFMUstate", new getFMUstate());
      processMap.put("setFMUstate", new setFMUstate());
      processMap.put("freeFMUstate", new freeFMUstate());
      processMap.put("serializeFMUstate", new serializeFMUstate());
      processMap.put("deSerializeFMUstate", new deSerializeFMUstate());
      processMap.put("getDirectionalDerivative", new getDirectionalDerivative());
      return processMap;
    }

    public static class getModelDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getModelDescription_args> {
      public getModelDescription() {
        super("getModelDescription");
      }

      public getModelDescription_args getEmptyArgsInstance() {
        return new getModelDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getModelDescription_result getResult(I iface, getModelDescription_args args) throws org.apache.thrift.TException {
        getModelDescription_result result = new getModelDescription_result();
        try {
          result.success = iface.getModelDescription(args.fmuId);
        } catch (NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getCoSimulationAttributes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCoSimulationAttributes_args> {
      public getCoSimulationAttributes() {
        super("getCoSimulationAttributes");
      }

      public getCoSimulationAttributes_args getEmptyArgsInstance() {
        return new getCoSimulationAttributes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getCoSimulationAttributes_result getResult(I iface, getCoSimulationAttributes_args args) throws org.apache.thrift.TException {
        getCoSimulationAttributes_result result = new getCoSimulationAttributes_result();
        try {
          result.success = iface.getCoSimulationAttributes(args.instanceId);
        } catch (NoSuchInstanceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class canCreateInstanceFromCS<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canCreateInstanceFromCS_args> {
      public canCreateInstanceFromCS() {
        super("canCreateInstanceFromCS");
      }

      public canCreateInstanceFromCS_args getEmptyArgsInstance() {
        return new canCreateInstanceFromCS_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public canCreateInstanceFromCS_result getResult(I iface, canCreateInstanceFromCS_args args) throws org.apache.thrift.TException {
        canCreateInstanceFromCS_result result = new canCreateInstanceFromCS_result();
        try {
          result.success = iface.canCreateInstanceFromCS(args.fmuId);
          result.setSuccessIsSet(true);
        } catch (NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class canCreateInstanceFromME<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canCreateInstanceFromME_args> {
      public canCreateInstanceFromME() {
        super("canCreateInstanceFromME");
      }

      public canCreateInstanceFromME_args getEmptyArgsInstance() {
        return new canCreateInstanceFromME_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public canCreateInstanceFromME_result getResult(I iface, canCreateInstanceFromME_args args) throws org.apache.thrift.TException {
        canCreateInstanceFromME_result result = new canCreateInstanceFromME_result();
        try {
          result.success = iface.canCreateInstanceFromME(args.fmuId);
          result.setSuccessIsSet(true);
        } catch (NoSuchFmuException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class createInstanceFromCS<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createInstanceFromCS_args> {
      public createInstanceFromCS() {
        super("createInstanceFromCS");
      }

      public createInstanceFromCS_args getEmptyArgsInstance() {
        return new createInstanceFromCS_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createInstanceFromCS_result getResult(I iface, createInstanceFromCS_args args) throws org.apache.thrift.TException {
        createInstanceFromCS_result result = new createInstanceFromCS_result();
        try {
          result.success = iface.createInstanceFromCS(args.fmuId);
        } catch (UnsupportedOperationException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchFmuException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class createInstanceFromME<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createInstanceFromME_args> {
      public createInstanceFromME() {
        super("createInstanceFromME");
      }

      public createInstanceFromME_args getEmptyArgsInstance() {
        return new createInstanceFromME_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createInstanceFromME_result getResult(I iface, createInstanceFromME_args args) throws org.apache.thrift.TException {
        createInstanceFromME_result result = new createInstanceFromME_result();
        try {
          result.success = iface.createInstanceFromME(args.fmuId, args.solver);
        } catch (UnsupportedOperationException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchFmuException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class setupExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setupExperiment_args> {
      public setupExperiment() {
        super("setupExperiment");
      }

      public setupExperiment_args getEmptyArgsInstance() {
        return new setupExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public setupExperiment_result getResult(I iface, setupExperiment_args args) throws org.apache.thrift.TException {
        setupExperiment_result result = new setupExperiment_result();
        try {
          result.success = iface.setupExperiment(args.instanceId, args.start, args.stop, args.tolerance);
        } catch (NoSuchInstanceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class enterInitializationMode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enterInitializationMode_args> {
      public enterInitializationMode() {
        super("enterInitializationMode");
      }

      public enterInitializationMode_args getEmptyArgsInstance() {
        return new enterInitializationMode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public enterInitializationMode_result getResult(I iface, enterInitializationMode_args args) throws org.apache.thrift.TException {
        enterInitializationMode_result result = new enterInitializationMode_result();
        try {
          result.success = iface.enterInitializationMode(args.instanceId);
        } catch (NoSuchInstanceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class exitInitializationMode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exitInitializationMode_args> {
      public exitInitializationMode() {
        super("exitInitializationMode");
      }

      public exitInitializationMode_args getEmptyArgsInstance() {
        return new exitInitializationMode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public exitInitializationMode_result getResult(I iface, exitInitializationMode_args args) throws org.apache.thrift.TException {
        exitInitializationMode_result result = new exitInitializationMode_result();
        try {
          result.success = iface.exitInitializationMode(args.instanceId);
        } catch (NoSuchInstanceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class step<I extends Iface> extends org.apache.thrift.ProcessFunction<I, step_args> {
      public step() {
        super("step");
      }

      public step_args getEmptyArgsInstance() {
        return new step_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public step_result getResult(I iface, step_args args) throws org.apache.thrift.TException {
        step_result result = new step_result();
        try {
          result.success = iface.step(args.instanceId, args.stepSize);
        } catch (NoSuchInstanceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class reset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reset_args> {
      public reset() {
        super("reset");
      }

      public reset_args getEmptyArgsInstance() {
        return new reset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public reset_result getResult(I iface, reset_args args) throws org.apache.thrift.TException {
        reset_result result = new reset_result();
        try {
          result.success = iface.reset(args.instanceId);
        } catch (NoSuchInstanceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class terminate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminate_args> {
      public terminate() {
        super("terminate");
      }

      public terminate_args getEmptyArgsInstance() {
        return new terminate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public terminate_result getResult(I iface, terminate_args args) throws org.apache.thrift.TException {
        terminate_result result = new terminate_result();
        try {
          result.success = iface.terminate(args.instanceId);
        } catch (NoSuchInstanceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class readInteger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readInteger_args> {
      public readInteger() {
        super("readInteger");
      }

      public readInteger_args getEmptyArgsInstance() {
        return new readInteger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public readInteger_result getResult(I iface, readInteger_args args) throws org.apache.thrift.TException {
        readInteger_result result = new readInteger_result();
        try {
          result.success = iface.readInteger(args.instanceId, args.vr);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class readReal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readReal_args> {
      public readReal() {
        super("readReal");
      }

      public readReal_args getEmptyArgsInstance() {
        return new readReal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public readReal_result getResult(I iface, readReal_args args) throws org.apache.thrift.TException {
        readReal_result result = new readReal_result();
        try {
          result.success = iface.readReal(args.instanceId, args.vr);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class readString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readString_args> {
      public readString() {
        super("readString");
      }

      public readString_args getEmptyArgsInstance() {
        return new readString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public readString_result getResult(I iface, readString_args args) throws org.apache.thrift.TException {
        readString_result result = new readString_result();
        try {
          result.success = iface.readString(args.instanceId, args.vr);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class readBoolean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readBoolean_args> {
      public readBoolean() {
        super("readBoolean");
      }

      public readBoolean_args getEmptyArgsInstance() {
        return new readBoolean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public readBoolean_result getResult(I iface, readBoolean_args args) throws org.apache.thrift.TException {
        readBoolean_result result = new readBoolean_result();
        try {
          result.success = iface.readBoolean(args.instanceId, args.vr);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeInteger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeInteger_args> {
      public writeInteger() {
        super("writeInteger");
      }

      public writeInteger_args getEmptyArgsInstance() {
        return new writeInteger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public writeInteger_result getResult(I iface, writeInteger_args args) throws org.apache.thrift.TException {
        writeInteger_result result = new writeInteger_result();
        try {
          result.success = iface.writeInteger(args.instanceId, args.vr, args.value);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeReal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeReal_args> {
      public writeReal() {
        super("writeReal");
      }

      public writeReal_args getEmptyArgsInstance() {
        return new writeReal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public writeReal_result getResult(I iface, writeReal_args args) throws org.apache.thrift.TException {
        writeReal_result result = new writeReal_result();
        try {
          result.success = iface.writeReal(args.instanceId, args.vr, args.value);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeString_args> {
      public writeString() {
        super("writeString");
      }

      public writeString_args getEmptyArgsInstance() {
        return new writeString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public writeString_result getResult(I iface, writeString_args args) throws org.apache.thrift.TException {
        writeString_result result = new writeString_result();
        try {
          result.success = iface.writeString(args.instanceId, args.vr, args.value);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class writeBoolean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeBoolean_args> {
      public writeBoolean() {
        super("writeBoolean");
      }

      public writeBoolean_args getEmptyArgsInstance() {
        return new writeBoolean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public writeBoolean_result getResult(I iface, writeBoolean_args args) throws org.apache.thrift.TException {
        writeBoolean_result result = new writeBoolean_result();
        try {
          result.success = iface.writeBoolean(args.instanceId, args.vr, args.value);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (NoSuchVariableException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class getFMUstate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFMUstate_args> {
      public getFMUstate() {
        super("getFMUstate");
      }

      public getFMUstate_args getEmptyArgsInstance() {
        return new getFMUstate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getFMUstate_result getResult(I iface, getFMUstate_args args) throws org.apache.thrift.TException {
        getFMUstate_result result = new getFMUstate_result();
        try {
          result.success = iface.getFMUstate(args.instanceId);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (UnsupportedOperationException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class setFMUstate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setFMUstate_args> {
      public setFMUstate() {
        super("setFMUstate");
      }

      public setFMUstate_args getEmptyArgsInstance() {
        return new setFMUstate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public setFMUstate_result getResult(I iface, setFMUstate_args args) throws org.apache.thrift.TException {
        setFMUstate_result result = new setFMUstate_result();
        try {
          result.success = iface.setFMUstate(args.instanceId, args.state);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (UnsupportedOperationException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class freeFMUstate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, freeFMUstate_args> {
      public freeFMUstate() {
        super("freeFMUstate");
      }

      public freeFMUstate_args getEmptyArgsInstance() {
        return new freeFMUstate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public freeFMUstate_result getResult(I iface, freeFMUstate_args args) throws org.apache.thrift.TException {
        freeFMUstate_result result = new freeFMUstate_result();
        try {
          result.success = iface.freeFMUstate(args.instanceId, args.state);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (UnsupportedOperationException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class serializeFMUstate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, serializeFMUstate_args> {
      public serializeFMUstate() {
        super("serializeFMUstate");
      }

      public serializeFMUstate_args getEmptyArgsInstance() {
        return new serializeFMUstate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public serializeFMUstate_result getResult(I iface, serializeFMUstate_args args) throws org.apache.thrift.TException {
        serializeFMUstate_result result = new serializeFMUstate_result();
        try {
          result.success = iface.serializeFMUstate(args.instanceId, args.state);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (UnsupportedOperationException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class deSerializeFMUstate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deSerializeFMUstate_args> {
      public deSerializeFMUstate() {
        super("deSerializeFMUstate");
      }

      public deSerializeFMUstate_args getEmptyArgsInstance() {
        return new deSerializeFMUstate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public deSerializeFMUstate_result getResult(I iface, deSerializeFMUstate_args args) throws org.apache.thrift.TException {
        deSerializeFMUstate_result result = new deSerializeFMUstate_result();
        try {
          result.success = iface.deSerializeFMUstate(args.instanceId, args.state);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (UnsupportedOperationException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

    public static class getDirectionalDerivative<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDirectionalDerivative_args> {
      public getDirectionalDerivative() {
        super("getDirectionalDerivative");
      }

      public getDirectionalDerivative_args getEmptyArgsInstance() {
        return new getDirectionalDerivative_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDirectionalDerivative_result getResult(I iface, getDirectionalDerivative_args args) throws org.apache.thrift.TException {
        getDirectionalDerivative_result result = new getDirectionalDerivative_result();
        try {
          result.success = iface.getDirectionalDerivative(args.instanceId, args.vUnknownRef, args.vKnownRef, args.dvKnownRef);
        } catch (NoSuchInstanceException ex1) {
          result.ex1 = ex1;
        } catch (UnsupportedOperationException ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getModelDescription", new getModelDescription());
      processMap.put("getCoSimulationAttributes", new getCoSimulationAttributes());
      processMap.put("canCreateInstanceFromCS", new canCreateInstanceFromCS());
      processMap.put("canCreateInstanceFromME", new canCreateInstanceFromME());
      processMap.put("createInstanceFromCS", new createInstanceFromCS());
      processMap.put("createInstanceFromME", new createInstanceFromME());
      processMap.put("setupExperiment", new setupExperiment());
      processMap.put("enterInitializationMode", new enterInitializationMode());
      processMap.put("exitInitializationMode", new exitInitializationMode());
      processMap.put("step", new step());
      processMap.put("reset", new reset());
      processMap.put("terminate", new terminate());
      processMap.put("readInteger", new readInteger());
      processMap.put("readReal", new readReal());
      processMap.put("readString", new readString());
      processMap.put("readBoolean", new readBoolean());
      processMap.put("writeInteger", new writeInteger());
      processMap.put("writeReal", new writeReal());
      processMap.put("writeString", new writeString());
      processMap.put("writeBoolean", new writeBoolean());
      processMap.put("getFMUstate", new getFMUstate());
      processMap.put("setFMUstate", new setFMUstate());
      processMap.put("freeFMUstate", new freeFMUstate());
      processMap.put("serializeFMUstate", new serializeFMUstate());
      processMap.put("deSerializeFMUstate", new deSerializeFMUstate());
      processMap.put("getDirectionalDerivative", new getDirectionalDerivative());
      return processMap;
    }

    public static class getModelDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getModelDescription_args, ModelDescription> {
      public getModelDescription() {
        super("getModelDescription");
      }

      public getModelDescription_args getEmptyArgsInstance() {
        return new getModelDescription_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ModelDescription> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ModelDescription>() { 
          public void onComplete(ModelDescription o) {
            getModelDescription_result result = new getModelDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getModelDescription_result result = new getModelDescription_result();
            if (e instanceof NoSuchFmuException) {
              result.ex = (NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getModelDescription_args args, org.apache.thrift.async.AsyncMethodCallback<ModelDescription> resultHandler) throws org.apache.thrift.TException {
        iface.getModelDescription(args.fmuId,resultHandler);
      }
    }

    public static class getCoSimulationAttributes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCoSimulationAttributes_args, CoSimulationAttributes> {
      public getCoSimulationAttributes() {
        super("getCoSimulationAttributes");
      }

      public getCoSimulationAttributes_args getEmptyArgsInstance() {
        return new getCoSimulationAttributes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CoSimulationAttributes> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CoSimulationAttributes>() { 
          public void onComplete(CoSimulationAttributes o) {
            getCoSimulationAttributes_result result = new getCoSimulationAttributes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCoSimulationAttributes_result result = new getCoSimulationAttributes_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex = (NoSuchInstanceException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCoSimulationAttributes_args args, org.apache.thrift.async.AsyncMethodCallback<CoSimulationAttributes> resultHandler) throws org.apache.thrift.TException {
        iface.getCoSimulationAttributes(args.instanceId,resultHandler);
      }
    }

    public static class canCreateInstanceFromCS<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canCreateInstanceFromCS_args, java.lang.Boolean> {
      public canCreateInstanceFromCS() {
        super("canCreateInstanceFromCS");
      }

      public canCreateInstanceFromCS_args getEmptyArgsInstance() {
        return new canCreateInstanceFromCS_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            canCreateInstanceFromCS_result result = new canCreateInstanceFromCS_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            canCreateInstanceFromCS_result result = new canCreateInstanceFromCS_result();
            if (e instanceof NoSuchFmuException) {
              result.ex = (NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, canCreateInstanceFromCS_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.canCreateInstanceFromCS(args.fmuId,resultHandler);
      }
    }

    public static class canCreateInstanceFromME<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canCreateInstanceFromME_args, java.lang.Boolean> {
      public canCreateInstanceFromME() {
        super("canCreateInstanceFromME");
      }

      public canCreateInstanceFromME_args getEmptyArgsInstance() {
        return new canCreateInstanceFromME_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            canCreateInstanceFromME_result result = new canCreateInstanceFromME_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            canCreateInstanceFromME_result result = new canCreateInstanceFromME_result();
            if (e instanceof NoSuchFmuException) {
              result.ex = (NoSuchFmuException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, canCreateInstanceFromME_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.canCreateInstanceFromME(args.fmuId,resultHandler);
      }
    }

    public static class createInstanceFromCS<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createInstanceFromCS_args, java.lang.String> {
      public createInstanceFromCS() {
        super("createInstanceFromCS");
      }

      public createInstanceFromCS_args getEmptyArgsInstance() {
        return new createInstanceFromCS_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createInstanceFromCS_result result = new createInstanceFromCS_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createInstanceFromCS_result result = new createInstanceFromCS_result();
            if (e instanceof UnsupportedOperationException) {
              result.ex1 = (UnsupportedOperationException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchFmuException) {
              result.ex2 = (NoSuchFmuException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createInstanceFromCS_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createInstanceFromCS(args.fmuId,resultHandler);
      }
    }

    public static class createInstanceFromME<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createInstanceFromME_args, java.lang.String> {
      public createInstanceFromME() {
        super("createInstanceFromME");
      }

      public createInstanceFromME_args getEmptyArgsInstance() {
        return new createInstanceFromME_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createInstanceFromME_result result = new createInstanceFromME_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createInstanceFromME_result result = new createInstanceFromME_result();
            if (e instanceof UnsupportedOperationException) {
              result.ex1 = (UnsupportedOperationException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchFmuException) {
              result.ex2 = (NoSuchFmuException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createInstanceFromME_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createInstanceFromME(args.fmuId, args.solver,resultHandler);
      }
    }

    public static class setupExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setupExperiment_args, Status> {
      public setupExperiment() {
        super("setupExperiment");
      }

      public setupExperiment_args getEmptyArgsInstance() {
        return new setupExperiment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            setupExperiment_result result = new setupExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setupExperiment_result result = new setupExperiment_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex = (NoSuchInstanceException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setupExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.setupExperiment(args.instanceId, args.start, args.stop, args.tolerance,resultHandler);
      }
    }

    public static class enterInitializationMode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enterInitializationMode_args, Status> {
      public enterInitializationMode() {
        super("enterInitializationMode");
      }

      public enterInitializationMode_args getEmptyArgsInstance() {
        return new enterInitializationMode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            enterInitializationMode_result result = new enterInitializationMode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            enterInitializationMode_result result = new enterInitializationMode_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex = (NoSuchInstanceException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enterInitializationMode_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.enterInitializationMode(args.instanceId,resultHandler);
      }
    }

    public static class exitInitializationMode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exitInitializationMode_args, Status> {
      public exitInitializationMode() {
        super("exitInitializationMode");
      }

      public exitInitializationMode_args getEmptyArgsInstance() {
        return new exitInitializationMode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            exitInitializationMode_result result = new exitInitializationMode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            exitInitializationMode_result result = new exitInitializationMode_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex = (NoSuchInstanceException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exitInitializationMode_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.exitInitializationMode(args.instanceId,resultHandler);
      }
    }

    public static class step<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, step_args, StepResult> {
      public step() {
        super("step");
      }

      public step_args getEmptyArgsInstance() {
        return new step_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StepResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StepResult>() { 
          public void onComplete(StepResult o) {
            step_result result = new step_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            step_result result = new step_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex = (NoSuchInstanceException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, step_args args, org.apache.thrift.async.AsyncMethodCallback<StepResult> resultHandler) throws org.apache.thrift.TException {
        iface.step(args.instanceId, args.stepSize,resultHandler);
      }
    }

    public static class reset<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reset_args, Status> {
      public reset() {
        super("reset");
      }

      public reset_args getEmptyArgsInstance() {
        return new reset_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            reset_result result = new reset_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reset_result result = new reset_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex = (NoSuchInstanceException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reset_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.reset(args.instanceId,resultHandler);
      }
    }

    public static class terminate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminate_args, Status> {
      public terminate() {
        super("terminate");
      }

      public terminate_args getEmptyArgsInstance() {
        return new terminate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            terminate_result result = new terminate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            terminate_result result = new terminate_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex = (NoSuchInstanceException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminate_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.terminate(args.instanceId,resultHandler);
      }
    }

    public static class readInteger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readInteger_args, IntegerRead> {
      public readInteger() {
        super("readInteger");
      }

      public readInteger_args getEmptyArgsInstance() {
        return new readInteger_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<IntegerRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<IntegerRead>() { 
          public void onComplete(IntegerRead o) {
            readInteger_result result = new readInteger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readInteger_result result = new readInteger_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readInteger_args args, org.apache.thrift.async.AsyncMethodCallback<IntegerRead> resultHandler) throws org.apache.thrift.TException {
        iface.readInteger(args.instanceId, args.vr,resultHandler);
      }
    }

    public static class readReal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readReal_args, RealRead> {
      public readReal() {
        super("readReal");
      }

      public readReal_args getEmptyArgsInstance() {
        return new readReal_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RealRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RealRead>() { 
          public void onComplete(RealRead o) {
            readReal_result result = new readReal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readReal_result result = new readReal_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readReal_args args, org.apache.thrift.async.AsyncMethodCallback<RealRead> resultHandler) throws org.apache.thrift.TException {
        iface.readReal(args.instanceId, args.vr,resultHandler);
      }
    }

    public static class readString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readString_args, StringRead> {
      public readString() {
        super("readString");
      }

      public readString_args getEmptyArgsInstance() {
        return new readString_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StringRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StringRead>() { 
          public void onComplete(StringRead o) {
            readString_result result = new readString_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readString_result result = new readString_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readString_args args, org.apache.thrift.async.AsyncMethodCallback<StringRead> resultHandler) throws org.apache.thrift.TException {
        iface.readString(args.instanceId, args.vr,resultHandler);
      }
    }

    public static class readBoolean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readBoolean_args, BooleanRead> {
      public readBoolean() {
        super("readBoolean");
      }

      public readBoolean_args getEmptyArgsInstance() {
        return new readBoolean_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<BooleanRead> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<BooleanRead>() { 
          public void onComplete(BooleanRead o) {
            readBoolean_result result = new readBoolean_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readBoolean_result result = new readBoolean_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readBoolean_args args, org.apache.thrift.async.AsyncMethodCallback<BooleanRead> resultHandler) throws org.apache.thrift.TException {
        iface.readBoolean(args.instanceId, args.vr,resultHandler);
      }
    }

    public static class writeInteger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeInteger_args, Status> {
      public writeInteger() {
        super("writeInteger");
      }

      public writeInteger_args getEmptyArgsInstance() {
        return new writeInteger_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            writeInteger_result result = new writeInteger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeInteger_result result = new writeInteger_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeInteger_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.writeInteger(args.instanceId, args.vr, args.value,resultHandler);
      }
    }

    public static class writeReal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeReal_args, Status> {
      public writeReal() {
        super("writeReal");
      }

      public writeReal_args getEmptyArgsInstance() {
        return new writeReal_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            writeReal_result result = new writeReal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeReal_result result = new writeReal_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeReal_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.writeReal(args.instanceId, args.vr, args.value,resultHandler);
      }
    }

    public static class writeString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeString_args, Status> {
      public writeString() {
        super("writeString");
      }

      public writeString_args getEmptyArgsInstance() {
        return new writeString_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            writeString_result result = new writeString_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeString_result result = new writeString_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeString_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.writeString(args.instanceId, args.vr, args.value,resultHandler);
      }
    }

    public static class writeBoolean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeBoolean_args, Status> {
      public writeBoolean() {
        super("writeBoolean");
      }

      public writeBoolean_args getEmptyArgsInstance() {
        return new writeBoolean_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            writeBoolean_result result = new writeBoolean_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeBoolean_result result = new writeBoolean_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof NoSuchVariableException) {
              result.ex2 = (NoSuchVariableException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeBoolean_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.writeBoolean(args.instanceId, args.vr, args.value,resultHandler);
      }
    }

    public static class getFMUstate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFMUstate_args, GetFmuStateResult> {
      public getFMUstate() {
        super("getFMUstate");
      }

      public getFMUstate_args getEmptyArgsInstance() {
        return new getFMUstate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<GetFmuStateResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<GetFmuStateResult>() { 
          public void onComplete(GetFmuStateResult o) {
            getFMUstate_result result = new getFMUstate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getFMUstate_result result = new getFMUstate_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof UnsupportedOperationException) {
              result.ex2 = (UnsupportedOperationException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFMUstate_args args, org.apache.thrift.async.AsyncMethodCallback<GetFmuStateResult> resultHandler) throws org.apache.thrift.TException {
        iface.getFMUstate(args.instanceId,resultHandler);
      }
    }

    public static class setFMUstate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setFMUstate_args, Status> {
      public setFMUstate() {
        super("setFMUstate");
      }

      public setFMUstate_args getEmptyArgsInstance() {
        return new setFMUstate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            setFMUstate_result result = new setFMUstate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setFMUstate_result result = new setFMUstate_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof UnsupportedOperationException) {
              result.ex2 = (UnsupportedOperationException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setFMUstate_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.setFMUstate(args.instanceId, args.state,resultHandler);
      }
    }

    public static class freeFMUstate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, freeFMUstate_args, Status> {
      public freeFMUstate() {
        super("freeFMUstate");
      }

      public freeFMUstate_args getEmptyArgsInstance() {
        return new freeFMUstate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Status> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            freeFMUstate_result result = new freeFMUstate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            freeFMUstate_result result = new freeFMUstate_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof UnsupportedOperationException) {
              result.ex2 = (UnsupportedOperationException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, freeFMUstate_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws org.apache.thrift.TException {
        iface.freeFMUstate(args.instanceId, args.state,resultHandler);
      }
    }

    public static class serializeFMUstate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, serializeFMUstate_args, SerializeFmuStateResult> {
      public serializeFMUstate() {
        super("serializeFMUstate");
      }

      public serializeFMUstate_args getEmptyArgsInstance() {
        return new serializeFMUstate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SerializeFmuStateResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SerializeFmuStateResult>() { 
          public void onComplete(SerializeFmuStateResult o) {
            serializeFMUstate_result result = new serializeFMUstate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            serializeFMUstate_result result = new serializeFMUstate_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof UnsupportedOperationException) {
              result.ex2 = (UnsupportedOperationException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, serializeFMUstate_args args, org.apache.thrift.async.AsyncMethodCallback<SerializeFmuStateResult> resultHandler) throws org.apache.thrift.TException {
        iface.serializeFMUstate(args.instanceId, args.state,resultHandler);
      }
    }

    public static class deSerializeFMUstate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deSerializeFMUstate_args, DeSerializeFmuStateResult> {
      public deSerializeFMUstate() {
        super("deSerializeFMUstate");
      }

      public deSerializeFMUstate_args getEmptyArgsInstance() {
        return new deSerializeFMUstate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DeSerializeFmuStateResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DeSerializeFmuStateResult>() { 
          public void onComplete(DeSerializeFmuStateResult o) {
            deSerializeFMUstate_result result = new deSerializeFMUstate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deSerializeFMUstate_result result = new deSerializeFMUstate_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof UnsupportedOperationException) {
              result.ex2 = (UnsupportedOperationException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deSerializeFMUstate_args args, org.apache.thrift.async.AsyncMethodCallback<DeSerializeFmuStateResult> resultHandler) throws org.apache.thrift.TException {
        iface.deSerializeFMUstate(args.instanceId, args.state,resultHandler);
      }
    }

    public static class getDirectionalDerivative<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDirectionalDerivative_args, DirectionalDerivativeResult> {
      public getDirectionalDerivative() {
        super("getDirectionalDerivative");
      }

      public getDirectionalDerivative_args getEmptyArgsInstance() {
        return new getDirectionalDerivative_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DirectionalDerivativeResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DirectionalDerivativeResult>() { 
          public void onComplete(DirectionalDerivativeResult o) {
            getDirectionalDerivative_result result = new getDirectionalDerivative_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDirectionalDerivative_result result = new getDirectionalDerivative_result();
            if (e instanceof NoSuchInstanceException) {
              result.ex1 = (NoSuchInstanceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof UnsupportedOperationException) {
              result.ex2 = (UnsupportedOperationException) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDirectionalDerivative_args args, org.apache.thrift.async.AsyncMethodCallback<DirectionalDerivativeResult> resultHandler) throws org.apache.thrift.TException {
        iface.getDirectionalDerivative(args.instanceId, args.vUnknownRef, args.vKnownRef, args.dvKnownRef,resultHandler);
      }
    }

  }

  public static class getModelDescription_args implements org.apache.thrift.TBase<getModelDescription_args, getModelDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<getModelDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelDescription_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmuId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getModelDescription_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getModelDescription_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String fmuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmuId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelDescription_args.class, metaDataMap);
    }

    public getModelDescription_args() {
    }

    public getModelDescription_args(
      java.lang.String fmuId)
    {
      this();
      this.fmuId = fmuId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelDescription_args(getModelDescription_args other) {
      if (other.isSetFmuId()) {
        this.fmuId = other.fmuId;
      }
    }

    public getModelDescription_args deepCopy() {
      return new getModelDescription_args(this);
    }

    @Override
    public void clear() {
      this.fmuId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFmuId() {
      return this.fmuId;
    }

    public getModelDescription_args setFmuId(@org.apache.thrift.annotation.Nullable java.lang.String fmuId) {
      this.fmuId = fmuId;
      return this;
    }

    public void unsetFmuId() {
      this.fmuId = null;
    }

    /** Returns true if field fmuId is set (has been assigned a value) and false otherwise */
    public boolean isSetFmuId() {
      return this.fmuId != null;
    }

    public void setFmuIdIsSet(boolean value) {
      if (!value) {
        this.fmuId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmuId();
        } else {
          setFmuId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmuId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmuId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelDescription_args)
        return this.equals((getModelDescription_args)that);
      return false;
    }

    public boolean equals(getModelDescription_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmuId = true && this.isSetFmuId();
      boolean that_present_fmuId = true && that.isSetFmuId();
      if (this_present_fmuId || that_present_fmuId) {
        if (!(this_present_fmuId && that_present_fmuId))
          return false;
        if (!this.fmuId.equals(that.fmuId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFmuId()) ? 131071 : 524287);
      if (isSetFmuId())
        hashCode = hashCode * 8191 + fmuId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getModelDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmuId()).compareTo(other.isSetFmuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuId, other.fmuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getModelDescription_args(");
      boolean first = true;

      sb.append("fmuId:");
      if (this.fmuId == null) {
        sb.append("null");
      } else {
        sb.append(this.fmuId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelDescription_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_argsStandardScheme getScheme() {
        return new getModelDescription_argsStandardScheme();
      }
    }

    private static class getModelDescription_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getModelDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fmuId = iprot.readString();
                struct.setFmuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fmuId != null) {
          oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
          oprot.writeString(struct.fmuId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelDescription_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_argsTupleScheme getScheme() {
        return new getModelDescription_argsTupleScheme();
      }
    }

    private static class getModelDescription_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getModelDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmuId()) {
          oprot.writeString(struct.fmuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmuId = iprot.readString();
          struct.setFmuIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getModelDescription_result implements org.apache.thrift.TBase<getModelDescription_result, getModelDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<getModelDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getModelDescription_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getModelDescription_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ModelDescription success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelDescription.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelDescription_result.class, metaDataMap);
    }

    public getModelDescription_result() {
    }

    public getModelDescription_result(
      ModelDescription success,
      NoSuchFmuException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelDescription_result(getModelDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = new ModelDescription(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchFmuException(other.ex);
      }
    }

    public getModelDescription_result deepCopy() {
      return new getModelDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ModelDescription getSuccess() {
      return this.success;
    }

    public getModelDescription_result setSuccess(@org.apache.thrift.annotation.Nullable ModelDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchFmuException getEx() {
      return this.ex;
    }

    public getModelDescription_result setEx(@org.apache.thrift.annotation.Nullable NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ModelDescription)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchFmuException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelDescription_result)
        return this.equals((getModelDescription_result)that);
      return false;
    }

    public boolean equals(getModelDescription_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getModelDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getModelDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelDescription_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_resultStandardScheme getScheme() {
        return new getModelDescription_resultStandardScheme();
      }
    }

    private static class getModelDescription_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getModelDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ModelDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelDescription_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getModelDescription_resultTupleScheme getScheme() {
        return new getModelDescription_resultTupleScheme();
      }
    }

    private static class getModelDescription_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getModelDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ModelDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCoSimulationAttributes_args implements org.apache.thrift.TBase<getCoSimulationAttributes_args, getCoSimulationAttributes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCoSimulationAttributes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoSimulationAttributes_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoSimulationAttributes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoSimulationAttributes_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoSimulationAttributes_args.class, metaDataMap);
    }

    public getCoSimulationAttributes_args() {
    }

    public getCoSimulationAttributes_args(
      java.lang.String instanceId)
    {
      this();
      this.instanceId = instanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoSimulationAttributes_args(getCoSimulationAttributes_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
    }

    public getCoSimulationAttributes_args deepCopy() {
      return new getCoSimulationAttributes_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public getCoSimulationAttributes_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoSimulationAttributes_args)
        return this.equals((getCoSimulationAttributes_args)that);
      return false;
    }

    public boolean equals(getCoSimulationAttributes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCoSimulationAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCoSimulationAttributes_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoSimulationAttributes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoSimulationAttributes_argsStandardScheme getScheme() {
        return new getCoSimulationAttributes_argsStandardScheme();
      }
    }

    private static class getCoSimulationAttributes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCoSimulationAttributes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoSimulationAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoSimulationAttributes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoSimulationAttributes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoSimulationAttributes_argsTupleScheme getScheme() {
        return new getCoSimulationAttributes_argsTupleScheme();
      }
    }

    private static class getCoSimulationAttributes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCoSimulationAttributes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoSimulationAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoSimulationAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCoSimulationAttributes_result implements org.apache.thrift.TBase<getCoSimulationAttributes_result, getCoSimulationAttributes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCoSimulationAttributes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoSimulationAttributes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoSimulationAttributes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoSimulationAttributes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CoSimulationAttributes success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoSimulationAttributes.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoSimulationAttributes_result.class, metaDataMap);
    }

    public getCoSimulationAttributes_result() {
    }

    public getCoSimulationAttributes_result(
      CoSimulationAttributes success,
      NoSuchInstanceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoSimulationAttributes_result(getCoSimulationAttributes_result other) {
      if (other.isSetSuccess()) {
        this.success = new CoSimulationAttributes(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchInstanceException(other.ex);
      }
    }

    public getCoSimulationAttributes_result deepCopy() {
      return new getCoSimulationAttributes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CoSimulationAttributes getSuccess() {
      return this.success;
    }

    public getCoSimulationAttributes_result setSuccess(@org.apache.thrift.annotation.Nullable CoSimulationAttributes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx() {
      return this.ex;
    }

    public getCoSimulationAttributes_result setEx(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CoSimulationAttributes)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchInstanceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoSimulationAttributes_result)
        return this.equals((getCoSimulationAttributes_result)that);
      return false;
    }

    public boolean equals(getCoSimulationAttributes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCoSimulationAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCoSimulationAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoSimulationAttributes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoSimulationAttributes_resultStandardScheme getScheme() {
        return new getCoSimulationAttributes_resultStandardScheme();
      }
    }

    private static class getCoSimulationAttributes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCoSimulationAttributes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoSimulationAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CoSimulationAttributes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchInstanceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoSimulationAttributes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoSimulationAttributes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoSimulationAttributes_resultTupleScheme getScheme() {
        return new getCoSimulationAttributes_resultTupleScheme();
      }
    }

    private static class getCoSimulationAttributes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCoSimulationAttributes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoSimulationAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoSimulationAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CoSimulationAttributes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchInstanceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canCreateInstanceFromCS_args implements org.apache.thrift.TBase<canCreateInstanceFromCS_args, canCreateInstanceFromCS_args._Fields>, java.io.Serializable, Cloneable, Comparable<canCreateInstanceFromCS_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canCreateInstanceFromCS_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmuId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canCreateInstanceFromCS_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canCreateInstanceFromCS_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String fmuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmuId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canCreateInstanceFromCS_args.class, metaDataMap);
    }

    public canCreateInstanceFromCS_args() {
    }

    public canCreateInstanceFromCS_args(
      java.lang.String fmuId)
    {
      this();
      this.fmuId = fmuId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canCreateInstanceFromCS_args(canCreateInstanceFromCS_args other) {
      if (other.isSetFmuId()) {
        this.fmuId = other.fmuId;
      }
    }

    public canCreateInstanceFromCS_args deepCopy() {
      return new canCreateInstanceFromCS_args(this);
    }

    @Override
    public void clear() {
      this.fmuId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFmuId() {
      return this.fmuId;
    }

    public canCreateInstanceFromCS_args setFmuId(@org.apache.thrift.annotation.Nullable java.lang.String fmuId) {
      this.fmuId = fmuId;
      return this;
    }

    public void unsetFmuId() {
      this.fmuId = null;
    }

    /** Returns true if field fmuId is set (has been assigned a value) and false otherwise */
    public boolean isSetFmuId() {
      return this.fmuId != null;
    }

    public void setFmuIdIsSet(boolean value) {
      if (!value) {
        this.fmuId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmuId();
        } else {
          setFmuId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmuId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmuId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof canCreateInstanceFromCS_args)
        return this.equals((canCreateInstanceFromCS_args)that);
      return false;
    }

    public boolean equals(canCreateInstanceFromCS_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmuId = true && this.isSetFmuId();
      boolean that_present_fmuId = true && that.isSetFmuId();
      if (this_present_fmuId || that_present_fmuId) {
        if (!(this_present_fmuId && that_present_fmuId))
          return false;
        if (!this.fmuId.equals(that.fmuId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFmuId()) ? 131071 : 524287);
      if (isSetFmuId())
        hashCode = hashCode * 8191 + fmuId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canCreateInstanceFromCS_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmuId()).compareTo(other.isSetFmuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuId, other.fmuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canCreateInstanceFromCS_args(");
      boolean first = true;

      sb.append("fmuId:");
      if (this.fmuId == null) {
        sb.append("null");
      } else {
        sb.append(this.fmuId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canCreateInstanceFromCS_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromCS_argsStandardScheme getScheme() {
        return new canCreateInstanceFromCS_argsStandardScheme();
      }
    }

    private static class canCreateInstanceFromCS_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<canCreateInstanceFromCS_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canCreateInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fmuId = iprot.readString();
                struct.setFmuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canCreateInstanceFromCS_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fmuId != null) {
          oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
          oprot.writeString(struct.fmuId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canCreateInstanceFromCS_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromCS_argsTupleScheme getScheme() {
        return new canCreateInstanceFromCS_argsTupleScheme();
      }
    }

    private static class canCreateInstanceFromCS_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<canCreateInstanceFromCS_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmuId()) {
          oprot.writeString(struct.fmuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmuId = iprot.readString();
          struct.setFmuIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canCreateInstanceFromCS_result implements org.apache.thrift.TBase<canCreateInstanceFromCS_result, canCreateInstanceFromCS_result._Fields>, java.io.Serializable, Cloneable, Comparable<canCreateInstanceFromCS_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canCreateInstanceFromCS_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canCreateInstanceFromCS_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canCreateInstanceFromCS_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canCreateInstanceFromCS_result.class, metaDataMap);
    }

    public canCreateInstanceFromCS_result() {
    }

    public canCreateInstanceFromCS_result(
      boolean success,
      NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canCreateInstanceFromCS_result(canCreateInstanceFromCS_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new NoSuchFmuException(other.ex);
      }
    }

    public canCreateInstanceFromCS_result deepCopy() {
      return new canCreateInstanceFromCS_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canCreateInstanceFromCS_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchFmuException getEx() {
      return this.ex;
    }

    public canCreateInstanceFromCS_result setEx(@org.apache.thrift.annotation.Nullable NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchFmuException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof canCreateInstanceFromCS_result)
        return this.equals((canCreateInstanceFromCS_result)that);
      return false;
    }

    public boolean equals(canCreateInstanceFromCS_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canCreateInstanceFromCS_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canCreateInstanceFromCS_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canCreateInstanceFromCS_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromCS_resultStandardScheme getScheme() {
        return new canCreateInstanceFromCS_resultStandardScheme();
      }
    }

    private static class canCreateInstanceFromCS_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<canCreateInstanceFromCS_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canCreateInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canCreateInstanceFromCS_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canCreateInstanceFromCS_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromCS_resultTupleScheme getScheme() {
        return new canCreateInstanceFromCS_resultTupleScheme();
      }
    }

    private static class canCreateInstanceFromCS_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<canCreateInstanceFromCS_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canCreateInstanceFromME_args implements org.apache.thrift.TBase<canCreateInstanceFromME_args, canCreateInstanceFromME_args._Fields>, java.io.Serializable, Cloneable, Comparable<canCreateInstanceFromME_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canCreateInstanceFromME_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmuId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canCreateInstanceFromME_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canCreateInstanceFromME_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String fmuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmuId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canCreateInstanceFromME_args.class, metaDataMap);
    }

    public canCreateInstanceFromME_args() {
    }

    public canCreateInstanceFromME_args(
      java.lang.String fmuId)
    {
      this();
      this.fmuId = fmuId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canCreateInstanceFromME_args(canCreateInstanceFromME_args other) {
      if (other.isSetFmuId()) {
        this.fmuId = other.fmuId;
      }
    }

    public canCreateInstanceFromME_args deepCopy() {
      return new canCreateInstanceFromME_args(this);
    }

    @Override
    public void clear() {
      this.fmuId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFmuId() {
      return this.fmuId;
    }

    public canCreateInstanceFromME_args setFmuId(@org.apache.thrift.annotation.Nullable java.lang.String fmuId) {
      this.fmuId = fmuId;
      return this;
    }

    public void unsetFmuId() {
      this.fmuId = null;
    }

    /** Returns true if field fmuId is set (has been assigned a value) and false otherwise */
    public boolean isSetFmuId() {
      return this.fmuId != null;
    }

    public void setFmuIdIsSet(boolean value) {
      if (!value) {
        this.fmuId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmuId();
        } else {
          setFmuId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmuId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmuId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof canCreateInstanceFromME_args)
        return this.equals((canCreateInstanceFromME_args)that);
      return false;
    }

    public boolean equals(canCreateInstanceFromME_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmuId = true && this.isSetFmuId();
      boolean that_present_fmuId = true && that.isSetFmuId();
      if (this_present_fmuId || that_present_fmuId) {
        if (!(this_present_fmuId && that_present_fmuId))
          return false;
        if (!this.fmuId.equals(that.fmuId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFmuId()) ? 131071 : 524287);
      if (isSetFmuId())
        hashCode = hashCode * 8191 + fmuId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canCreateInstanceFromME_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmuId()).compareTo(other.isSetFmuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuId, other.fmuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canCreateInstanceFromME_args(");
      boolean first = true;

      sb.append("fmuId:");
      if (this.fmuId == null) {
        sb.append("null");
      } else {
        sb.append(this.fmuId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canCreateInstanceFromME_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromME_argsStandardScheme getScheme() {
        return new canCreateInstanceFromME_argsStandardScheme();
      }
    }

    private static class canCreateInstanceFromME_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<canCreateInstanceFromME_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canCreateInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fmuId = iprot.readString();
                struct.setFmuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canCreateInstanceFromME_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fmuId != null) {
          oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
          oprot.writeString(struct.fmuId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canCreateInstanceFromME_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromME_argsTupleScheme getScheme() {
        return new canCreateInstanceFromME_argsTupleScheme();
      }
    }

    private static class canCreateInstanceFromME_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<canCreateInstanceFromME_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmuId()) {
          oprot.writeString(struct.fmuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmuId = iprot.readString();
          struct.setFmuIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canCreateInstanceFromME_result implements org.apache.thrift.TBase<canCreateInstanceFromME_result, canCreateInstanceFromME_result._Fields>, java.io.Serializable, Cloneable, Comparable<canCreateInstanceFromME_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canCreateInstanceFromME_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canCreateInstanceFromME_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canCreateInstanceFromME_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchFmuException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canCreateInstanceFromME_result.class, metaDataMap);
    }

    public canCreateInstanceFromME_result() {
    }

    public canCreateInstanceFromME_result(
      boolean success,
      NoSuchFmuException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canCreateInstanceFromME_result(canCreateInstanceFromME_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new NoSuchFmuException(other.ex);
      }
    }

    public canCreateInstanceFromME_result deepCopy() {
      return new canCreateInstanceFromME_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canCreateInstanceFromME_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchFmuException getEx() {
      return this.ex;
    }

    public canCreateInstanceFromME_result setEx(@org.apache.thrift.annotation.Nullable NoSuchFmuException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchFmuException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof canCreateInstanceFromME_result)
        return this.equals((canCreateInstanceFromME_result)that);
      return false;
    }

    public boolean equals(canCreateInstanceFromME_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canCreateInstanceFromME_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canCreateInstanceFromME_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canCreateInstanceFromME_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromME_resultStandardScheme getScheme() {
        return new canCreateInstanceFromME_resultStandardScheme();
      }
    }

    private static class canCreateInstanceFromME_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<canCreateInstanceFromME_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canCreateInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchFmuException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canCreateInstanceFromME_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canCreateInstanceFromME_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canCreateInstanceFromME_resultTupleScheme getScheme() {
        return new canCreateInstanceFromME_resultTupleScheme();
      }
    }

    private static class canCreateInstanceFromME_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<canCreateInstanceFromME_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canCreateInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchFmuException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromCS_args implements org.apache.thrift.TBase<createInstanceFromCS_args, createInstanceFromCS_args._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromCS_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromCS_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmuId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromCS_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromCS_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String fmuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmuId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FmuId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromCS_args.class, metaDataMap);
    }

    public createInstanceFromCS_args() {
    }

    public createInstanceFromCS_args(
      java.lang.String fmuId)
    {
      this();
      this.fmuId = fmuId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromCS_args(createInstanceFromCS_args other) {
      if (other.isSetFmuId()) {
        this.fmuId = other.fmuId;
      }
    }

    public createInstanceFromCS_args deepCopy() {
      return new createInstanceFromCS_args(this);
    }

    @Override
    public void clear() {
      this.fmuId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFmuId() {
      return this.fmuId;
    }

    public createInstanceFromCS_args setFmuId(@org.apache.thrift.annotation.Nullable java.lang.String fmuId) {
      this.fmuId = fmuId;
      return this;
    }

    public void unsetFmuId() {
      this.fmuId = null;
    }

    /** Returns true if field fmuId is set (has been assigned a value) and false otherwise */
    public boolean isSetFmuId() {
      return this.fmuId != null;
    }

    public void setFmuIdIsSet(boolean value) {
      if (!value) {
        this.fmuId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmuId();
        } else {
          setFmuId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmuId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmuId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromCS_args)
        return this.equals((createInstanceFromCS_args)that);
      return false;
    }

    public boolean equals(createInstanceFromCS_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmuId = true && this.isSetFmuId();
      boolean that_present_fmuId = true && that.isSetFmuId();
      if (this_present_fmuId || that_present_fmuId) {
        if (!(this_present_fmuId && that_present_fmuId))
          return false;
        if (!this.fmuId.equals(that.fmuId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFmuId()) ? 131071 : 524287);
      if (isSetFmuId())
        hashCode = hashCode * 8191 + fmuId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromCS_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmuId()).compareTo(other.isSetFmuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuId, other.fmuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromCS_args(");
      boolean first = true;

      sb.append("fmuId:");
      if (this.fmuId == null) {
        sb.append("null");
      } else {
        sb.append(this.fmuId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromCS_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_argsStandardScheme getScheme() {
        return new createInstanceFromCS_argsStandardScheme();
      }
    }

    private static class createInstanceFromCS_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromCS_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fmuId = iprot.readString();
                struct.setFmuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fmuId != null) {
          oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
          oprot.writeString(struct.fmuId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromCS_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_argsTupleScheme getScheme() {
        return new createInstanceFromCS_argsTupleScheme();
      }
    }

    private static class createInstanceFromCS_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromCS_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFmuId()) {
          oprot.writeString(struct.fmuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fmuId = iprot.readString();
          struct.setFmuIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromCS_result implements org.apache.thrift.TBase<createInstanceFromCS_result, createInstanceFromCS_result._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromCS_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromCS_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromCS_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromCS_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchFmuException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromCS_result.class, metaDataMap);
    }

    public createInstanceFromCS_result() {
    }

    public createInstanceFromCS_result(
      java.lang.String success,
      UnsupportedOperationException ex1,
      NoSuchFmuException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromCS_result(createInstanceFromCS_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new UnsupportedOperationException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchFmuException(other.ex2);
      }
    }

    public createInstanceFromCS_result deepCopy() {
      return new createInstanceFromCS_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public createInstanceFromCS_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx1() {
      return this.ex1;
    }

    public createInstanceFromCS_result setEx1(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchFmuException getEx2() {
      return this.ex2;
    }

    public createInstanceFromCS_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchFmuException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((UnsupportedOperationException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchFmuException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromCS_result)
        return this.equals((createInstanceFromCS_result)that);
      return false;
    }

    public boolean equals(createInstanceFromCS_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromCS_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromCS_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromCS_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_resultStandardScheme getScheme() {
        return new createInstanceFromCS_resultStandardScheme();
      }
    }

    private static class createInstanceFromCS_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromCS_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new UnsupportedOperationException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchFmuException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromCS_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromCS_resultTupleScheme getScheme() {
        return new createInstanceFromCS_resultTupleScheme();
      }
    }

    private static class createInstanceFromCS_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromCS_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromCS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new UnsupportedOperationException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchFmuException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromME_args implements org.apache.thrift.TBase<createInstanceFromME_args, createInstanceFromME_args._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromME_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromME_args");

    private static final org.apache.thrift.protocol.TField FMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fmuId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SOLVER_FIELD_DESC = new org.apache.thrift.protocol.TField("solver", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromME_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromME_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String fmuId; // required
    public @org.apache.thrift.annotation.Nullable Solver solver; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_ID((short)1, "fmuId"),
      SOLVER((short)2, "solver");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_ID
            return FMU_ID;
          case 2: // SOLVER
            return SOLVER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_ID, new org.apache.thrift.meta_data.FieldMetaData("fmuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FmuId")));
      tmpMap.put(_Fields.SOLVER, new org.apache.thrift.meta_data.FieldMetaData("solver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Solver.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromME_args.class, metaDataMap);
    }

    public createInstanceFromME_args() {
    }

    public createInstanceFromME_args(
      java.lang.String fmuId,
      Solver solver)
    {
      this();
      this.fmuId = fmuId;
      this.solver = solver;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromME_args(createInstanceFromME_args other) {
      if (other.isSetFmuId()) {
        this.fmuId = other.fmuId;
      }
      if (other.isSetSolver()) {
        this.solver = new Solver(other.solver);
      }
    }

    public createInstanceFromME_args deepCopy() {
      return new createInstanceFromME_args(this);
    }

    @Override
    public void clear() {
      this.fmuId = null;
      this.solver = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFmuId() {
      return this.fmuId;
    }

    public createInstanceFromME_args setFmuId(@org.apache.thrift.annotation.Nullable java.lang.String fmuId) {
      this.fmuId = fmuId;
      return this;
    }

    public void unsetFmuId() {
      this.fmuId = null;
    }

    /** Returns true if field fmuId is set (has been assigned a value) and false otherwise */
    public boolean isSetFmuId() {
      return this.fmuId != null;
    }

    public void setFmuIdIsSet(boolean value) {
      if (!value) {
        this.fmuId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Solver getSolver() {
      return this.solver;
    }

    public createInstanceFromME_args setSolver(@org.apache.thrift.annotation.Nullable Solver solver) {
      this.solver = solver;
      return this;
    }

    public void unsetSolver() {
      this.solver = null;
    }

    /** Returns true if field solver is set (has been assigned a value) and false otherwise */
    public boolean isSetSolver() {
      return this.solver != null;
    }

    public void setSolverIsSet(boolean value) {
      if (!value) {
        this.solver = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FMU_ID:
        if (value == null) {
          unsetFmuId();
        } else {
          setFmuId((java.lang.String)value);
        }
        break;

      case SOLVER:
        if (value == null) {
          unsetSolver();
        } else {
          setSolver((Solver)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_ID:
        return getFmuId();

      case SOLVER:
        return getSolver();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_ID:
        return isSetFmuId();
      case SOLVER:
        return isSetSolver();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromME_args)
        return this.equals((createInstanceFromME_args)that);
      return false;
    }

    public boolean equals(createInstanceFromME_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmuId = true && this.isSetFmuId();
      boolean that_present_fmuId = true && that.isSetFmuId();
      if (this_present_fmuId || that_present_fmuId) {
        if (!(this_present_fmuId && that_present_fmuId))
          return false;
        if (!this.fmuId.equals(that.fmuId))
          return false;
      }

      boolean this_present_solver = true && this.isSetSolver();
      boolean that_present_solver = true && that.isSetSolver();
      if (this_present_solver || that_present_solver) {
        if (!(this_present_solver && that_present_solver))
          return false;
        if (!this.solver.equals(that.solver))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFmuId()) ? 131071 : 524287);
      if (isSetFmuId())
        hashCode = hashCode * 8191 + fmuId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSolver()) ? 131071 : 524287);
      if (isSetSolver())
        hashCode = hashCode * 8191 + solver.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromME_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmuId()).compareTo(other.isSetFmuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuId, other.fmuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSolver()).compareTo(other.isSetSolver());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSolver()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.solver, other.solver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromME_args(");
      boolean first = true;

      sb.append("fmuId:");
      if (this.fmuId == null) {
        sb.append("null");
      } else {
        sb.append(this.fmuId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("solver:");
      if (this.solver == null) {
        sb.append("null");
      } else {
        sb.append(this.solver);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (solver != null) {
        solver.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromME_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_argsStandardScheme getScheme() {
        return new createInstanceFromME_argsStandardScheme();
      }
    }

    private static class createInstanceFromME_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromME_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fmuId = iprot.readString();
                struct.setFmuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOLVER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.solver = new Solver();
                struct.solver.read(iprot);
                struct.setSolverIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fmuId != null) {
          oprot.writeFieldBegin(FMU_ID_FIELD_DESC);
          oprot.writeString(struct.fmuId);
          oprot.writeFieldEnd();
        }
        if (struct.solver != null) {
          oprot.writeFieldBegin(SOLVER_FIELD_DESC);
          struct.solver.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromME_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_argsTupleScheme getScheme() {
        return new createInstanceFromME_argsTupleScheme();
      }
    }

    private static class createInstanceFromME_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromME_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmuId()) {
          optionals.set(0);
        }
        if (struct.isSetSolver()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFmuId()) {
          oprot.writeString(struct.fmuId);
        }
        if (struct.isSetSolver()) {
          struct.solver.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fmuId = iprot.readString();
          struct.setFmuIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.solver = new Solver();
          struct.solver.read(iprot);
          struct.setSolverIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createInstanceFromME_result implements org.apache.thrift.TBase<createInstanceFromME_result, createInstanceFromME_result._Fields>, java.io.Serializable, Cloneable, Comparable<createInstanceFromME_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInstanceFromME_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createInstanceFromME_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createInstanceFromME_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchFmuException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchFmuException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInstanceFromME_result.class, metaDataMap);
    }

    public createInstanceFromME_result() {
    }

    public createInstanceFromME_result(
      java.lang.String success,
      UnsupportedOperationException ex1,
      NoSuchFmuException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInstanceFromME_result(createInstanceFromME_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new UnsupportedOperationException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchFmuException(other.ex2);
      }
    }

    public createInstanceFromME_result deepCopy() {
      return new createInstanceFromME_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public createInstanceFromME_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx1() {
      return this.ex1;
    }

    public createInstanceFromME_result setEx1(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchFmuException getEx2() {
      return this.ex2;
    }

    public createInstanceFromME_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchFmuException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((UnsupportedOperationException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchFmuException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createInstanceFromME_result)
        return this.equals((createInstanceFromME_result)that);
      return false;
    }

    public boolean equals(createInstanceFromME_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createInstanceFromME_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createInstanceFromME_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInstanceFromME_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_resultStandardScheme getScheme() {
        return new createInstanceFromME_resultStandardScheme();
      }
    }

    private static class createInstanceFromME_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createInstanceFromME_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new UnsupportedOperationException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchFmuException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInstanceFromME_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createInstanceFromME_resultTupleScheme getScheme() {
        return new createInstanceFromME_resultTupleScheme();
      }
    }

    private static class createInstanceFromME_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createInstanceFromME_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInstanceFromME_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new UnsupportedOperationException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchFmuException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setupExperiment_args implements org.apache.thrift.TBase<setupExperiment_args, setupExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<setupExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setupExperiment_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField STOP_FIELD_DESC = new org.apache.thrift.protocol.TField("stop", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField TOLERANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("tolerance", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setupExperiment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setupExperiment_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public double start; // required
    public double stop; // required
    public double tolerance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      START((short)2, "start"),
      STOP((short)3, "stop"),
      TOLERANCE((short)4, "tolerance");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // START
            return START;
          case 3: // STOP
            return STOP;
          case 4: // TOLERANCE
            return TOLERANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __STOP_ISSET_ID = 1;
    private static final int __TOLERANCE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.STOP, new org.apache.thrift.meta_data.FieldMetaData("stop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.TOLERANCE, new org.apache.thrift.meta_data.FieldMetaData("tolerance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setupExperiment_args.class, metaDataMap);
    }

    public setupExperiment_args() {
    }

    public setupExperiment_args(
      java.lang.String instanceId,
      double start,
      double stop,
      double tolerance)
    {
      this();
      this.instanceId = instanceId;
      this.start = start;
      setStartIsSet(true);
      this.stop = stop;
      setStopIsSet(true);
      this.tolerance = tolerance;
      setToleranceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setupExperiment_args(setupExperiment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      this.start = other.start;
      this.stop = other.stop;
      this.tolerance = other.tolerance;
    }

    public setupExperiment_args deepCopy() {
      return new setupExperiment_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      setStartIsSet(false);
      this.start = 0.0;
      setStopIsSet(false);
      this.stop = 0.0;
      setToleranceIsSet(false);
      this.tolerance = 0.0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public setupExperiment_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public double getStart() {
      return this.start;
    }

    public setupExperiment_args setStart(double start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public double getStop() {
      return this.stop;
    }

    public setupExperiment_args setStop(double stop) {
      this.stop = stop;
      setStopIsSet(true);
      return this;
    }

    public void unsetStop() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOP_ISSET_ID);
    }

    /** Returns true if field stop is set (has been assigned a value) and false otherwise */
    public boolean isSetStop() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOP_ISSET_ID);
    }

    public void setStopIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOP_ISSET_ID, value);
    }

    public double getTolerance() {
      return this.tolerance;
    }

    public setupExperiment_args setTolerance(double tolerance) {
      this.tolerance = tolerance;
      setToleranceIsSet(true);
      return this;
    }

    public void unsetTolerance() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOLERANCE_ISSET_ID);
    }

    /** Returns true if field tolerance is set (has been assigned a value) and false otherwise */
    public boolean isSetTolerance() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOLERANCE_ISSET_ID);
    }

    public void setToleranceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOLERANCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Double)value);
        }
        break;

      case STOP:
        if (value == null) {
          unsetStop();
        } else {
          setStop((java.lang.Double)value);
        }
        break;

      case TOLERANCE:
        if (value == null) {
          unsetTolerance();
        } else {
          setTolerance((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case START:
        return getStart();

      case STOP:
        return getStop();

      case TOLERANCE:
        return getTolerance();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case START:
        return isSetStart();
      case STOP:
        return isSetStop();
      case TOLERANCE:
        return isSetTolerance();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setupExperiment_args)
        return this.equals((setupExperiment_args)that);
      return false;
    }

    public boolean equals(setupExperiment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_stop = true;
      boolean that_present_stop = true;
      if (this_present_stop || that_present_stop) {
        if (!(this_present_stop && that_present_stop))
          return false;
        if (this.stop != that.stop)
          return false;
      }

      boolean this_present_tolerance = true;
      boolean that_present_tolerance = true;
      if (this_present_tolerance || that_present_tolerance) {
        if (!(this_present_tolerance && that_present_tolerance))
          return false;
        if (this.tolerance != that.tolerance)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(stop);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tolerance);

      return hashCode;
    }

    @Override
    public int compareTo(setupExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStop()).compareTo(other.isSetStop());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStop()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop, other.stop);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTolerance()).compareTo(other.isSetTolerance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTolerance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tolerance, other.tolerance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setupExperiment_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stop:");
      sb.append(this.stop);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tolerance:");
      sb.append(this.tolerance);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setupExperiment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setupExperiment_argsStandardScheme getScheme() {
        return new setupExperiment_argsStandardScheme();
      }
    }

    private static class setupExperiment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setupExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setupExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.start = iprot.readDouble();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.stop = iprot.readDouble();
                struct.setStopIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOLERANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.tolerance = iprot.readDouble();
                struct.setToleranceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setupExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeDouble(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STOP_FIELD_DESC);
        oprot.writeDouble(struct.stop);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOLERANCE_FIELD_DESC);
        oprot.writeDouble(struct.tolerance);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setupExperiment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setupExperiment_argsTupleScheme getScheme() {
        return new setupExperiment_argsTupleScheme();
      }
    }

    private static class setupExperiment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setupExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setupExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetStop()) {
          optionals.set(2);
        }
        if (struct.isSetTolerance()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetStart()) {
          oprot.writeDouble(struct.start);
        }
        if (struct.isSetStop()) {
          oprot.writeDouble(struct.stop);
        }
        if (struct.isSetTolerance()) {
          oprot.writeDouble(struct.tolerance);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setupExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readDouble();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stop = iprot.readDouble();
          struct.setStopIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tolerance = iprot.readDouble();
          struct.setToleranceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setupExperiment_result implements org.apache.thrift.TBase<setupExperiment_result, setupExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<setupExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setupExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setupExperiment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setupExperiment_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setupExperiment_result.class, metaDataMap);
    }

    public setupExperiment_result() {
    }

    public setupExperiment_result(
      Status success,
      NoSuchInstanceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setupExperiment_result(setupExperiment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchInstanceException(other.ex);
      }
    }

    public setupExperiment_result deepCopy() {
      return new setupExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public setupExperiment_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx() {
      return this.ex;
    }

    public setupExperiment_result setEx(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchInstanceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setupExperiment_result)
        return this.equals((setupExperiment_result)that);
      return false;
    }

    public boolean equals(setupExperiment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setupExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setupExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setupExperiment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setupExperiment_resultStandardScheme getScheme() {
        return new setupExperiment_resultStandardScheme();
      }
    }

    private static class setupExperiment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setupExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setupExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchInstanceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setupExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setupExperiment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setupExperiment_resultTupleScheme getScheme() {
        return new setupExperiment_resultTupleScheme();
      }
    }

    private static class setupExperiment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setupExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setupExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setupExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchInstanceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class enterInitializationMode_args implements org.apache.thrift.TBase<enterInitializationMode_args, enterInitializationMode_args._Fields>, java.io.Serializable, Cloneable, Comparable<enterInitializationMode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterInitializationMode_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enterInitializationMode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enterInitializationMode_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterInitializationMode_args.class, metaDataMap);
    }

    public enterInitializationMode_args() {
    }

    public enterInitializationMode_args(
      java.lang.String instanceId)
    {
      this();
      this.instanceId = instanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enterInitializationMode_args(enterInitializationMode_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
    }

    public enterInitializationMode_args deepCopy() {
      return new enterInitializationMode_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public enterInitializationMode_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof enterInitializationMode_args)
        return this.equals((enterInitializationMode_args)that);
      return false;
    }

    public boolean equals(enterInitializationMode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(enterInitializationMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enterInitializationMode_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enterInitializationMode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterInitializationMode_argsStandardScheme getScheme() {
        return new enterInitializationMode_argsStandardScheme();
      }
    }

    private static class enterInitializationMode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<enterInitializationMode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enterInitializationMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enterInitializationMode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enterInitializationMode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterInitializationMode_argsTupleScheme getScheme() {
        return new enterInitializationMode_argsTupleScheme();
      }
    }

    private static class enterInitializationMode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<enterInitializationMode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class enterInitializationMode_result implements org.apache.thrift.TBase<enterInitializationMode_result, enterInitializationMode_result._Fields>, java.io.Serializable, Cloneable, Comparable<enterInitializationMode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterInitializationMode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enterInitializationMode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enterInitializationMode_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterInitializationMode_result.class, metaDataMap);
    }

    public enterInitializationMode_result() {
    }

    public enterInitializationMode_result(
      Status success,
      NoSuchInstanceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enterInitializationMode_result(enterInitializationMode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchInstanceException(other.ex);
      }
    }

    public enterInitializationMode_result deepCopy() {
      return new enterInitializationMode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public enterInitializationMode_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx() {
      return this.ex;
    }

    public enterInitializationMode_result setEx(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchInstanceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof enterInitializationMode_result)
        return this.equals((enterInitializationMode_result)that);
      return false;
    }

    public boolean equals(enterInitializationMode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(enterInitializationMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enterInitializationMode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enterInitializationMode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterInitializationMode_resultStandardScheme getScheme() {
        return new enterInitializationMode_resultStandardScheme();
      }
    }

    private static class enterInitializationMode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<enterInitializationMode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enterInitializationMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchInstanceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enterInitializationMode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enterInitializationMode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterInitializationMode_resultTupleScheme getScheme() {
        return new enterInitializationMode_resultTupleScheme();
      }
    }

    private static class enterInitializationMode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<enterInitializationMode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enterInitializationMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchInstanceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exitInitializationMode_args implements org.apache.thrift.TBase<exitInitializationMode_args, exitInitializationMode_args._Fields>, java.io.Serializable, Cloneable, Comparable<exitInitializationMode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exitInitializationMode_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exitInitializationMode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exitInitializationMode_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exitInitializationMode_args.class, metaDataMap);
    }

    public exitInitializationMode_args() {
    }

    public exitInitializationMode_args(
      java.lang.String instanceId)
    {
      this();
      this.instanceId = instanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exitInitializationMode_args(exitInitializationMode_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
    }

    public exitInitializationMode_args deepCopy() {
      return new exitInitializationMode_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public exitInitializationMode_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exitInitializationMode_args)
        return this.equals((exitInitializationMode_args)that);
      return false;
    }

    public boolean equals(exitInitializationMode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exitInitializationMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exitInitializationMode_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exitInitializationMode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exitInitializationMode_argsStandardScheme getScheme() {
        return new exitInitializationMode_argsStandardScheme();
      }
    }

    private static class exitInitializationMode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<exitInitializationMode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exitInitializationMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exitInitializationMode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exitInitializationMode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exitInitializationMode_argsTupleScheme getScheme() {
        return new exitInitializationMode_argsTupleScheme();
      }
    }

    private static class exitInitializationMode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exitInitializationMode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exitInitializationMode_result implements org.apache.thrift.TBase<exitInitializationMode_result, exitInitializationMode_result._Fields>, java.io.Serializable, Cloneable, Comparable<exitInitializationMode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exitInitializationMode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exitInitializationMode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exitInitializationMode_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exitInitializationMode_result.class, metaDataMap);
    }

    public exitInitializationMode_result() {
    }

    public exitInitializationMode_result(
      Status success,
      NoSuchInstanceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exitInitializationMode_result(exitInitializationMode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchInstanceException(other.ex);
      }
    }

    public exitInitializationMode_result deepCopy() {
      return new exitInitializationMode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public exitInitializationMode_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx() {
      return this.ex;
    }

    public exitInitializationMode_result setEx(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchInstanceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exitInitializationMode_result)
        return this.equals((exitInitializationMode_result)that);
      return false;
    }

    public boolean equals(exitInitializationMode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exitInitializationMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exitInitializationMode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exitInitializationMode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exitInitializationMode_resultStandardScheme getScheme() {
        return new exitInitializationMode_resultStandardScheme();
      }
    }

    private static class exitInitializationMode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<exitInitializationMode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exitInitializationMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchInstanceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exitInitializationMode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exitInitializationMode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exitInitializationMode_resultTupleScheme getScheme() {
        return new exitInitializationMode_resultTupleScheme();
      }
    }

    private static class exitInitializationMode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<exitInitializationMode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exitInitializationMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchInstanceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class step_args implements org.apache.thrift.TBase<step_args, step_args._Fields>, java.io.Serializable, Cloneable, Comparable<step_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("step_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STEP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("stepSize", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new step_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new step_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public double stepSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      STEP_SIZE((short)2, "stepSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // STEP_SIZE
            return STEP_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STEPSIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.STEP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("stepSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(step_args.class, metaDataMap);
    }

    public step_args() {
    }

    public step_args(
      java.lang.String instanceId,
      double stepSize)
    {
      this();
      this.instanceId = instanceId;
      this.stepSize = stepSize;
      setStepSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public step_args(step_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      this.stepSize = other.stepSize;
    }

    public step_args deepCopy() {
      return new step_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      setStepSizeIsSet(false);
      this.stepSize = 0.0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public step_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public double getStepSize() {
      return this.stepSize;
    }

    public step_args setStepSize(double stepSize) {
      this.stepSize = stepSize;
      setStepSizeIsSet(true);
      return this;
    }

    public void unsetStepSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STEPSIZE_ISSET_ID);
    }

    /** Returns true if field stepSize is set (has been assigned a value) and false otherwise */
    public boolean isSetStepSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STEPSIZE_ISSET_ID);
    }

    public void setStepSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STEPSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case STEP_SIZE:
        if (value == null) {
          unsetStepSize();
        } else {
          setStepSize((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case STEP_SIZE:
        return getStepSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case STEP_SIZE:
        return isSetStepSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof step_args)
        return this.equals((step_args)that);
      return false;
    }

    public boolean equals(step_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_stepSize = true;
      boolean that_present_stepSize = true;
      if (this_present_stepSize || that_present_stepSize) {
        if (!(this_present_stepSize && that_present_stepSize))
          return false;
        if (this.stepSize != that.stepSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(stepSize);

      return hashCode;
    }

    @Override
    public int compareTo(step_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStepSize()).compareTo(other.isSetStepSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepSize, other.stepSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("step_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepSize:");
      sb.append(this.stepSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class step_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_argsStandardScheme getScheme() {
        return new step_argsStandardScheme();
      }
    }

    private static class step_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<step_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, step_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STEP_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.stepSize = iprot.readDouble();
                struct.setStepSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, step_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STEP_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.stepSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class step_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_argsTupleScheme getScheme() {
        return new step_argsTupleScheme();
      }
    }

    private static class step_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<step_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, step_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetStepSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetStepSize()) {
          oprot.writeDouble(struct.stepSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, step_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stepSize = iprot.readDouble();
          struct.setStepSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class step_result implements org.apache.thrift.TBase<step_result, step_result._Fields>, java.io.Serializable, Cloneable, Comparable<step_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("step_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new step_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new step_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable StepResult success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(step_result.class, metaDataMap);
    }

    public step_result() {
    }

    public step_result(
      StepResult success,
      NoSuchInstanceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public step_result(step_result other) {
      if (other.isSetSuccess()) {
        this.success = new StepResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchInstanceException(other.ex);
      }
    }

    public step_result deepCopy() {
      return new step_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public StepResult getSuccess() {
      return this.success;
    }

    public step_result setSuccess(@org.apache.thrift.annotation.Nullable StepResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx() {
      return this.ex;
    }

    public step_result setEx(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StepResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchInstanceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof step_result)
        return this.equals((step_result)that);
      return false;
    }

    public boolean equals(step_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(step_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("step_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class step_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_resultStandardScheme getScheme() {
        return new step_resultStandardScheme();
      }
    }

    private static class step_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<step_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, step_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StepResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchInstanceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, step_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class step_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public step_resultTupleScheme getScheme() {
        return new step_resultTupleScheme();
      }
    }

    private static class step_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<step_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, step_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, step_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new StepResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchInstanceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reset_args implements org.apache.thrift.TBase<reset_args, reset_args._Fields>, java.io.Serializable, Cloneable, Comparable<reset_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reset_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reset_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_args.class, metaDataMap);
    }

    public reset_args() {
    }

    public reset_args(
      java.lang.String instanceId)
    {
      this();
      this.instanceId = instanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_args(reset_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
    }

    public reset_args deepCopy() {
      return new reset_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public reset_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_args)
        return this.equals((reset_args)that);
      return false;
    }

    public boolean equals(reset_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reset_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_argsStandardScheme getScheme() {
        return new reset_argsStandardScheme();
      }
    }

    private static class reset_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_argsTupleScheme getScheme() {
        return new reset_argsTupleScheme();
      }
    }

    private static class reset_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reset_result implements org.apache.thrift.TBase<reset_result, reset_result._Fields>, java.io.Serializable, Cloneable, Comparable<reset_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reset_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reset_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_result.class, metaDataMap);
    }

    public reset_result() {
    }

    public reset_result(
      Status success,
      NoSuchInstanceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_result(reset_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchInstanceException(other.ex);
      }
    }

    public reset_result deepCopy() {
      return new reset_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public reset_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx() {
      return this.ex;
    }

    public reset_result setEx(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchInstanceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_result)
        return this.equals((reset_result)that);
      return false;
    }

    public boolean equals(reset_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reset_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_resultStandardScheme getScheme() {
        return new reset_resultStandardScheme();
      }
    }

    private static class reset_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchInstanceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reset_resultTupleScheme getScheme() {
        return new reset_resultTupleScheme();
      }
    }

    private static class reset_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchInstanceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminate_args implements org.apache.thrift.TBase<terminate_args, terminate_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminate_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_args.class, metaDataMap);
    }

    public terminate_args() {
    }

    public terminate_args(
      java.lang.String instanceId)
    {
      this();
      this.instanceId = instanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminate_args(terminate_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
    }

    public terminate_args deepCopy() {
      return new terminate_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public terminate_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminate_args)
        return this.equals((terminate_args)that);
      return false;
    }

    public boolean equals(terminate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_argsStandardScheme getScheme() {
        return new terminate_argsStandardScheme();
      }
    }

    private static class terminate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_argsTupleScheme getScheme() {
        return new terminate_argsTupleScheme();
      }
    }

    private static class terminate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminate_result implements org.apache.thrift.TBase<terminate_result, terminate_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_result.class, metaDataMap);
    }

    public terminate_result() {
    }

    public terminate_result(
      Status success,
      NoSuchInstanceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminate_result(terminate_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new NoSuchInstanceException(other.ex);
      }
    }

    public terminate_result deepCopy() {
      return new terminate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public terminate_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx() {
      return this.ex;
    }

    public terminate_result setEx(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((NoSuchInstanceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminate_result)
        return this.equals((terminate_result)that);
      return false;
    }

    public boolean equals(terminate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_resultStandardScheme getScheme() {
        return new terminate_resultStandardScheme();
      }
    }

    private static class terminate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new NoSuchInstanceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_resultTupleScheme getScheme() {
        return new terminate_resultTupleScheme();
      }
    }

    private static class terminate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new NoSuchInstanceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readInteger_args implements org.apache.thrift.TBase<readInteger_args, readInteger_args._Fields>, java.io.Serializable, Cloneable, Comparable<readInteger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readInteger_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readInteger_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readInteger_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readInteger_args.class, metaDataMap);
    }

    public readInteger_args() {
    }

    public readInteger_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readInteger_args(readInteger_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
    }

    public readInteger_args deepCopy() {
      return new readInteger_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public readInteger_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public readInteger_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readInteger_args)
        return this.equals((readInteger_args)that);
      return false;
    }

    public boolean equals(readInteger_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readInteger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readInteger_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readInteger_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInteger_argsStandardScheme getScheme() {
        return new readInteger_argsStandardScheme();
      }
    }

    private static class readInteger_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readInteger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readInteger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list80.size);
                  long _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = iprot.readI64();
                    struct.vr.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readInteger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter83 : struct.vr)
            {
              oprot.writeI64(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readInteger_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInteger_argsTupleScheme getScheme() {
        return new readInteger_argsTupleScheme();
      }
    }

    private static class readInteger_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readInteger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readInteger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter84 : struct.vr)
            {
              oprot.writeI64(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readInteger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list85.size);
            long _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = iprot.readI64();
              struct.vr.add(_elem86);
            }
          }
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readInteger_result implements org.apache.thrift.TBase<readInteger_result, readInteger_result._Fields>, java.io.Serializable, Cloneable, Comparable<readInteger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readInteger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readInteger_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readInteger_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable IntegerRead success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntegerRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readInteger_result.class, metaDataMap);
    }

    public readInteger_result() {
    }

    public readInteger_result(
      IntegerRead success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readInteger_result(readInteger_result other) {
      if (other.isSetSuccess()) {
        this.success = new IntegerRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public readInteger_result deepCopy() {
      return new readInteger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public IntegerRead getSuccess() {
      return this.success;
    }

    public readInteger_result setSuccess(@org.apache.thrift.annotation.Nullable IntegerRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public readInteger_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readInteger_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IntegerRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readInteger_result)
        return this.equals((readInteger_result)that);
      return false;
    }

    public boolean equals(readInteger_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readInteger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readInteger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readInteger_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInteger_resultStandardScheme getScheme() {
        return new readInteger_resultStandardScheme();
      }
    }

    private static class readInteger_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readInteger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readInteger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IntegerRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readInteger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readInteger_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readInteger_resultTupleScheme getScheme() {
        return new readInteger_resultTupleScheme();
      }
    }

    private static class readInteger_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readInteger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readInteger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readInteger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new IntegerRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readReal_args implements org.apache.thrift.TBase<readReal_args, readReal_args._Fields>, java.io.Serializable, Cloneable, Comparable<readReal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readReal_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readReal_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readReal_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readReal_args.class, metaDataMap);
    }

    public readReal_args() {
    }

    public readReal_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readReal_args(readReal_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
    }

    public readReal_args deepCopy() {
      return new readReal_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public readReal_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public readReal_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readReal_args)
        return this.equals((readReal_args)that);
      return false;
    }

    public boolean equals(readReal_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readReal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readReal_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readReal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_argsStandardScheme getScheme() {
        return new readReal_argsStandardScheme();
      }
    }

    private static class readReal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readReal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list88.size);
                  long _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI64();
                    struct.vr.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readReal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter91 : struct.vr)
            {
              oprot.writeI64(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readReal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_argsTupleScheme getScheme() {
        return new readReal_argsTupleScheme();
      }
    }

    private static class readReal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readReal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter92 : struct.vr)
            {
              oprot.writeI64(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list93.size);
            long _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readI64();
              struct.vr.add(_elem94);
            }
          }
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readReal_result implements org.apache.thrift.TBase<readReal_result, readReal_result._Fields>, java.io.Serializable, Cloneable, Comparable<readReal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readReal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readReal_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readReal_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RealRead success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RealRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readReal_result.class, metaDataMap);
    }

    public readReal_result() {
    }

    public readReal_result(
      RealRead success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readReal_result(readReal_result other) {
      if (other.isSetSuccess()) {
        this.success = new RealRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public readReal_result deepCopy() {
      return new readReal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RealRead getSuccess() {
      return this.success;
    }

    public readReal_result setSuccess(@org.apache.thrift.annotation.Nullable RealRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public readReal_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readReal_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RealRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readReal_result)
        return this.equals((readReal_result)that);
      return false;
    }

    public boolean equals(readReal_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readReal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readReal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readReal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_resultStandardScheme getScheme() {
        return new readReal_resultStandardScheme();
      }
    }

    private static class readReal_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readReal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RealRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readReal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readReal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readReal_resultTupleScheme getScheme() {
        return new readReal_resultTupleScheme();
      }
    }

    private static class readReal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readReal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new RealRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readString_args implements org.apache.thrift.TBase<readString_args, readString_args._Fields>, java.io.Serializable, Cloneable, Comparable<readString_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readString_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readString_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readString_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readString_args.class, metaDataMap);
    }

    public readString_args() {
    }

    public readString_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readString_args(readString_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
    }

    public readString_args deepCopy() {
      return new readString_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public readString_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public readString_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readString_args)
        return this.equals((readString_args)that);
      return false;
    }

    public boolean equals(readString_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readString_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_argsStandardScheme getScheme() {
        return new readString_argsStandardScheme();
      }
    }

    private static class readString_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list96.size);
                  long _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readI64();
                    struct.vr.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter99 : struct.vr)
            {
              oprot.writeI64(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_argsTupleScheme getScheme() {
        return new readString_argsTupleScheme();
      }
    }

    private static class readString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter100 : struct.vr)
            {
              oprot.writeI64(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list101.size);
            long _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI64();
              struct.vr.add(_elem102);
            }
          }
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readString_result implements org.apache.thrift.TBase<readString_result, readString_result._Fields>, java.io.Serializable, Cloneable, Comparable<readString_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readString_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readString_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable StringRead success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StringRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readString_result.class, metaDataMap);
    }

    public readString_result() {
    }

    public readString_result(
      StringRead success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readString_result(readString_result other) {
      if (other.isSetSuccess()) {
        this.success = new StringRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public readString_result deepCopy() {
      return new readString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public StringRead getSuccess() {
      return this.success;
    }

    public readString_result setSuccess(@org.apache.thrift.annotation.Nullable StringRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public readString_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readString_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StringRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readString_result)
        return this.equals((readString_result)that);
      return false;
    }

    public boolean equals(readString_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_resultStandardScheme getScheme() {
        return new readString_resultStandardScheme();
      }
    }

    private static class readString_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StringRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readString_resultTupleScheme getScheme() {
        return new readString_resultTupleScheme();
      }
    }

    private static class readString_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new StringRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readBoolean_args implements org.apache.thrift.TBase<readBoolean_args, readBoolean_args._Fields>, java.io.Serializable, Cloneable, Comparable<readBoolean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readBoolean_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readBoolean_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readBoolean_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readBoolean_args.class, metaDataMap);
    }

    public readBoolean_args() {
    }

    public readBoolean_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBoolean_args(readBoolean_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
    }

    public readBoolean_args deepCopy() {
      return new readBoolean_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public readBoolean_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public readBoolean_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readBoolean_args)
        return this.equals((readBoolean_args)that);
      return false;
    }

    public boolean equals(readBoolean_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readBoolean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readBoolean_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readBoolean_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolean_argsStandardScheme getScheme() {
        return new readBoolean_argsStandardScheme();
      }
    }

    private static class readBoolean_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readBoolean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readBoolean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list104.size);
                  long _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readI64();
                    struct.vr.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readBoolean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter107 : struct.vr)
            {
              oprot.writeI64(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readBoolean_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolean_argsTupleScheme getScheme() {
        return new readBoolean_argsTupleScheme();
      }
    }

    private static class readBoolean_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readBoolean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readBoolean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter108 : struct.vr)
            {
              oprot.writeI64(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readBoolean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list109.size);
            long _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readI64();
              struct.vr.add(_elem110);
            }
          }
          struct.setVrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readBoolean_result implements org.apache.thrift.TBase<readBoolean_result, readBoolean_result._Fields>, java.io.Serializable, Cloneable, Comparable<readBoolean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readBoolean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readBoolean_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readBoolean_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable BooleanRead success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BooleanRead.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readBoolean_result.class, metaDataMap);
    }

    public readBoolean_result() {
    }

    public readBoolean_result(
      BooleanRead success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBoolean_result(readBoolean_result other) {
      if (other.isSetSuccess()) {
        this.success = new BooleanRead(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public readBoolean_result deepCopy() {
      return new readBoolean_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public BooleanRead getSuccess() {
      return this.success;
    }

    public readBoolean_result setSuccess(@org.apache.thrift.annotation.Nullable BooleanRead success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public readBoolean_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public readBoolean_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BooleanRead)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readBoolean_result)
        return this.equals((readBoolean_result)that);
      return false;
    }

    public boolean equals(readBoolean_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readBoolean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readBoolean_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readBoolean_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolean_resultStandardScheme getScheme() {
        return new readBoolean_resultStandardScheme();
      }
    }

    private static class readBoolean_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readBoolean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readBoolean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BooleanRead();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readBoolean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readBoolean_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readBoolean_resultTupleScheme getScheme() {
        return new readBoolean_resultTupleScheme();
      }
    }

    private static class readBoolean_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readBoolean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readBoolean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readBoolean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new BooleanRead();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeInteger_args implements org.apache.thrift.TBase<writeInteger_args, writeInteger_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeInteger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeInteger_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeInteger_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeInteger_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "IntArray")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeInteger_args.class, metaDataMap);
    }

    public writeInteger_args() {
    }

    public writeInteger_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr,
      java.util.List<java.lang.Integer> value)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeInteger_args(writeInteger_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
      if (other.isSetValue()) {
        java.util.List<java.lang.Integer> __this__value = new java.util.ArrayList<java.lang.Integer>(other.value);
        this.value = __this__value;
      }
    }

    public writeInteger_args deepCopy() {
      return new writeInteger_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
      this.value = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public writeInteger_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public writeInteger_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public int getValueSize() {
      return (this.value == null) ? 0 : this.value.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Integer> getValueIterator() {
      return (this.value == null) ? null : this.value.iterator();
    }

    public void addToValue(int elem) {
      if (this.value == null) {
        this.value = new java.util.ArrayList<java.lang.Integer>();
      }
      this.value.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Integer> getValue() {
      return this.value;
    }

    public writeInteger_args setValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeInteger_args)
        return this.equals((writeInteger_args)that);
      return false;
    }

    public boolean equals(writeInteger_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeInteger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeInteger_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeInteger_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInteger_argsStandardScheme getScheme() {
        return new writeInteger_argsStandardScheme();
      }
    }

    private static class writeInteger_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeInteger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeInteger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list112.size);
                  long _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = iprot.readI64();
                    struct.vr.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                  struct.value = new java.util.ArrayList<java.lang.Integer>(_list115.size);
                  int _elem116;
                  for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                  {
                    _elem116 = iprot.readI32();
                    struct.value.add(_elem116);
                  }
                  iprot.readListEnd();
                }
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeInteger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter118 : struct.vr)
            {
              oprot.writeI64(_iter118);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.value.size()));
            for (int _iter119 : struct.value)
            {
              oprot.writeI32(_iter119);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeInteger_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInteger_argsTupleScheme getScheme() {
        return new writeInteger_argsTupleScheme();
      }
    }

    private static class writeInteger_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeInteger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeInteger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter120 : struct.vr)
            {
              oprot.writeI64(_iter120);
            }
          }
        }
        if (struct.isSetValue()) {
          {
            oprot.writeI32(struct.value.size());
            for (int _iter121 : struct.value)
            {
              oprot.writeI32(_iter121);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeInteger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list122.size);
            long _elem123;
            for (int _i124 = 0; _i124 < _list122.size; ++_i124)
            {
              _elem123 = iprot.readI64();
              struct.vr.add(_elem123);
            }
          }
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.value = new java.util.ArrayList<java.lang.Integer>(_list125.size);
            int _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = iprot.readI32();
              struct.value.add(_elem126);
            }
          }
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeInteger_result implements org.apache.thrift.TBase<writeInteger_result, writeInteger_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeInteger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeInteger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeInteger_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeInteger_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeInteger_result.class, metaDataMap);
    }

    public writeInteger_result() {
    }

    public writeInteger_result(
      Status success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeInteger_result(writeInteger_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public writeInteger_result deepCopy() {
      return new writeInteger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public writeInteger_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public writeInteger_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeInteger_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeInteger_result)
        return this.equals((writeInteger_result)that);
      return false;
    }

    public boolean equals(writeInteger_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeInteger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeInteger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeInteger_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInteger_resultStandardScheme getScheme() {
        return new writeInteger_resultStandardScheme();
      }
    }

    private static class writeInteger_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeInteger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeInteger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeInteger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeInteger_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeInteger_resultTupleScheme getScheme() {
        return new writeInteger_resultTupleScheme();
      }
    }

    private static class writeInteger_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeInteger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeInteger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeInteger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeReal_args implements org.apache.thrift.TBase<writeReal_args, writeReal_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeReal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeReal_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeReal_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeReal_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "RealArray")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeReal_args.class, metaDataMap);
    }

    public writeReal_args() {
    }

    public writeReal_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr,
      java.util.List<java.lang.Double> value)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeReal_args(writeReal_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
      if (other.isSetValue()) {
        java.util.List<java.lang.Double> __this__value = new java.util.ArrayList<java.lang.Double>(other.value);
        this.value = __this__value;
      }
    }

    public writeReal_args deepCopy() {
      return new writeReal_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
      this.value = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public writeReal_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public writeReal_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public int getValueSize() {
      return (this.value == null) ? 0 : this.value.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getValueIterator() {
      return (this.value == null) ? null : this.value.iterator();
    }

    public void addToValue(double elem) {
      if (this.value == null) {
        this.value = new java.util.ArrayList<java.lang.Double>();
      }
      this.value.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Double> getValue() {
      return this.value;
    }

    public writeReal_args setValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.util.List<java.lang.Double>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeReal_args)
        return this.equals((writeReal_args)that);
      return false;
    }

    public boolean equals(writeReal_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeReal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeReal_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeReal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_argsStandardScheme getScheme() {
        return new writeReal_argsStandardScheme();
      }
    }

    private static class writeReal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeReal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list128.size);
                  long _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = iprot.readI64();
                    struct.vr.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                  struct.value = new java.util.ArrayList<java.lang.Double>(_list131.size);
                  double _elem132;
                  for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                  {
                    _elem132 = iprot.readDouble();
                    struct.value.add(_elem132);
                  }
                  iprot.readListEnd();
                }
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeReal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter134 : struct.vr)
            {
              oprot.writeI64(_iter134);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.value.size()));
            for (double _iter135 : struct.value)
            {
              oprot.writeDouble(_iter135);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeReal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_argsTupleScheme getScheme() {
        return new writeReal_argsTupleScheme();
      }
    }

    private static class writeReal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeReal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter136 : struct.vr)
            {
              oprot.writeI64(_iter136);
            }
          }
        }
        if (struct.isSetValue()) {
          {
            oprot.writeI32(struct.value.size());
            for (double _iter137 : struct.value)
            {
              oprot.writeDouble(_iter137);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeReal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list138.size);
            long _elem139;
            for (int _i140 = 0; _i140 < _list138.size; ++_i140)
            {
              _elem139 = iprot.readI64();
              struct.vr.add(_elem139);
            }
          }
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.value = new java.util.ArrayList<java.lang.Double>(_list141.size);
            double _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = iprot.readDouble();
              struct.value.add(_elem142);
            }
          }
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeReal_result implements org.apache.thrift.TBase<writeReal_result, writeReal_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeReal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeReal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeReal_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeReal_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeReal_result.class, metaDataMap);
    }

    public writeReal_result() {
    }

    public writeReal_result(
      Status success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeReal_result(writeReal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public writeReal_result deepCopy() {
      return new writeReal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public writeReal_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public writeReal_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeReal_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeReal_result)
        return this.equals((writeReal_result)that);
      return false;
    }

    public boolean equals(writeReal_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeReal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeReal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeReal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_resultStandardScheme getScheme() {
        return new writeReal_resultStandardScheme();
      }
    }

    private static class writeReal_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeReal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeReal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeReal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeReal_resultTupleScheme getScheme() {
        return new writeReal_resultTupleScheme();
      }
    }

    private static class writeReal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeReal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeReal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeString_args implements org.apache.thrift.TBase<writeString_args, writeString_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeString_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeString_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeString_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeString_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "StringArray")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeString_args.class, metaDataMap);
    }

    public writeString_args() {
    }

    public writeString_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr,
      java.util.List<java.lang.String> value)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeString_args(writeString_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
      if (other.isSetValue()) {
        java.util.List<java.lang.String> __this__value = new java.util.ArrayList<java.lang.String>(other.value);
        this.value = __this__value;
      }
    }

    public writeString_args deepCopy() {
      return new writeString_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
      this.value = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public writeString_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public writeString_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public int getValueSize() {
      return (this.value == null) ? 0 : this.value.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getValueIterator() {
      return (this.value == null) ? null : this.value.iterator();
    }

    public void addToValue(java.lang.String elem) {
      if (this.value == null) {
        this.value = new java.util.ArrayList<java.lang.String>();
      }
      this.value.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getValue() {
      return this.value;
    }

    public writeString_args setValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeString_args)
        return this.equals((writeString_args)that);
      return false;
    }

    public boolean equals(writeString_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeString_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_argsStandardScheme getScheme() {
        return new writeString_argsStandardScheme();
      }
    }

    private static class writeString_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list144.size);
                  long _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = iprot.readI64();
                    struct.vr.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                  struct.value = new java.util.ArrayList<java.lang.String>(_list147.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem148;
                  for (int _i149 = 0; _i149 < _list147.size; ++_i149)
                  {
                    _elem148 = iprot.readString();
                    struct.value.add(_elem148);
                  }
                  iprot.readListEnd();
                }
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter150 : struct.vr)
            {
              oprot.writeI64(_iter150);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.value.size()));
            for (java.lang.String _iter151 : struct.value)
            {
              oprot.writeString(_iter151);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_argsTupleScheme getScheme() {
        return new writeString_argsTupleScheme();
      }
    }

    private static class writeString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter152 : struct.vr)
            {
              oprot.writeI64(_iter152);
            }
          }
        }
        if (struct.isSetValue()) {
          {
            oprot.writeI32(struct.value.size());
            for (java.lang.String _iter153 : struct.value)
            {
              oprot.writeString(_iter153);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list154 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list154.size);
            long _elem155;
            for (int _i156 = 0; _i156 < _list154.size; ++_i156)
            {
              _elem155 = iprot.readI64();
              struct.vr.add(_elem155);
            }
          }
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.value = new java.util.ArrayList<java.lang.String>(_list157.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = iprot.readString();
              struct.value.add(_elem158);
            }
          }
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeString_result implements org.apache.thrift.TBase<writeString_result, writeString_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeString_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeString_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeString_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeString_result.class, metaDataMap);
    }

    public writeString_result() {
    }

    public writeString_result(
      Status success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeString_result(writeString_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public writeString_result deepCopy() {
      return new writeString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public writeString_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public writeString_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeString_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeString_result)
        return this.equals((writeString_result)that);
      return false;
    }

    public boolean equals(writeString_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_resultStandardScheme getScheme() {
        return new writeString_resultStandardScheme();
      }
    }

    private static class writeString_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeString_resultTupleScheme getScheme() {
        return new writeString_resultTupleScheme();
      }
    }

    private static class writeString_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeBoolean_args implements org.apache.thrift.TBase<writeBoolean_args, writeBoolean_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeBoolean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeBoolean_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeBoolean_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeBoolean_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      VR((short)2, "vr"),
      VALUE((short)3, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // VR
            return VR;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BooleanArray")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeBoolean_args.class, metaDataMap);
    }

    public writeBoolean_args() {
    }

    public writeBoolean_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vr,
      java.util.List<java.lang.Boolean> value)
    {
      this();
      this.instanceId = instanceId;
      this.vr = vr;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeBoolean_args(writeBoolean_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVr()) {
        java.util.List<java.lang.Long> __this__vr = new java.util.ArrayList<java.lang.Long>(other.vr.size());
        for (java.lang.Long other_element : other.vr) {
          __this__vr.add(other_element);
        }
        this.vr = __this__vr;
      }
      if (other.isSetValue()) {
        java.util.List<java.lang.Boolean> __this__value = new java.util.ArrayList<java.lang.Boolean>(other.value);
        this.value = __this__value;
      }
    }

    public writeBoolean_args deepCopy() {
      return new writeBoolean_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vr = null;
      this.value = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public writeBoolean_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVrSize() {
      return (this.vr == null) ? 0 : this.vr.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVrIterator() {
      return (this.vr == null) ? null : this.vr.iterator();
    }

    public void addToVr(long elem) {
      if (this.vr == null) {
        this.vr = new java.util.ArrayList<java.lang.Long>();
      }
      this.vr.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVr() {
      return this.vr;
    }

    public writeBoolean_args setVr(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public int getValueSize() {
      return (this.value == null) ? 0 : this.value.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Boolean> getValueIterator() {
      return (this.value == null) ? null : this.value.iterator();
    }

    public void addToValue(boolean elem) {
      if (this.value == null) {
        this.value = new java.util.ArrayList<java.lang.Boolean>();
      }
      this.value.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Boolean> getValue() {
      return this.value;
    }

    public writeBoolean_args setValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((java.util.List<java.lang.Long>)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.util.List<java.lang.Boolean>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case VR:
        return getVr();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case VR:
        return isSetVr();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeBoolean_args)
        return this.equals((writeBoolean_args)that);
      return false;
    }

    public boolean equals(writeBoolean_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVr()) ? 131071 : 524287);
      if (isSetVr())
        hashCode = hashCode * 8191 + vr.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeBoolean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeBoolean_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeBoolean_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolean_argsStandardScheme getScheme() {
        return new writeBoolean_argsStandardScheme();
      }
    }

    private static class writeBoolean_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeBoolean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeBoolean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.vr = new java.util.ArrayList<java.lang.Long>(_list160.size);
                  long _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = iprot.readI64();
                    struct.vr.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list163 = iprot.readListBegin();
                  struct.value = new java.util.ArrayList<java.lang.Boolean>(_list163.size);
                  boolean _elem164;
                  for (int _i165 = 0; _i165 < _list163.size; ++_i165)
                  {
                    _elem164 = iprot.readBool();
                    struct.value.add(_elem164);
                  }
                  iprot.readListEnd();
                }
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeBoolean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vr.size()));
            for (long _iter166 : struct.vr)
            {
              oprot.writeI64(_iter166);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.value.size()));
            for (boolean _iter167 : struct.value)
            {
              oprot.writeBool(_iter167);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeBoolean_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolean_argsTupleScheme getScheme() {
        return new writeBoolean_argsTupleScheme();
      }
    }

    private static class writeBoolean_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeBoolean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeBoolean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVr()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVr()) {
          {
            oprot.writeI32(struct.vr.size());
            for (long _iter168 : struct.vr)
            {
              oprot.writeI64(_iter168);
            }
          }
        }
        if (struct.isSetValue()) {
          {
            oprot.writeI32(struct.value.size());
            for (boolean _iter169 : struct.value)
            {
              oprot.writeBool(_iter169);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeBoolean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list170 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vr = new java.util.ArrayList<java.lang.Long>(_list170.size);
            long _elem171;
            for (int _i172 = 0; _i172 < _list170.size; ++_i172)
            {
              _elem171 = iprot.readI64();
              struct.vr.add(_elem171);
            }
          }
          struct.setVrIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.value = new java.util.ArrayList<java.lang.Boolean>(_list173.size);
            boolean _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = iprot.readBool();
              struct.value.add(_elem174);
            }
          }
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeBoolean_result implements org.apache.thrift.TBase<writeBoolean_result, writeBoolean_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeBoolean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeBoolean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeBoolean_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeBoolean_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable NoSuchVariableException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchVariableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeBoolean_result.class, metaDataMap);
    }

    public writeBoolean_result() {
    }

    public writeBoolean_result(
      Status success,
      NoSuchInstanceException ex1,
      NoSuchVariableException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeBoolean_result(writeBoolean_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoSuchVariableException(other.ex2);
      }
    }

    public writeBoolean_result deepCopy() {
      return new writeBoolean_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public writeBoolean_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public writeBoolean_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchVariableException getEx2() {
      return this.ex2;
    }

    public writeBoolean_result setEx2(@org.apache.thrift.annotation.Nullable NoSuchVariableException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoSuchVariableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeBoolean_result)
        return this.equals((writeBoolean_result)that);
      return false;
    }

    public boolean equals(writeBoolean_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeBoolean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeBoolean_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeBoolean_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolean_resultStandardScheme getScheme() {
        return new writeBoolean_resultStandardScheme();
      }
    }

    private static class writeBoolean_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeBoolean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeBoolean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoSuchVariableException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeBoolean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeBoolean_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeBoolean_resultTupleScheme getScheme() {
        return new writeBoolean_resultTupleScheme();
      }
    }

    private static class writeBoolean_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeBoolean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeBoolean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeBoolean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoSuchVariableException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFMUstate_args implements org.apache.thrift.TBase<getFMUstate_args, getFMUstate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFMUstate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFMUstate_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFMUstate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFMUstate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFMUstate_args.class, metaDataMap);
    }

    public getFMUstate_args() {
    }

    public getFMUstate_args(
      java.lang.String instanceId)
    {
      this();
      this.instanceId = instanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFMUstate_args(getFMUstate_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
    }

    public getFMUstate_args deepCopy() {
      return new getFMUstate_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public getFMUstate_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFMUstate_args)
        return this.equals((getFMUstate_args)that);
      return false;
    }

    public boolean equals(getFMUstate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFMUstate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFMUstate_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFMUstate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFMUstate_argsStandardScheme getScheme() {
        return new getFMUstate_argsStandardScheme();
      }
    }

    private static class getFMUstate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFMUstate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFMUstate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFMUstate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFMUstate_argsTupleScheme getScheme() {
        return new getFMUstate_argsTupleScheme();
      }
    }

    private static class getFMUstate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFMUstate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFMUstate_result implements org.apache.thrift.TBase<getFMUstate_result, getFMUstate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFMUstate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFMUstate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFMUstate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFMUstate_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable GetFmuStateResult success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetFmuStateResult.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFMUstate_result.class, metaDataMap);
    }

    public getFMUstate_result() {
    }

    public getFMUstate_result(
      GetFmuStateResult success,
      NoSuchInstanceException ex1,
      UnsupportedOperationException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFMUstate_result(getFMUstate_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetFmuStateResult(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new UnsupportedOperationException(other.ex2);
      }
    }

    public getFMUstate_result deepCopy() {
      return new getFMUstate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public GetFmuStateResult getSuccess() {
      return this.success;
    }

    public getFMUstate_result setSuccess(@org.apache.thrift.annotation.Nullable GetFmuStateResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public getFMUstate_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx2() {
      return this.ex2;
    }

    public getFMUstate_result setEx2(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetFmuStateResult)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((UnsupportedOperationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFMUstate_result)
        return this.equals((getFMUstate_result)that);
      return false;
    }

    public boolean equals(getFMUstate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFMUstate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFMUstate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFMUstate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFMUstate_resultStandardScheme getScheme() {
        return new getFMUstate_resultStandardScheme();
      }
    }

    private static class getFMUstate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFMUstate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetFmuStateResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new UnsupportedOperationException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFMUstate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFMUstate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFMUstate_resultTupleScheme getScheme() {
        return new getFMUstate_resultTupleScheme();
      }
    }

    private static class getFMUstate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFMUstate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new GetFmuStateResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new UnsupportedOperationException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setFMUstate_args implements org.apache.thrift.TBase<setFMUstate_args, setFMUstate_args._Fields>, java.io.Serializable, Cloneable, Comparable<setFMUstate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFMUstate_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setFMUstate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setFMUstate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public long state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      STATE((short)2, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "FmuState")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFMUstate_args.class, metaDataMap);
    }

    public setFMUstate_args() {
    }

    public setFMUstate_args(
      java.lang.String instanceId,
      long state)
    {
      this();
      this.instanceId = instanceId;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFMUstate_args(setFMUstate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      this.state = other.state;
    }

    public setFMUstate_args deepCopy() {
      return new setFMUstate_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      setStateIsSet(false);
      this.state = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public setFMUstate_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public long getState() {
      return this.state;
    }

    public setFMUstate_args setState(long state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setFMUstate_args)
        return this.equals((setFMUstate_args)that);
      return false;
    }

    public boolean equals(setFMUstate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(state);

      return hashCode;
    }

    @Override
    public int compareTo(setFMUstate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setFMUstate_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFMUstate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setFMUstate_argsStandardScheme getScheme() {
        return new setFMUstate_argsStandardScheme();
      }
    }

    private static class setFMUstate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setFMUstate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.state = iprot.readI64();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFMUstate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI64(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFMUstate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setFMUstate_argsTupleScheme getScheme() {
        return new setFMUstate_argsTupleScheme();
      }
    }

    private static class setFMUstate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setFMUstate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetState()) {
          oprot.writeI64(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI64();
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setFMUstate_result implements org.apache.thrift.TBase<setFMUstate_result, setFMUstate_result._Fields>, java.io.Serializable, Cloneable, Comparable<setFMUstate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFMUstate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setFMUstate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setFMUstate_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFMUstate_result.class, metaDataMap);
    }

    public setFMUstate_result() {
    }

    public setFMUstate_result(
      Status success,
      NoSuchInstanceException ex1,
      UnsupportedOperationException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFMUstate_result(setFMUstate_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new UnsupportedOperationException(other.ex2);
      }
    }

    public setFMUstate_result deepCopy() {
      return new setFMUstate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public setFMUstate_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public setFMUstate_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx2() {
      return this.ex2;
    }

    public setFMUstate_result setEx2(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((UnsupportedOperationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setFMUstate_result)
        return this.equals((setFMUstate_result)that);
      return false;
    }

    public boolean equals(setFMUstate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setFMUstate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setFMUstate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFMUstate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setFMUstate_resultStandardScheme getScheme() {
        return new setFMUstate_resultStandardScheme();
      }
    }

    private static class setFMUstate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setFMUstate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new UnsupportedOperationException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFMUstate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFMUstate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setFMUstate_resultTupleScheme getScheme() {
        return new setFMUstate_resultTupleScheme();
      }
    }

    private static class setFMUstate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setFMUstate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new UnsupportedOperationException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class freeFMUstate_args implements org.apache.thrift.TBase<freeFMUstate_args, freeFMUstate_args._Fields>, java.io.Serializable, Cloneable, Comparable<freeFMUstate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freeFMUstate_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new freeFMUstate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new freeFMUstate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public long state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      STATE((short)2, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "FmuState")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeFMUstate_args.class, metaDataMap);
    }

    public freeFMUstate_args() {
    }

    public freeFMUstate_args(
      java.lang.String instanceId,
      long state)
    {
      this();
      this.instanceId = instanceId;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public freeFMUstate_args(freeFMUstate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      this.state = other.state;
    }

    public freeFMUstate_args deepCopy() {
      return new freeFMUstate_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      setStateIsSet(false);
      this.state = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public freeFMUstate_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public long getState() {
      return this.state;
    }

    public freeFMUstate_args setState(long state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof freeFMUstate_args)
        return this.equals((freeFMUstate_args)that);
      return false;
    }

    public boolean equals(freeFMUstate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(state);

      return hashCode;
    }

    @Override
    public int compareTo(freeFMUstate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("freeFMUstate_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class freeFMUstate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public freeFMUstate_argsStandardScheme getScheme() {
        return new freeFMUstate_argsStandardScheme();
      }
    }

    private static class freeFMUstate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<freeFMUstate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, freeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.state = iprot.readI64();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, freeFMUstate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI64(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class freeFMUstate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public freeFMUstate_argsTupleScheme getScheme() {
        return new freeFMUstate_argsTupleScheme();
      }
    }

    private static class freeFMUstate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<freeFMUstate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, freeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetState()) {
          oprot.writeI64(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, freeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI64();
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class freeFMUstate_result implements org.apache.thrift.TBase<freeFMUstate_result, freeFMUstate_result._Fields>, java.io.Serializable, Cloneable, Comparable<freeFMUstate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freeFMUstate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new freeFMUstate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new freeFMUstate_resultTupleSchemeFactory();

    /**
     * 
     * @see Status
     */
    public @org.apache.thrift.annotation.Nullable Status success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeFMUstate_result.class, metaDataMap);
    }

    public freeFMUstate_result() {
    }

    public freeFMUstate_result(
      Status success,
      NoSuchInstanceException ex1,
      UnsupportedOperationException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public freeFMUstate_result(freeFMUstate_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new UnsupportedOperationException(other.ex2);
      }
    }

    public freeFMUstate_result deepCopy() {
      return new freeFMUstate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    /**
     * 
     * @see Status
     */
    @org.apache.thrift.annotation.Nullable
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public freeFMUstate_result setSuccess(@org.apache.thrift.annotation.Nullable Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public freeFMUstate_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx2() {
      return this.ex2;
    }

    public freeFMUstate_result setEx2(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((UnsupportedOperationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof freeFMUstate_result)
        return this.equals((freeFMUstate_result)that);
      return false;
    }

    public boolean equals(freeFMUstate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(freeFMUstate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("freeFMUstate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class freeFMUstate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public freeFMUstate_resultStandardScheme getScheme() {
        return new freeFMUstate_resultStandardScheme();
      }
    }

    private static class freeFMUstate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<freeFMUstate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, freeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new UnsupportedOperationException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, freeFMUstate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class freeFMUstate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public freeFMUstate_resultTupleScheme getScheme() {
        return new freeFMUstate_resultTupleScheme();
      }
    }

    private static class freeFMUstate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<freeFMUstate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, freeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, freeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new UnsupportedOperationException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serializeFMUstate_args implements org.apache.thrift.TBase<serializeFMUstate_args, serializeFMUstate_args._Fields>, java.io.Serializable, Cloneable, Comparable<serializeFMUstate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serializeFMUstate_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serializeFMUstate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serializeFMUstate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public long state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      STATE((short)2, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "FmuState")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serializeFMUstate_args.class, metaDataMap);
    }

    public serializeFMUstate_args() {
    }

    public serializeFMUstate_args(
      java.lang.String instanceId,
      long state)
    {
      this();
      this.instanceId = instanceId;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serializeFMUstate_args(serializeFMUstate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      this.state = other.state;
    }

    public serializeFMUstate_args deepCopy() {
      return new serializeFMUstate_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      setStateIsSet(false);
      this.state = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public serializeFMUstate_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public long getState() {
      return this.state;
    }

    public serializeFMUstate_args setState(long state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serializeFMUstate_args)
        return this.equals((serializeFMUstate_args)that);
      return false;
    }

    public boolean equals(serializeFMUstate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(state);

      return hashCode;
    }

    @Override
    public int compareTo(serializeFMUstate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serializeFMUstate_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serializeFMUstate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeFMUstate_argsStandardScheme getScheme() {
        return new serializeFMUstate_argsStandardScheme();
      }
    }

    private static class serializeFMUstate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<serializeFMUstate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serializeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.state = iprot.readI64();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serializeFMUstate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI64(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serializeFMUstate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeFMUstate_argsTupleScheme getScheme() {
        return new serializeFMUstate_argsTupleScheme();
      }
    }

    private static class serializeFMUstate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<serializeFMUstate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serializeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetState()) {
          oprot.writeI64(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serializeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI64();
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serializeFMUstate_result implements org.apache.thrift.TBase<serializeFMUstate_result, serializeFMUstate_result._Fields>, java.io.Serializable, Cloneable, Comparable<serializeFMUstate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serializeFMUstate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serializeFMUstate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serializeFMUstate_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SerializeFmuStateResult success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SerializeFmuStateResult.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serializeFMUstate_result.class, metaDataMap);
    }

    public serializeFMUstate_result() {
    }

    public serializeFMUstate_result(
      SerializeFmuStateResult success,
      NoSuchInstanceException ex1,
      UnsupportedOperationException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serializeFMUstate_result(serializeFMUstate_result other) {
      if (other.isSetSuccess()) {
        this.success = new SerializeFmuStateResult(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new UnsupportedOperationException(other.ex2);
      }
    }

    public serializeFMUstate_result deepCopy() {
      return new serializeFMUstate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SerializeFmuStateResult getSuccess() {
      return this.success;
    }

    public serializeFMUstate_result setSuccess(@org.apache.thrift.annotation.Nullable SerializeFmuStateResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public serializeFMUstate_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx2() {
      return this.ex2;
    }

    public serializeFMUstate_result setEx2(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SerializeFmuStateResult)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((UnsupportedOperationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serializeFMUstate_result)
        return this.equals((serializeFMUstate_result)that);
      return false;
    }

    public boolean equals(serializeFMUstate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(serializeFMUstate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serializeFMUstate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serializeFMUstate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeFMUstate_resultStandardScheme getScheme() {
        return new serializeFMUstate_resultStandardScheme();
      }
    }

    private static class serializeFMUstate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<serializeFMUstate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serializeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SerializeFmuStateResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new UnsupportedOperationException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serializeFMUstate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serializeFMUstate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeFMUstate_resultTupleScheme getScheme() {
        return new serializeFMUstate_resultTupleScheme();
      }
    }

    private static class serializeFMUstate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<serializeFMUstate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serializeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serializeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new SerializeFmuStateResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new UnsupportedOperationException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deSerializeFMUstate_args implements org.apache.thrift.TBase<deSerializeFMUstate_args, deSerializeFMUstate_args._Fields>, java.io.Serializable, Cloneable, Comparable<deSerializeFMUstate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deSerializeFMUstate_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deSerializeFMUstate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deSerializeFMUstate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      STATE((short)2, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deSerializeFMUstate_args.class, metaDataMap);
    }

    public deSerializeFMUstate_args() {
    }

    public deSerializeFMUstate_args(
      java.lang.String instanceId,
      java.nio.ByteBuffer state)
    {
      this();
      this.instanceId = instanceId;
      this.state = org.apache.thrift.TBaseHelper.copyBinary(state);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deSerializeFMUstate_args(deSerializeFMUstate_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetState()) {
        this.state = org.apache.thrift.TBaseHelper.copyBinary(other.state);
      }
    }

    public deSerializeFMUstate_args deepCopy() {
      return new deSerializeFMUstate_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.state = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public deSerializeFMUstate_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public byte[] getState() {
      setState(org.apache.thrift.TBaseHelper.rightSize(state));
      return state == null ? null : state.array();
    }

    public java.nio.ByteBuffer bufferForState() {
      return org.apache.thrift.TBaseHelper.copyBinary(state);
    }

    public deSerializeFMUstate_args setState(byte[] state) {
      this.state = state == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(state.clone());
      return this;
    }

    public deSerializeFMUstate_args setState(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer state) {
      this.state = org.apache.thrift.TBaseHelper.copyBinary(state);
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          if (value instanceof byte[]) {
            setState((byte[])value);
          } else {
            setState((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deSerializeFMUstate_args)
        return this.equals((deSerializeFMUstate_args)that);
      return false;
    }

    public boolean equals(deSerializeFMUstate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState())
        hashCode = hashCode * 8191 + state.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deSerializeFMUstate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deSerializeFMUstate_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.state, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deSerializeFMUstate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deSerializeFMUstate_argsStandardScheme getScheme() {
        return new deSerializeFMUstate_argsStandardScheme();
      }
    }

    private static class deSerializeFMUstate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deSerializeFMUstate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deSerializeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.state = iprot.readBinary();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deSerializeFMUstate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeBinary(struct.state);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deSerializeFMUstate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deSerializeFMUstate_argsTupleScheme getScheme() {
        return new deSerializeFMUstate_argsTupleScheme();
      }
    }

    private static class deSerializeFMUstate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deSerializeFMUstate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deSerializeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetState()) {
          oprot.writeBinary(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deSerializeFMUstate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readBinary();
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deSerializeFMUstate_result implements org.apache.thrift.TBase<deSerializeFMUstate_result, deSerializeFMUstate_result._Fields>, java.io.Serializable, Cloneable, Comparable<deSerializeFMUstate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deSerializeFMUstate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deSerializeFMUstate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deSerializeFMUstate_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DeSerializeFmuStateResult success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeSerializeFmuStateResult.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deSerializeFMUstate_result.class, metaDataMap);
    }

    public deSerializeFMUstate_result() {
    }

    public deSerializeFMUstate_result(
      DeSerializeFmuStateResult success,
      NoSuchInstanceException ex1,
      UnsupportedOperationException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deSerializeFMUstate_result(deSerializeFMUstate_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeSerializeFmuStateResult(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new UnsupportedOperationException(other.ex2);
      }
    }

    public deSerializeFMUstate_result deepCopy() {
      return new deSerializeFMUstate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DeSerializeFmuStateResult getSuccess() {
      return this.success;
    }

    public deSerializeFMUstate_result setSuccess(@org.apache.thrift.annotation.Nullable DeSerializeFmuStateResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public deSerializeFMUstate_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx2() {
      return this.ex2;
    }

    public deSerializeFMUstate_result setEx2(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeSerializeFmuStateResult)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((UnsupportedOperationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deSerializeFMUstate_result)
        return this.equals((deSerializeFMUstate_result)that);
      return false;
    }

    public boolean equals(deSerializeFMUstate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deSerializeFMUstate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deSerializeFMUstate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deSerializeFMUstate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deSerializeFMUstate_resultStandardScheme getScheme() {
        return new deSerializeFMUstate_resultStandardScheme();
      }
    }

    private static class deSerializeFMUstate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deSerializeFMUstate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deSerializeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeSerializeFmuStateResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new UnsupportedOperationException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deSerializeFMUstate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deSerializeFMUstate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deSerializeFMUstate_resultTupleScheme getScheme() {
        return new deSerializeFMUstate_resultTupleScheme();
      }
    }

    private static class deSerializeFMUstate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deSerializeFMUstate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deSerializeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deSerializeFMUstate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new DeSerializeFmuStateResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new UnsupportedOperationException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDirectionalDerivative_args implements org.apache.thrift.TBase<getDirectionalDerivative_args, getDirectionalDerivative_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDirectionalDerivative_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDirectionalDerivative_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField V_UNKNOWN_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("vUnknownRef", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField V_KNOWN_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("vKnownRef", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField DV_KNOWN_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("dvKnownRef", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDirectionalDerivative_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDirectionalDerivative_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instanceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vUnknownRef; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vKnownRef; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> dvKnownRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceId"),
      V_UNKNOWN_REF((short)2, "vUnknownRef"),
      V_KNOWN_REF((short)3, "vKnownRef"),
      DV_KNOWN_REF((short)4, "dvKnownRef");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // V_UNKNOWN_REF
            return V_UNKNOWN_REF;
          case 3: // V_KNOWN_REF
            return V_KNOWN_REF;
          case 4: // DV_KNOWN_REF
            return DV_KNOWN_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "InstanceId")));
      tmpMap.put(_Fields.V_UNKNOWN_REF, new org.apache.thrift.meta_data.FieldMetaData("vUnknownRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      tmpMap.put(_Fields.V_KNOWN_REF, new org.apache.thrift.meta_data.FieldMetaData("vKnownRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ValueReferences")));
      tmpMap.put(_Fields.DV_KNOWN_REF, new org.apache.thrift.meta_data.FieldMetaData("dvKnownRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDirectionalDerivative_args.class, metaDataMap);
    }

    public getDirectionalDerivative_args() {
    }

    public getDirectionalDerivative_args(
      java.lang.String instanceId,
      java.util.List<java.lang.Long> vUnknownRef,
      java.util.List<java.lang.Long> vKnownRef,
      java.util.List<java.lang.Double> dvKnownRef)
    {
      this();
      this.instanceId = instanceId;
      this.vUnknownRef = vUnknownRef;
      this.vKnownRef = vKnownRef;
      this.dvKnownRef = dvKnownRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDirectionalDerivative_args(getDirectionalDerivative_args other) {
      if (other.isSetInstanceId()) {
        this.instanceId = other.instanceId;
      }
      if (other.isSetVUnknownRef()) {
        java.util.List<java.lang.Long> __this__vUnknownRef = new java.util.ArrayList<java.lang.Long>(other.vUnknownRef.size());
        for (java.lang.Long other_element : other.vUnknownRef) {
          __this__vUnknownRef.add(other_element);
        }
        this.vUnknownRef = __this__vUnknownRef;
      }
      if (other.isSetVKnownRef()) {
        java.util.List<java.lang.Long> __this__vKnownRef = new java.util.ArrayList<java.lang.Long>(other.vKnownRef.size());
        for (java.lang.Long other_element : other.vKnownRef) {
          __this__vKnownRef.add(other_element);
        }
        this.vKnownRef = __this__vKnownRef;
      }
      if (other.isSetDvKnownRef()) {
        java.util.List<java.lang.Double> __this__dvKnownRef = new java.util.ArrayList<java.lang.Double>(other.dvKnownRef);
        this.dvKnownRef = __this__dvKnownRef;
      }
    }

    public getDirectionalDerivative_args deepCopy() {
      return new getDirectionalDerivative_args(this);
    }

    @Override
    public void clear() {
      this.instanceId = null;
      this.vUnknownRef = null;
      this.vKnownRef = null;
      this.dvKnownRef = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceId() {
      return this.instanceId;
    }

    public getDirectionalDerivative_args setInstanceId(@org.apache.thrift.annotation.Nullable java.lang.String instanceId) {
      this.instanceId = instanceId;
      return this;
    }

    public void unsetInstanceId() {
      this.instanceId = null;
    }

    /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceId() {
      return this.instanceId != null;
    }

    public void setInstanceIdIsSet(boolean value) {
      if (!value) {
        this.instanceId = null;
      }
    }

    public int getVUnknownRefSize() {
      return (this.vUnknownRef == null) ? 0 : this.vUnknownRef.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVUnknownRefIterator() {
      return (this.vUnknownRef == null) ? null : this.vUnknownRef.iterator();
    }

    public void addToVUnknownRef(long elem) {
      if (this.vUnknownRef == null) {
        this.vUnknownRef = new java.util.ArrayList<java.lang.Long>();
      }
      this.vUnknownRef.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVUnknownRef() {
      return this.vUnknownRef;
    }

    public getDirectionalDerivative_args setVUnknownRef(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vUnknownRef) {
      this.vUnknownRef = vUnknownRef;
      return this;
    }

    public void unsetVUnknownRef() {
      this.vUnknownRef = null;
    }

    /** Returns true if field vUnknownRef is set (has been assigned a value) and false otherwise */
    public boolean isSetVUnknownRef() {
      return this.vUnknownRef != null;
    }

    public void setVUnknownRefIsSet(boolean value) {
      if (!value) {
        this.vUnknownRef = null;
      }
    }

    public int getVKnownRefSize() {
      return (this.vKnownRef == null) ? 0 : this.vKnownRef.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getVKnownRefIterator() {
      return (this.vKnownRef == null) ? null : this.vKnownRef.iterator();
    }

    public void addToVKnownRef(long elem) {
      if (this.vKnownRef == null) {
        this.vKnownRef = new java.util.ArrayList<java.lang.Long>();
      }
      this.vKnownRef.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getVKnownRef() {
      return this.vKnownRef;
    }

    public getDirectionalDerivative_args setVKnownRef(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> vKnownRef) {
      this.vKnownRef = vKnownRef;
      return this;
    }

    public void unsetVKnownRef() {
      this.vKnownRef = null;
    }

    /** Returns true if field vKnownRef is set (has been assigned a value) and false otherwise */
    public boolean isSetVKnownRef() {
      return this.vKnownRef != null;
    }

    public void setVKnownRefIsSet(boolean value) {
      if (!value) {
        this.vKnownRef = null;
      }
    }

    public int getDvKnownRefSize() {
      return (this.dvKnownRef == null) ? 0 : this.dvKnownRef.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getDvKnownRefIterator() {
      return (this.dvKnownRef == null) ? null : this.dvKnownRef.iterator();
    }

    public void addToDvKnownRef(double elem) {
      if (this.dvKnownRef == null) {
        this.dvKnownRef = new java.util.ArrayList<java.lang.Double>();
      }
      this.dvKnownRef.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Double> getDvKnownRef() {
      return this.dvKnownRef;
    }

    public getDirectionalDerivative_args setDvKnownRef(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> dvKnownRef) {
      this.dvKnownRef = dvKnownRef;
      return this;
    }

    public void unsetDvKnownRef() {
      this.dvKnownRef = null;
    }

    /** Returns true if field dvKnownRef is set (has been assigned a value) and false otherwise */
    public boolean isSetDvKnownRef() {
      return this.dvKnownRef != null;
    }

    public void setDvKnownRefIsSet(boolean value) {
      if (!value) {
        this.dvKnownRef = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceId();
        } else {
          setInstanceId((java.lang.String)value);
        }
        break;

      case V_UNKNOWN_REF:
        if (value == null) {
          unsetVUnknownRef();
        } else {
          setVUnknownRef((java.util.List<java.lang.Long>)value);
        }
        break;

      case V_KNOWN_REF:
        if (value == null) {
          unsetVKnownRef();
        } else {
          setVKnownRef((java.util.List<java.lang.Long>)value);
        }
        break;

      case DV_KNOWN_REF:
        if (value == null) {
          unsetDvKnownRef();
        } else {
          setDvKnownRef((java.util.List<java.lang.Double>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceId();

      case V_UNKNOWN_REF:
        return getVUnknownRef();

      case V_KNOWN_REF:
        return getVKnownRef();

      case DV_KNOWN_REF:
        return getDvKnownRef();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceId();
      case V_UNKNOWN_REF:
        return isSetVUnknownRef();
      case V_KNOWN_REF:
        return isSetVKnownRef();
      case DV_KNOWN_REF:
        return isSetDvKnownRef();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDirectionalDerivative_args)
        return this.equals((getDirectionalDerivative_args)that);
      return false;
    }

    public boolean equals(getDirectionalDerivative_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instanceId = true && this.isSetInstanceId();
      boolean that_present_instanceId = true && that.isSetInstanceId();
      if (this_present_instanceId || that_present_instanceId) {
        if (!(this_present_instanceId && that_present_instanceId))
          return false;
        if (!this.instanceId.equals(that.instanceId))
          return false;
      }

      boolean this_present_vUnknownRef = true && this.isSetVUnknownRef();
      boolean that_present_vUnknownRef = true && that.isSetVUnknownRef();
      if (this_present_vUnknownRef || that_present_vUnknownRef) {
        if (!(this_present_vUnknownRef && that_present_vUnknownRef))
          return false;
        if (!this.vUnknownRef.equals(that.vUnknownRef))
          return false;
      }

      boolean this_present_vKnownRef = true && this.isSetVKnownRef();
      boolean that_present_vKnownRef = true && that.isSetVKnownRef();
      if (this_present_vKnownRef || that_present_vKnownRef) {
        if (!(this_present_vKnownRef && that_present_vKnownRef))
          return false;
        if (!this.vKnownRef.equals(that.vKnownRef))
          return false;
      }

      boolean this_present_dvKnownRef = true && this.isSetDvKnownRef();
      boolean that_present_dvKnownRef = true && that.isSetDvKnownRef();
      if (this_present_dvKnownRef || that_present_dvKnownRef) {
        if (!(this_present_dvKnownRef && that_present_dvKnownRef))
          return false;
        if (!this.dvKnownRef.equals(that.dvKnownRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
      if (isSetInstanceId())
        hashCode = hashCode * 8191 + instanceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVUnknownRef()) ? 131071 : 524287);
      if (isSetVUnknownRef())
        hashCode = hashCode * 8191 + vUnknownRef.hashCode();

      hashCode = hashCode * 8191 + ((isSetVKnownRef()) ? 131071 : 524287);
      if (isSetVKnownRef())
        hashCode = hashCode * 8191 + vKnownRef.hashCode();

      hashCode = hashCode * 8191 + ((isSetDvKnownRef()) ? 131071 : 524287);
      if (isSetDvKnownRef())
        hashCode = hashCode * 8191 + dvKnownRef.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDirectionalDerivative_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVUnknownRef()).compareTo(other.isSetVUnknownRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVUnknownRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vUnknownRef, other.vUnknownRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVKnownRef()).compareTo(other.isSetVKnownRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVKnownRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vKnownRef, other.vKnownRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDvKnownRef()).compareTo(other.isSetDvKnownRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDvKnownRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dvKnownRef, other.dvKnownRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDirectionalDerivative_args(");
      boolean first = true;

      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vUnknownRef:");
      if (this.vUnknownRef == null) {
        sb.append("null");
      } else {
        sb.append(this.vUnknownRef);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vKnownRef:");
      if (this.vKnownRef == null) {
        sb.append("null");
      } else {
        sb.append(this.vKnownRef);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dvKnownRef:");
      if (this.dvKnownRef == null) {
        sb.append("null");
      } else {
        sb.append(this.dvKnownRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDirectionalDerivative_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDirectionalDerivative_argsStandardScheme getScheme() {
        return new getDirectionalDerivative_argsStandardScheme();
      }
    }

    private static class getDirectionalDerivative_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDirectionalDerivative_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDirectionalDerivative_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceId = iprot.readString();
                struct.setInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V_UNKNOWN_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.vUnknownRef = new java.util.ArrayList<java.lang.Long>(_list176.size);
                  long _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = iprot.readI64();
                    struct.vUnknownRef.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setVUnknownRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V_KNOWN_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list179 = iprot.readListBegin();
                  struct.vKnownRef = new java.util.ArrayList<java.lang.Long>(_list179.size);
                  long _elem180;
                  for (int _i181 = 0; _i181 < _list179.size; ++_i181)
                  {
                    _elem180 = iprot.readI64();
                    struct.vKnownRef.add(_elem180);
                  }
                  iprot.readListEnd();
                }
                struct.setVKnownRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DV_KNOWN_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                  struct.dvKnownRef = new java.util.ArrayList<java.lang.Double>(_list182.size);
                  double _elem183;
                  for (int _i184 = 0; _i184 < _list182.size; ++_i184)
                  {
                    _elem183 = iprot.readDouble();
                    struct.dvKnownRef.add(_elem183);
                  }
                  iprot.readListEnd();
                }
                struct.setDvKnownRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDirectionalDerivative_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceId != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
        if (struct.vUnknownRef != null) {
          oprot.writeFieldBegin(V_UNKNOWN_REF_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vUnknownRef.size()));
            for (long _iter185 : struct.vUnknownRef)
            {
              oprot.writeI64(_iter185);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.vKnownRef != null) {
          oprot.writeFieldBegin(V_KNOWN_REF_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.vKnownRef.size()));
            for (long _iter186 : struct.vKnownRef)
            {
              oprot.writeI64(_iter186);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dvKnownRef != null) {
          oprot.writeFieldBegin(DV_KNOWN_REF_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.dvKnownRef.size()));
            for (double _iter187 : struct.dvKnownRef)
            {
              oprot.writeDouble(_iter187);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDirectionalDerivative_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDirectionalDerivative_argsTupleScheme getScheme() {
        return new getDirectionalDerivative_argsTupleScheme();
      }
    }

    private static class getDirectionalDerivative_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDirectionalDerivative_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDirectionalDerivative_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstanceId()) {
          optionals.set(0);
        }
        if (struct.isSetVUnknownRef()) {
          optionals.set(1);
        }
        if (struct.isSetVKnownRef()) {
          optionals.set(2);
        }
        if (struct.isSetDvKnownRef()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInstanceId()) {
          oprot.writeString(struct.instanceId);
        }
        if (struct.isSetVUnknownRef()) {
          {
            oprot.writeI32(struct.vUnknownRef.size());
            for (long _iter188 : struct.vUnknownRef)
            {
              oprot.writeI64(_iter188);
            }
          }
        }
        if (struct.isSetVKnownRef()) {
          {
            oprot.writeI32(struct.vKnownRef.size());
            for (long _iter189 : struct.vKnownRef)
            {
              oprot.writeI64(_iter189);
            }
          }
        }
        if (struct.isSetDvKnownRef()) {
          {
            oprot.writeI32(struct.dvKnownRef.size());
            for (double _iter190 : struct.dvKnownRef)
            {
              oprot.writeDouble(_iter190);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDirectionalDerivative_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.instanceId = iprot.readString();
          struct.setInstanceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vUnknownRef = new java.util.ArrayList<java.lang.Long>(_list191.size);
            long _elem192;
            for (int _i193 = 0; _i193 < _list191.size; ++_i193)
            {
              _elem192 = iprot.readI64();
              struct.vUnknownRef.add(_elem192);
            }
          }
          struct.setVUnknownRefIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.vKnownRef = new java.util.ArrayList<java.lang.Long>(_list194.size);
            long _elem195;
            for (int _i196 = 0; _i196 < _list194.size; ++_i196)
            {
              _elem195 = iprot.readI64();
              struct.vKnownRef.add(_elem195);
            }
          }
          struct.setVKnownRefIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.dvKnownRef = new java.util.ArrayList<java.lang.Double>(_list197.size);
            double _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = iprot.readDouble();
              struct.dvKnownRef.add(_elem198);
            }
          }
          struct.setDvKnownRefIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDirectionalDerivative_result implements org.apache.thrift.TBase<getDirectionalDerivative_result, getDirectionalDerivative_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDirectionalDerivative_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDirectionalDerivative_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDirectionalDerivative_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDirectionalDerivative_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DirectionalDerivativeResult success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DirectionalDerivativeResult.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchInstanceException.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDirectionalDerivative_result.class, metaDataMap);
    }

    public getDirectionalDerivative_result() {
    }

    public getDirectionalDerivative_result(
      DirectionalDerivativeResult success,
      NoSuchInstanceException ex1,
      UnsupportedOperationException ex2)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDirectionalDerivative_result(getDirectionalDerivative_result other) {
      if (other.isSetSuccess()) {
        this.success = new DirectionalDerivativeResult(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new NoSuchInstanceException(other.ex1);
      }
      if (other.isSetEx2()) {
        this.ex2 = new UnsupportedOperationException(other.ex2);
      }
    }

    public getDirectionalDerivative_result deepCopy() {
      return new getDirectionalDerivative_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
      this.ex2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DirectionalDerivativeResult getSuccess() {
      return this.success;
    }

    public getDirectionalDerivative_result setSuccess(@org.apache.thrift.annotation.Nullable DirectionalDerivativeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchInstanceException getEx1() {
      return this.ex1;
    }

    public getDirectionalDerivative_result setEx1(@org.apache.thrift.annotation.Nullable NoSuchInstanceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedOperationException getEx2() {
      return this.ex2;
    }

    public getDirectionalDerivative_result setEx2(@org.apache.thrift.annotation.Nullable UnsupportedOperationException ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DirectionalDerivativeResult)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((NoSuchInstanceException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((UnsupportedOperationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDirectionalDerivative_result)
        return this.equals((getDirectionalDerivative_result)that);
      return false;
    }

    public boolean equals(getDirectionalDerivative_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDirectionalDerivative_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDirectionalDerivative_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDirectionalDerivative_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDirectionalDerivative_resultStandardScheme getScheme() {
        return new getDirectionalDerivative_resultStandardScheme();
      }
    }

    private static class getDirectionalDerivative_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDirectionalDerivative_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDirectionalDerivative_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DirectionalDerivativeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new NoSuchInstanceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new UnsupportedOperationException();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDirectionalDerivative_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDirectionalDerivative_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDirectionalDerivative_resultTupleScheme getScheme() {
        return new getDirectionalDerivative_resultTupleScheme();
      }
    }

    private static class getDirectionalDerivative_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDirectionalDerivative_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDirectionalDerivative_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDirectionalDerivative_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new DirectionalDerivativeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new NoSuchInstanceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new UnsupportedOperationException();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}


plugins {
    id "org.jruyi.thrift" version "0.4.0"
    id "com.google.protobuf" version "0.8.6"
    id "com.commercehub.gradle.plugin.avro-base" version "0.14.2"
}

def avro_version = '1.8.2'
def definitions = "../../../rpc-definitions"

dependencies {
    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.11.0'

    compile group: 'io.grpc', name: 'grpc-stub', version: grpc_version
    compile group: 'io.grpc', name: 'grpc-protobuf', version: grpc_version

    compile group: 'org.apache.avro', name: 'avro', version: avro_version
    compile group: 'org.apache.avro', name: 'avro-ipc', version: avro_version
}

avro {
    fieldVisibility = "PRIVATE"
}

task generateAvroProtocol(type: com.commercehub.gradle.plugin.avro.GenerateAvroProtocolTask) {
    source("${definitions}/avro")
    outputDir = file("build/avpr")
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("build/avpr")
    outputDir = file("build/avro")
}
generateAvro.dependsOn(generateAvroProtocol)
compileJava.source(generateAvro.outputs)

compileThrift {
    createGenFolder false
    generator 'java', 'private-members'
    sourceItems "${definitions}/thrift"
}

protobuf {
    generatedFilesBaseDir = "$projectDir/build"
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }

}

sourceSets {
    main {
        proto {
            srcDir "${definitions}/proto"
        }
    }
}

if (hasProperty("ossrhUsername")  && hasProperty("ossrhPassword")) {

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = 'no.mechatronics.sfi.fmuproxy'
    version = '0.1-SNAPSHOT'

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {

                from components.java
                artifact sourcesJar

                pom {
                    name = archivesBaseName
                    description = 'Generated sources from RPC schema definitions for use by FMU-proxy'
                    url = 'https://github.com/SFI-Mechatronics/FMU-proxy'

                    scm {
                        connection = 'scm:git:git://github.com/SFI-Mechatronics/FMU-proxy.git'
                        developerConnection = 'scm:git:ssh://github.com/SFI-Mechatronics/FMU-proxy.git'
                        url = 'https://github.com/SFI-Mechatronics/FMU-proxy/tree/master'
                    }

                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/mit-license.php'
                        }
                    }

                    developers {
                        developer {
                            id = 'laht'
                            name = 'Lars Ivar Hatledal'
                            email = 'laht@ntnu.no'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

}

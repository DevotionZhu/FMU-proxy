#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def load_from_url(self, url):
        """
        Parameters:
         - url

        """
        pass

    def load_from_file(self, name, data):
        """
        Parameters:
         - name
         - data

        """
        pass

    def get_model_description(self, fmuId):
        """
        Parameters:
         - fmuId

        """
        pass

    def create_instance(self, fmuId):
        """
        Parameters:
         - fmuId

        """
        pass

    def setup_experiment(self, instanceId, start, stop, tolerance):
        """
        Parameters:
         - instanceId
         - start
         - stop
         - tolerance

        """
        pass

    def enter_initialization_mode(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        pass

    def exit_initialization_mode(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        pass

    def step(self, instanceId, stepSize):
        """
        Parameters:
         - instanceId
         - stepSize

        """
        pass

    def reset(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        pass

    def terminate(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        pass

    def freeInstance(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        pass

    def read_integer(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        pass

    def read_real(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        pass

    def read_string(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        pass

    def read_boolean(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        pass

    def write_integer(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        pass

    def write_real(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        pass

    def write_string(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        pass

    def write_boolean(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        pass

    def get_directional_derivative(self, instanceId, vUnknownRef, vKnownRef, dvKnownRef):
        """
        Parameters:
         - instanceId
         - vUnknownRef
         - vKnownRef
         - dvKnownRef

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def load_from_url(self, url):
        """
        Parameters:
         - url

        """
        self.send_load_from_url(url)
        return self.recv_load_from_url()

    def send_load_from_url(self, url):
        self._oprot.writeMessageBegin('load_from_url', TMessageType.CALL, self._seqid)
        args = load_from_url_args()
        args.url = url
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_load_from_url(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = load_from_url_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "load_from_url failed: unknown result")

    def load_from_file(self, name, data):
        """
        Parameters:
         - name
         - data

        """
        self.send_load_from_file(name, data)
        return self.recv_load_from_file()

    def send_load_from_file(self, name, data):
        self._oprot.writeMessageBegin('load_from_file', TMessageType.CALL, self._seqid)
        args = load_from_file_args()
        args.name = name
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_load_from_file(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = load_from_file_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "load_from_file failed: unknown result")

    def get_model_description(self, fmuId):
        """
        Parameters:
         - fmuId

        """
        self.send_get_model_description(fmuId)
        return self.recv_get_model_description()

    def send_get_model_description(self, fmuId):
        self._oprot.writeMessageBegin('get_model_description', TMessageType.CALL, self._seqid)
        args = get_model_description_args()
        args.fmuId = fmuId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_model_description(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_model_description_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_model_description failed: unknown result")

    def create_instance(self, fmuId):
        """
        Parameters:
         - fmuId

        """
        self.send_create_instance(fmuId)
        return self.recv_create_instance()

    def send_create_instance(self, fmuId):
        self._oprot.writeMessageBegin('create_instance', TMessageType.CALL, self._seqid)
        args = create_instance_args()
        args.fmuId = fmuId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_instance(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_instance_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_instance failed: unknown result")

    def setup_experiment(self, instanceId, start, stop, tolerance):
        """
        Parameters:
         - instanceId
         - start
         - stop
         - tolerance

        """
        self.send_setup_experiment(instanceId, start, stop, tolerance)
        return self.recv_setup_experiment()

    def send_setup_experiment(self, instanceId, start, stop, tolerance):
        self._oprot.writeMessageBegin('setup_experiment', TMessageType.CALL, self._seqid)
        args = setup_experiment_args()
        args.instanceId = instanceId
        args.start = start
        args.stop = stop
        args.tolerance = tolerance
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setup_experiment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setup_experiment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "setup_experiment failed: unknown result")

    def enter_initialization_mode(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        self.send_enter_initialization_mode(instanceId)
        return self.recv_enter_initialization_mode()

    def send_enter_initialization_mode(self, instanceId):
        self._oprot.writeMessageBegin('enter_initialization_mode', TMessageType.CALL, self._seqid)
        args = enter_initialization_mode_args()
        args.instanceId = instanceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_enter_initialization_mode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = enter_initialization_mode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "enter_initialization_mode failed: unknown result")

    def exit_initialization_mode(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        self.send_exit_initialization_mode(instanceId)
        return self.recv_exit_initialization_mode()

    def send_exit_initialization_mode(self, instanceId):
        self._oprot.writeMessageBegin('exit_initialization_mode', TMessageType.CALL, self._seqid)
        args = exit_initialization_mode_args()
        args.instanceId = instanceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_exit_initialization_mode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = exit_initialization_mode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "exit_initialization_mode failed: unknown result")

    def step(self, instanceId, stepSize):
        """
        Parameters:
         - instanceId
         - stepSize

        """
        self.send_step(instanceId, stepSize)
        return self.recv_step()

    def send_step(self, instanceId, stepSize):
        self._oprot.writeMessageBegin('step', TMessageType.CALL, self._seqid)
        args = step_args()
        args.instanceId = instanceId
        args.stepSize = stepSize
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_step(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = step_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "step failed: unknown result")

    def reset(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        self.send_reset(instanceId)
        return self.recv_reset()

    def send_reset(self, instanceId):
        self._oprot.writeMessageBegin('reset', TMessageType.CALL, self._seqid)
        args = reset_args()
        args.instanceId = instanceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reset(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reset_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reset failed: unknown result")

    def terminate(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        self.send_terminate(instanceId)
        return self.recv_terminate()

    def send_terminate(self, instanceId):
        self._oprot.writeMessageBegin('terminate', TMessageType.CALL, self._seqid)
        args = terminate_args()
        args.instanceId = instanceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_terminate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = terminate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "terminate failed: unknown result")

    def freeInstance(self, instanceId):
        """
        Parameters:
         - instanceId

        """
        self.send_freeInstance(instanceId)
        self.recv_freeInstance()

    def send_freeInstance(self, instanceId):
        self._oprot.writeMessageBegin('freeInstance', TMessageType.CALL, self._seqid)
        args = freeInstance_args()
        args.instanceId = instanceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_freeInstance(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = freeInstance_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def read_integer(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        self.send_read_integer(instanceId, vr)
        return self.recv_read_integer()

    def send_read_integer(self, instanceId, vr):
        self._oprot.writeMessageBegin('read_integer', TMessageType.CALL, self._seqid)
        args = read_integer_args()
        args.instanceId = instanceId
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_read_integer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = read_integer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "read_integer failed: unknown result")

    def read_real(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        self.send_read_real(instanceId, vr)
        return self.recv_read_real()

    def send_read_real(self, instanceId, vr):
        self._oprot.writeMessageBegin('read_real', TMessageType.CALL, self._seqid)
        args = read_real_args()
        args.instanceId = instanceId
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_read_real(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = read_real_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "read_real failed: unknown result")

    def read_string(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        self.send_read_string(instanceId, vr)
        return self.recv_read_string()

    def send_read_string(self, instanceId, vr):
        self._oprot.writeMessageBegin('read_string', TMessageType.CALL, self._seqid)
        args = read_string_args()
        args.instanceId = instanceId
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_read_string(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = read_string_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "read_string failed: unknown result")

    def read_boolean(self, instanceId, vr):
        """
        Parameters:
         - instanceId
         - vr

        """
        self.send_read_boolean(instanceId, vr)
        return self.recv_read_boolean()

    def send_read_boolean(self, instanceId, vr):
        self._oprot.writeMessageBegin('read_boolean', TMessageType.CALL, self._seqid)
        args = read_boolean_args()
        args.instanceId = instanceId
        args.vr = vr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_read_boolean(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = read_boolean_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "read_boolean failed: unknown result")

    def write_integer(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        self.send_write_integer(instanceId, vr, value)
        return self.recv_write_integer()

    def send_write_integer(self, instanceId, vr, value):
        self._oprot.writeMessageBegin('write_integer', TMessageType.CALL, self._seqid)
        args = write_integer_args()
        args.instanceId = instanceId
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_write_integer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = write_integer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "write_integer failed: unknown result")

    def write_real(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        self.send_write_real(instanceId, vr, value)
        return self.recv_write_real()

    def send_write_real(self, instanceId, vr, value):
        self._oprot.writeMessageBegin('write_real', TMessageType.CALL, self._seqid)
        args = write_real_args()
        args.instanceId = instanceId
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_write_real(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = write_real_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "write_real failed: unknown result")

    def write_string(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        self.send_write_string(instanceId, vr, value)
        return self.recv_write_string()

    def send_write_string(self, instanceId, vr, value):
        self._oprot.writeMessageBegin('write_string', TMessageType.CALL, self._seqid)
        args = write_string_args()
        args.instanceId = instanceId
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_write_string(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = write_string_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "write_string failed: unknown result")

    def write_boolean(self, instanceId, vr, value):
        """
        Parameters:
         - instanceId
         - vr
         - value

        """
        self.send_write_boolean(instanceId, vr, value)
        return self.recv_write_boolean()

    def send_write_boolean(self, instanceId, vr, value):
        self._oprot.writeMessageBegin('write_boolean', TMessageType.CALL, self._seqid)
        args = write_boolean_args()
        args.instanceId = instanceId
        args.vr = vr
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_write_boolean(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = write_boolean_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "write_boolean failed: unknown result")

    def get_directional_derivative(self, instanceId, vUnknownRef, vKnownRef, dvKnownRef):
        """
        Parameters:
         - instanceId
         - vUnknownRef
         - vKnownRef
         - dvKnownRef

        """
        self.send_get_directional_derivative(instanceId, vUnknownRef, vKnownRef, dvKnownRef)
        return self.recv_get_directional_derivative()

    def send_get_directional_derivative(self, instanceId, vUnknownRef, vKnownRef, dvKnownRef):
        self._oprot.writeMessageBegin('get_directional_derivative', TMessageType.CALL, self._seqid)
        args = get_directional_derivative_args()
        args.instanceId = instanceId
        args.vUnknownRef = vUnknownRef
        args.vKnownRef = vKnownRef
        args.dvKnownRef = dvKnownRef
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_directional_derivative(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_directional_derivative_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_directional_derivative failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["load_from_url"] = Processor.process_load_from_url
        self._processMap["load_from_file"] = Processor.process_load_from_file
        self._processMap["get_model_description"] = Processor.process_get_model_description
        self._processMap["create_instance"] = Processor.process_create_instance
        self._processMap["setup_experiment"] = Processor.process_setup_experiment
        self._processMap["enter_initialization_mode"] = Processor.process_enter_initialization_mode
        self._processMap["exit_initialization_mode"] = Processor.process_exit_initialization_mode
        self._processMap["step"] = Processor.process_step
        self._processMap["reset"] = Processor.process_reset
        self._processMap["terminate"] = Processor.process_terminate
        self._processMap["freeInstance"] = Processor.process_freeInstance
        self._processMap["read_integer"] = Processor.process_read_integer
        self._processMap["read_real"] = Processor.process_read_real
        self._processMap["read_string"] = Processor.process_read_string
        self._processMap["read_boolean"] = Processor.process_read_boolean
        self._processMap["write_integer"] = Processor.process_write_integer
        self._processMap["write_real"] = Processor.process_write_real
        self._processMap["write_string"] = Processor.process_write_string
        self._processMap["write_boolean"] = Processor.process_write_boolean
        self._processMap["get_directional_derivative"] = Processor.process_get_directional_derivative

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_load_from_url(self, seqid, iprot, oprot):
        args = load_from_url_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = load_from_url_result()
        try:
            result.success = self._handler.load_from_url(args.url)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("load_from_url", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_load_from_file(self, seqid, iprot, oprot):
        args = load_from_file_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = load_from_file_result()
        try:
            result.success = self._handler.load_from_file(args.name, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("load_from_file", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_model_description(self, seqid, iprot, oprot):
        args = get_model_description_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_model_description_result()
        try:
            result.success = self._handler.get_model_description(args.fmuId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchFmuException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_model_description", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_instance(self, seqid, iprot, oprot):
        args = create_instance_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_instance_result()
        try:
            result.success = self._handler.create_instance(args.fmuId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except UnsupportedOperationException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchFmuException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_instance", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setup_experiment(self, seqid, iprot, oprot):
        args = setup_experiment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setup_experiment_result()
        try:
            result.success = self._handler.setup_experiment(args.instanceId, args.start, args.stop, args.tolerance)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setup_experiment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_enter_initialization_mode(self, seqid, iprot, oprot):
        args = enter_initialization_mode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = enter_initialization_mode_result()
        try:
            result.success = self._handler.enter_initialization_mode(args.instanceId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("enter_initialization_mode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_exit_initialization_mode(self, seqid, iprot, oprot):
        args = exit_initialization_mode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = exit_initialization_mode_result()
        try:
            result.success = self._handler.exit_initialization_mode(args.instanceId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("exit_initialization_mode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_step(self, seqid, iprot, oprot):
        args = step_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = step_result()
        try:
            result.success = self._handler.step(args.instanceId, args.stepSize)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("step", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reset(self, seqid, iprot, oprot):
        args = reset_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reset_result()
        try:
            result.success = self._handler.reset(args.instanceId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reset", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_terminate(self, seqid, iprot, oprot):
        args = terminate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = terminate_result()
        try:
            result.success = self._handler.terminate(args.instanceId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("terminate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_freeInstance(self, seqid, iprot, oprot):
        args = freeInstance_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = freeInstance_result()
        try:
            self._handler.freeInstance(args.instanceId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("freeInstance", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_read_integer(self, seqid, iprot, oprot):
        args = read_integer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = read_integer_result()
        try:
            result.success = self._handler.read_integer(args.instanceId, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("read_integer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_read_real(self, seqid, iprot, oprot):
        args = read_real_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = read_real_result()
        try:
            result.success = self._handler.read_real(args.instanceId, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("read_real", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_read_string(self, seqid, iprot, oprot):
        args = read_string_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = read_string_result()
        try:
            result.success = self._handler.read_string(args.instanceId, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("read_string", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_read_boolean(self, seqid, iprot, oprot):
        args = read_boolean_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = read_boolean_result()
        try:
            result.success = self._handler.read_boolean(args.instanceId, args.vr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("read_boolean", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_write_integer(self, seqid, iprot, oprot):
        args = write_integer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = write_integer_result()
        try:
            result.success = self._handler.write_integer(args.instanceId, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("write_integer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_write_real(self, seqid, iprot, oprot):
        args = write_real_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = write_real_result()
        try:
            result.success = self._handler.write_real(args.instanceId, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("write_real", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_write_string(self, seqid, iprot, oprot):
        args = write_string_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = write_string_result()
        try:
            result.success = self._handler.write_string(args.instanceId, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("write_string", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_write_boolean(self, seqid, iprot, oprot):
        args = write_boolean_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = write_boolean_result()
        try:
            result.success = self._handler.write_boolean(args.instanceId, args.vr, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except NoSuchVariableException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("write_boolean", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_directional_derivative(self, seqid, iprot, oprot):
        args = get_directional_derivative_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_directional_derivative_result()
        try:
            result.success = self._handler.get_directional_derivative(args.instanceId, args.vUnknownRef, args.vKnownRef, args.dvKnownRef)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except NoSuchInstanceException as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except UnsupportedOperationException as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_directional_derivative", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class load_from_url_args(object):
    """
    Attributes:
     - url

    """


    def __init__(self, url=None,):
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('load_from_url_args')
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 1)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(load_from_url_args)
load_from_url_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'url', 'UTF8', None, ),  # 1
)


class load_from_url_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('load_from_url_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(load_from_url_result)
load_from_url_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class load_from_file_args(object):
    """
    Attributes:
     - name
     - data

    """


    def __init__(self, name=None, data=None,):
        self.name = name
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('load_from_file_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(load_from_file_args)
load_from_file_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
)


class load_from_file_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('load_from_file_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(load_from_file_result)
load_from_file_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class get_model_description_args(object):
    """
    Attributes:
     - fmuId

    """


    def __init__(self, fmuId=None,):
        self.fmuId = fmuId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fmuId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_model_description_args')
        if self.fmuId is not None:
            oprot.writeFieldBegin('fmuId', TType.STRING, 1)
            oprot.writeString(self.fmuId.encode('utf-8') if sys.version_info[0] == 2 else self.fmuId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_model_description_args)
get_model_description_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fmuId', 'UTF8', None, ),  # 1
)


class get_model_description_result(object):
    """
    Attributes:
     - success
     - ex

    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ModelDescription()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchFmuException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_model_description_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_model_description_result)
get_model_description_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ModelDescription, None], None, ),  # 0
    (1, TType.STRUCT, 'ex', [NoSuchFmuException, None], None, ),  # 1
)


class create_instance_args(object):
    """
    Attributes:
     - fmuId

    """


    def __init__(self, fmuId=None,):
        self.fmuId = fmuId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fmuId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_instance_args')
        if self.fmuId is not None:
            oprot.writeFieldBegin('fmuId', TType.STRING, 1)
            oprot.writeString(self.fmuId.encode('utf-8') if sys.version_info[0] == 2 else self.fmuId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_instance_args)
create_instance_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fmuId', 'UTF8', None, ),  # 1
)


class create_instance_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = UnsupportedOperationException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchFmuException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_instance_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_instance_result)
create_instance_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'ex1', [UnsupportedOperationException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchFmuException, None], None, ),  # 2
)


class setup_experiment_args(object):
    """
    Attributes:
     - instanceId
     - start
     - stop
     - tolerance

    """


    def __init__(self, instanceId=None, start=None, stop=None, tolerance=None,):
        self.instanceId = instanceId
        self.start = start
        self.stop = stop
        self.tolerance = tolerance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.start = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.stop = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.tolerance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setup_experiment_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.DOUBLE, 2)
            oprot.writeDouble(self.start)
            oprot.writeFieldEnd()
        if self.stop is not None:
            oprot.writeFieldBegin('stop', TType.DOUBLE, 3)
            oprot.writeDouble(self.stop)
            oprot.writeFieldEnd()
        if self.tolerance is not None:
            oprot.writeFieldBegin('tolerance', TType.DOUBLE, 4)
            oprot.writeDouble(self.tolerance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setup_experiment_args)
setup_experiment_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'start', None, None, ),  # 2
    (3, TType.DOUBLE, 'stop', None, None, ),  # 3
    (4, TType.DOUBLE, 'tolerance', None, None, ),  # 4
)


class setup_experiment_result(object):
    """
    Attributes:
     - success
     - ex

    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchInstanceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setup_experiment_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setup_experiment_result)
setup_experiment_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [NoSuchInstanceException, None], None, ),  # 1
)


class enter_initialization_mode_args(object):
    """
    Attributes:
     - instanceId

    """


    def __init__(self, instanceId=None,):
        self.instanceId = instanceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('enter_initialization_mode_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(enter_initialization_mode_args)
enter_initialization_mode_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
)


class enter_initialization_mode_result(object):
    """
    Attributes:
     - success
     - ex

    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchInstanceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('enter_initialization_mode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(enter_initialization_mode_result)
enter_initialization_mode_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [NoSuchInstanceException, None], None, ),  # 1
)


class exit_initialization_mode_args(object):
    """
    Attributes:
     - instanceId

    """


    def __init__(self, instanceId=None,):
        self.instanceId = instanceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exit_initialization_mode_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exit_initialization_mode_args)
exit_initialization_mode_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
)


class exit_initialization_mode_result(object):
    """
    Attributes:
     - success
     - ex

    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchInstanceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exit_initialization_mode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exit_initialization_mode_result)
exit_initialization_mode_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [NoSuchInstanceException, None], None, ),  # 1
)


class step_args(object):
    """
    Attributes:
     - instanceId
     - stepSize

    """


    def __init__(self, instanceId=None, stepSize=None,):
        self.instanceId = instanceId
        self.stepSize = stepSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.stepSize = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('step_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.stepSize is not None:
            oprot.writeFieldBegin('stepSize', TType.DOUBLE, 2)
            oprot.writeDouble(self.stepSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(step_args)
step_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'stepSize', None, None, ),  # 2
)


class step_result(object):
    """
    Attributes:
     - success
     - ex

    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = StepResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchInstanceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('step_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(step_result)
step_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [StepResult, None], None, ),  # 0
    (1, TType.STRUCT, 'ex', [NoSuchInstanceException, None], None, ),  # 1
)


class reset_args(object):
    """
    Attributes:
     - instanceId

    """


    def __init__(self, instanceId=None,):
        self.instanceId = instanceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reset_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reset_args)
reset_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
)


class reset_result(object):
    """
    Attributes:
     - success
     - ex

    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchInstanceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reset_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reset_result)
reset_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [NoSuchInstanceException, None], None, ),  # 1
)


class terminate_args(object):
    """
    Attributes:
     - instanceId

    """


    def __init__(self, instanceId=None,):
        self.instanceId = instanceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminate_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminate_args)
terminate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
)


class terminate_result(object):
    """
    Attributes:
     - success
     - ex

    """


    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchInstanceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminate_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminate_result)
terminate_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex', [NoSuchInstanceException, None], None, ),  # 1
)


class freeInstance_args(object):
    """
    Attributes:
     - instanceId

    """


    def __init__(self, instanceId=None,):
        self.instanceId = instanceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('freeInstance_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(freeInstance_args)
freeInstance_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
)


class freeInstance_result(object):
    """
    Attributes:
     - ex

    """


    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = NoSuchInstanceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('freeInstance_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(freeInstance_result)
freeInstance_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ex', [NoSuchInstanceException, None], None, ),  # 1
)


class read_integer_args(object):
    """
    Attributes:
     - instanceId
     - vr

    """


    def __init__(self, instanceId=None, vr=None,):
        self.instanceId = instanceId
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readI64()
                        self.vr.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_integer_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter83 in self.vr:
                oprot.writeI64(iter83)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_integer_args)
read_integer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
)


class read_integer_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = IntegerRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_integer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_integer_result)
read_integer_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [IntegerRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class read_real_args(object):
    """
    Attributes:
     - instanceId
     - vr

    """


    def __init__(self, instanceId=None, vr=None,):
        self.instanceId = instanceId
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = iprot.readI64()
                        self.vr.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_real_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter90 in self.vr:
                oprot.writeI64(iter90)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_real_args)
read_real_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
)


class read_real_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = RealRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_real_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_real_result)
read_real_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [RealRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class read_string_args(object):
    """
    Attributes:
     - instanceId
     - vr

    """


    def __init__(self, instanceId=None, vr=None,):
        self.instanceId = instanceId
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = iprot.readI64()
                        self.vr.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_string_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter97 in self.vr:
                oprot.writeI64(iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_string_args)
read_string_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
)


class read_string_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = StringRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_string_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_string_result)
read_string_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [StringRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class read_boolean_args(object):
    """
    Attributes:
     - instanceId
     - vr

    """


    def __init__(self, instanceId=None, vr=None,):
        self.instanceId = instanceId
        self.vr = vr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readI64()
                        self.vr.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_boolean_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter104 in self.vr:
                oprot.writeI64(iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_boolean_args)
read_boolean_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
)


class read_boolean_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = BooleanRead()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_boolean_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_boolean_result)
read_boolean_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [BooleanRead, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class write_integer_args(object):
    """
    Attributes:
     - instanceId
     - vr
     - value

    """


    def __init__(self, instanceId=None, vr=None, value=None,):
        self.instanceId = instanceId
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = iprot.readI64()
                        self.vr.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype114, _size111) = iprot.readListBegin()
                    for _i115 in range(_size111):
                        _elem116 = iprot.readI32()
                        self.value.append(_elem116)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_integer_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter117 in self.vr:
                oprot.writeI64(iter117)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.value))
            for iter118 in self.value:
                oprot.writeI32(iter118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_integer_args)
write_integer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.I32, None, False), None, ),  # 3
)


class write_integer_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_integer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_integer_result)
write_integer_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class write_real_args(object):
    """
    Attributes:
     - instanceId
     - vr
     - value

    """


    def __init__(self, instanceId=None, vr=None, value=None,):
        self.instanceId = instanceId
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = iprot.readI64()
                        self.vr.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype128, _size125) = iprot.readListBegin()
                    for _i129 in range(_size125):
                        _elem130 = iprot.readDouble()
                        self.value.append(_elem130)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_real_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter131 in self.vr:
                oprot.writeI64(iter131)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.value))
            for iter132 in self.value:
                oprot.writeDouble(iter132)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_real_args)
write_real_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.DOUBLE, None, False), None, ),  # 3
)


class write_real_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_real_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_real_result)
write_real_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class write_string_args(object):
    """
    Attributes:
     - instanceId
     - vr
     - value

    """


    def __init__(self, instanceId=None, vr=None, value=None,):
        self.instanceId = instanceId
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = iprot.readI64()
                        self.vr.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype142, _size139) = iprot.readListBegin()
                    for _i143 in range(_size139):
                        _elem144 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.value.append(_elem144)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_string_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter145 in self.vr:
                oprot.writeI64(iter145)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.value))
            for iter146 in self.value:
                oprot.writeString(iter146.encode('utf-8') if sys.version_info[0] == 2 else iter146)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_string_args)
write_string_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.STRING, 'UTF8', False), None, ),  # 3
)


class write_string_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_string_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_string_result)
write_string_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class write_boolean_args(object):
    """
    Attributes:
     - instanceId
     - vr
     - value

    """


    def __init__(self, instanceId=None, vr=None, value=None,):
        self.instanceId = instanceId
        self.vr = vr
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vr = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = iprot.readI64()
                        self.vr.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype156, _size153) = iprot.readListBegin()
                    for _i157 in range(_size153):
                        _elem158 = iprot.readBool()
                        self.value.append(_elem158)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_boolean_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vr is not None:
            oprot.writeFieldBegin('vr', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vr))
            for iter159 in self.vr:
                oprot.writeI64(iter159)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 3)
            oprot.writeListBegin(TType.BOOL, len(self.value))
            for iter160 in self.value:
                oprot.writeBool(iter160)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_boolean_args)
write_boolean_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vr', (TType.I64, None, False), None, ),  # 2
    (3, TType.LIST, 'value', (TType.BOOL, None, False), None, ),  # 3
)


class write_boolean_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = NoSuchVariableException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('write_boolean_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(write_boolean_result)
write_boolean_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [NoSuchVariableException, None], None, ),  # 2
)


class get_directional_derivative_args(object):
    """
    Attributes:
     - instanceId
     - vUnknownRef
     - vKnownRef
     - dvKnownRef

    """


    def __init__(self, instanceId=None, vUnknownRef=None, vKnownRef=None, dvKnownRef=None,):
        self.instanceId = instanceId
        self.vUnknownRef = vUnknownRef
        self.vKnownRef = vKnownRef
        self.dvKnownRef = dvKnownRef

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vUnknownRef = []
                    (_etype164, _size161) = iprot.readListBegin()
                    for _i165 in range(_size161):
                        _elem166 = iprot.readI64()
                        self.vUnknownRef.append(_elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.vKnownRef = []
                    (_etype170, _size167) = iprot.readListBegin()
                    for _i171 in range(_size167):
                        _elem172 = iprot.readI64()
                        self.vKnownRef.append(_elem172)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.dvKnownRef = []
                    (_etype176, _size173) = iprot.readListBegin()
                    for _i177 in range(_size173):
                        _elem178 = iprot.readDouble()
                        self.dvKnownRef.append(_elem178)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_directional_derivative_args')
        if self.instanceId is not None:
            oprot.writeFieldBegin('instanceId', TType.STRING, 1)
            oprot.writeString(self.instanceId.encode('utf-8') if sys.version_info[0] == 2 else self.instanceId)
            oprot.writeFieldEnd()
        if self.vUnknownRef is not None:
            oprot.writeFieldBegin('vUnknownRef', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.vUnknownRef))
            for iter179 in self.vUnknownRef:
                oprot.writeI64(iter179)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.vKnownRef is not None:
            oprot.writeFieldBegin('vKnownRef', TType.LIST, 3)
            oprot.writeListBegin(TType.I64, len(self.vKnownRef))
            for iter180 in self.vKnownRef:
                oprot.writeI64(iter180)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dvKnownRef is not None:
            oprot.writeFieldBegin('dvKnownRef', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.dvKnownRef))
            for iter181 in self.dvKnownRef:
                oprot.writeDouble(iter181)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_directional_derivative_args)
get_directional_derivative_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vUnknownRef', (TType.I64, None, False), None, ),  # 2
    (3, TType.LIST, 'vKnownRef', (TType.I64, None, False), None, ),  # 3
    (4, TType.LIST, 'dvKnownRef', (TType.DOUBLE, None, False), None, ),  # 4
)


class get_directional_derivative_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2

    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = DirectionalDerivativeResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = NoSuchInstanceException()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = UnsupportedOperationException()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_directional_derivative_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_directional_derivative_result)
get_directional_derivative_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [DirectionalDerivativeResult, None], None, ),  # 0
    (1, TType.STRUCT, 'ex1', [NoSuchInstanceException, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [UnsupportedOperationException, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs


#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Status(object):
    OK_STATUS = 0
    WARNING_STATUS = 1
    DISCARD_STATUS = 2
    ERROR_STATUS = 3
    FATAL_STATUS = 4
    PENDING_STATUS = 5

    _VALUES_TO_NAMES = {
        0: "OK_STATUS",
        1: "WARNING_STATUS",
        2: "DISCARD_STATUS",
        3: "ERROR_STATUS",
        4: "FATAL_STATUS",
        5: "PENDING_STATUS",
    }

    _NAMES_TO_VALUES = {
        "OK_STATUS": 0,
        "WARNING_STATUS": 1,
        "DISCARD_STATUS": 2,
        "ERROR_STATUS": 3,
        "FATAL_STATUS": 4,
        "PENDING_STATUS": 5,
    }


class IntegerAttribute(object):
    """
    Attributes:
     - min
     - max
     - start
     - quantity

    """


    def __init__(self, min=None, max=None, start=None, quantity=None,):
        self.min = min
        self.max = max
        self.start = start
        self.quantity = quantity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.min = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.quantity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IntegerAttribute')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.I32, 1)
            oprot.writeI32(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.I32, 2)
            oprot.writeI32(self.max)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 3)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.quantity is not None:
            oprot.writeFieldBegin('quantity', TType.STRING, 4)
            oprot.writeString(self.quantity.encode('utf-8') if sys.version_info[0] == 2 else self.quantity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RealAttribute(object):
    """
    Attributes:
     - min
     - max
     - start
     - quantity

    """


    def __init__(self, min=None, max=None, start=None, quantity=None,):
        self.min = min
        self.max = max
        self.start = start
        self.quantity = quantity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.start = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.quantity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealAttribute')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.DOUBLE, 1)
            oprot.writeDouble(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.DOUBLE, 2)
            oprot.writeDouble(self.max)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.DOUBLE, 3)
            oprot.writeDouble(self.start)
            oprot.writeFieldEnd()
        if self.quantity is not None:
            oprot.writeFieldBegin('quantity', TType.STRING, 4)
            oprot.writeString(self.quantity.encode('utf-8') if sys.version_info[0] == 2 else self.quantity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StringAttribute(object):
    """
    Attributes:
     - start

    """


    def __init__(self, start=None,):
        self.start = start

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.start = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StringAttribute')
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.STRING, 1)
            oprot.writeString(self.start.encode('utf-8') if sys.version_info[0] == 2 else self.start)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BooleanAttribute(object):
    """
    Attributes:
     - start

    """


    def __init__(self, start=None,):
        self.start = start

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.start = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BooleanAttribute')
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.BOOL, 1)
            oprot.writeBool(self.start)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EnumerationAttribute(object):
    """
    Attributes:
     - min
     - max
     - start
     - quantity

    """


    def __init__(self, min=None, max=None, start=None, quantity=None,):
        self.min = min
        self.max = max
        self.start = start
        self.quantity = quantity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.min = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.quantity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EnumerationAttribute')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.I32, 1)
            oprot.writeI32(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.I32, 2)
            oprot.writeI32(self.max)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 3)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.quantity is not None:
            oprot.writeFieldBegin('quantity', TType.STRING, 4)
            oprot.writeString(self.quantity.encode('utf-8') if sys.version_info[0] == 2 else self.quantity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScalarVariableAttribute(object):
    """
    Attributes:
     - integer_attribute
     - real_attribute
     - string_attribute
     - boolean_attribute
     - enumeration_attribute

    """


    def __init__(self, integer_attribute=None, real_attribute=None, string_attribute=None, boolean_attribute=None, enumeration_attribute=None,):
        self.integer_attribute = integer_attribute
        self.real_attribute = real_attribute
        self.string_attribute = string_attribute
        self.boolean_attribute = boolean_attribute
        self.enumeration_attribute = enumeration_attribute

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.integer_attribute = IntegerAttribute()
                    self.integer_attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.real_attribute = RealAttribute()
                    self.real_attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.string_attribute = StringAttribute()
                    self.string_attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.boolean_attribute = BooleanAttribute()
                    self.boolean_attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.enumeration_attribute = EnumerationAttribute()
                    self.enumeration_attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScalarVariableAttribute')
        if self.integer_attribute is not None:
            oprot.writeFieldBegin('integer_attribute', TType.STRUCT, 1)
            self.integer_attribute.write(oprot)
            oprot.writeFieldEnd()
        if self.real_attribute is not None:
            oprot.writeFieldBegin('real_attribute', TType.STRUCT, 2)
            self.real_attribute.write(oprot)
            oprot.writeFieldEnd()
        if self.string_attribute is not None:
            oprot.writeFieldBegin('string_attribute', TType.STRUCT, 3)
            self.string_attribute.write(oprot)
            oprot.writeFieldEnd()
        if self.boolean_attribute is not None:
            oprot.writeFieldBegin('boolean_attribute', TType.STRUCT, 4)
            self.boolean_attribute.write(oprot)
            oprot.writeFieldEnd()
        if self.enumeration_attribute is not None:
            oprot.writeFieldBegin('enumeration_attribute', TType.STRUCT, 5)
            self.enumeration_attribute.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScalarVariable(object):
    """
    Attributes:
     - name
     - value_reference
     - description
     - initial
     - causality
     - variability
     - attribute

    """


    def __init__(self, name=None, value_reference=None, description=None, initial=None, causality=None, variability=None, attribute=None,):
        self.name = name
        self.value_reference = value_reference
        self.description = description
        self.initial = initial
        self.causality = causality
        self.variability = variability
        self.attribute = attribute

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.value_reference = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.initial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.causality = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.variability = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.attribute = ScalarVariableAttribute()
                    self.attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScalarVariable')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.value_reference is not None:
            oprot.writeFieldBegin('value_reference', TType.I64, 2)
            oprot.writeI64(self.value_reference)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.initial is not None:
            oprot.writeFieldBegin('initial', TType.STRING, 4)
            oprot.writeString(self.initial.encode('utf-8') if sys.version_info[0] == 2 else self.initial)
            oprot.writeFieldEnd()
        if self.causality is not None:
            oprot.writeFieldBegin('causality', TType.STRING, 5)
            oprot.writeString(self.causality.encode('utf-8') if sys.version_info[0] == 2 else self.causality)
            oprot.writeFieldEnd()
        if self.variability is not None:
            oprot.writeFieldBegin('variability', TType.STRING, 6)
            oprot.writeString(self.variability.encode('utf-8') if sys.version_info[0] == 2 else self.variability)
            oprot.writeFieldEnd()
        if self.attribute is not None:
            oprot.writeFieldBegin('attribute', TType.STRUCT, 7)
            self.attribute.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Unknown(object):
    """
    Attributes:
     - index
     - dependencies
     - dependencies_kind

    """


    def __init__(self, index=None, dependencies=None, dependencies_kind=None,):
        self.index = index
        self.dependencies = dependencies
        self.dependencies_kind = dependencies_kind

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.dependencies = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.dependencies.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.dependencies_kind = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.dependencies_kind.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Unknown')
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 1)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        if self.dependencies is not None:
            oprot.writeFieldBegin('dependencies', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.dependencies))
            for iter12 in self.dependencies:
                oprot.writeI32(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dependencies_kind is not None:
            oprot.writeFieldBegin('dependencies_kind', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.dependencies_kind))
            for iter13 in self.dependencies_kind:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ModelStructure(object):
    """
    Attributes:
     - outputs
     - derivatives
     - initial_unknowns

    """


    def __init__(self, outputs=None, derivatives=None, initial_unknowns=None,):
        self.outputs = outputs
        self.derivatives = derivatives
        self.initial_unknowns = initial_unknowns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.outputs = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Unknown()
                        _elem19.read(iprot)
                        self.outputs.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.derivatives = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = Unknown()
                        _elem25.read(iprot)
                        self.derivatives.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.initial_unknowns = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = Unknown()
                        _elem31.read(iprot)
                        self.initial_unknowns.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ModelStructure')
        if self.outputs is not None:
            oprot.writeFieldBegin('outputs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.outputs))
            for iter32 in self.outputs:
                iter32.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.derivatives is not None:
            oprot.writeFieldBegin('derivatives', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.derivatives))
            for iter33 in self.derivatives:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.initial_unknowns is not None:
            oprot.writeFieldBegin('initial_unknowns', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.initial_unknowns))
            for iter34 in self.initial_unknowns:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DefaultExperiment(object):
    """
    Attributes:
     - startTime
     - stopTime
     - tolerance
     - stepSize

    """


    def __init__(self, startTime=None, stopTime=None, tolerance=None, stepSize=None,):
        self.startTime = startTime
        self.stopTime = stopTime
        self.tolerance = tolerance
        self.stepSize = stepSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.startTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.stopTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.tolerance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.stepSize = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DefaultExperiment')
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.DOUBLE, 1)
            oprot.writeDouble(self.startTime)
            oprot.writeFieldEnd()
        if self.stopTime is not None:
            oprot.writeFieldBegin('stopTime', TType.DOUBLE, 2)
            oprot.writeDouble(self.stopTime)
            oprot.writeFieldEnd()
        if self.tolerance is not None:
            oprot.writeFieldBegin('tolerance', TType.DOUBLE, 3)
            oprot.writeDouble(self.tolerance)
            oprot.writeFieldEnd()
        if self.stepSize is not None:
            oprot.writeFieldBegin('stepSize', TType.DOUBLE, 4)
            oprot.writeDouble(self.stepSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StepResult(object):
    """
    Attributes:
     - status
     - simulation_time

    """


    def __init__(self, status=None, simulation_time=None,):
        self.status = status
        self.simulation_time = simulation_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.simulation_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StepResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.simulation_time is not None:
            oprot.writeFieldBegin('simulation_time', TType.DOUBLE, 2)
            oprot.writeDouble(self.simulation_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IntegerRead(object):
    """
    Attributes:
     - value
     - status

    """


    def __init__(self, value=None, status=None,):
        self.value = value
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readI32()
                        self.value.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IntegerRead')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.value))
            for iter41 in self.value:
                oprot.writeI32(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RealRead(object):
    """
    Attributes:
     - value
     - status

    """


    def __init__(self, value=None, status=None,):
        self.value = value
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readDouble()
                        self.value.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealRead')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.value))
            for iter48 in self.value:
                oprot.writeDouble(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StringRead(object):
    """
    Attributes:
     - value
     - status

    """


    def __init__(self, value=None, status=None,):
        self.value = value
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.value.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StringRead')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.value))
            for iter55 in self.value:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BooleanRead(object):
    """
    Attributes:
     - value
     - status

    """


    def __init__(self, value=None, status=None,):
        self.value = value
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.value = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readBool()
                        self.value.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BooleanRead')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.LIST, 1)
            oprot.writeListBegin(TType.BOOL, len(self.value))
            for iter62 in self.value:
                oprot.writeBool(iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ModelDescription(object):
    """
    Attributes:
     - guid
     - fmi_version
     - modelName
     - license
     - copyright
     - author
     - version
     - description
     - generation_tool
     - generation_date_and_time
     - default_experiment
     - variable_naming_convention
     - model_variables
     - model_structure
     - model_identifier
     - can_get_and_set_fmu_state
     - can_serialize_fmu_state
     - provides_directional_derivative
     - can_handle_variable_communication_step_size
     - can_interpolate_inputs
     - max_output_derivative_order

    """


    def __init__(self, guid=None, fmi_version=None, modelName=None, license=None, copyright=None, author=None, version=None, description=None, generation_tool=None, generation_date_and_time=None, default_experiment=None, variable_naming_convention=None, model_variables=None, model_structure=None, model_identifier=None, can_get_and_set_fmu_state=None, can_serialize_fmu_state=None, provides_directional_derivative=None, can_handle_variable_communication_step_size=None, can_interpolate_inputs=None, max_output_derivative_order=None,):
        self.guid = guid
        self.fmi_version = fmi_version
        self.modelName = modelName
        self.license = license
        self.copyright = copyright
        self.author = author
        self.version = version
        self.description = description
        self.generation_tool = generation_tool
        self.generation_date_and_time = generation_date_and_time
        self.default_experiment = default_experiment
        self.variable_naming_convention = variable_naming_convention
        self.model_variables = model_variables
        self.model_structure = model_structure
        self.model_identifier = model_identifier
        self.can_get_and_set_fmu_state = can_get_and_set_fmu_state
        self.can_serialize_fmu_state = can_serialize_fmu_state
        self.provides_directional_derivative = provides_directional_derivative
        self.can_handle_variable_communication_step_size = can_handle_variable_communication_step_size
        self.can_interpolate_inputs = can_interpolate_inputs
        self.max_output_derivative_order = max_output_derivative_order

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fmi_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.modelName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.license = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.copyright = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.author = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.generation_tool = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.generation_date_and_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.default_experiment = DefaultExperiment()
                    self.default_experiment.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.variable_naming_convention = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.model_variables = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = ScalarVariable()
                        _elem68.read(iprot)
                        self.model_variables.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.model_structure = ModelStructure()
                    self.model_structure.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.model_identifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.can_get_and_set_fmu_state = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.can_serialize_fmu_state = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.provides_directional_derivative = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.can_handle_variable_communication_step_size = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.can_interpolate_inputs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.max_output_derivative_order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ModelDescription')
        if self.guid is not None:
            oprot.writeFieldBegin('guid', TType.STRING, 1)
            oprot.writeString(self.guid.encode('utf-8') if sys.version_info[0] == 2 else self.guid)
            oprot.writeFieldEnd()
        if self.fmi_version is not None:
            oprot.writeFieldBegin('fmi_version', TType.STRING, 2)
            oprot.writeString(self.fmi_version.encode('utf-8') if sys.version_info[0] == 2 else self.fmi_version)
            oprot.writeFieldEnd()
        if self.modelName is not None:
            oprot.writeFieldBegin('modelName', TType.STRING, 3)
            oprot.writeString(self.modelName.encode('utf-8') if sys.version_info[0] == 2 else self.modelName)
            oprot.writeFieldEnd()
        if self.license is not None:
            oprot.writeFieldBegin('license', TType.STRING, 4)
            oprot.writeString(self.license.encode('utf-8') if sys.version_info[0] == 2 else self.license)
            oprot.writeFieldEnd()
        if self.copyright is not None:
            oprot.writeFieldBegin('copyright', TType.STRING, 5)
            oprot.writeString(self.copyright.encode('utf-8') if sys.version_info[0] == 2 else self.copyright)
            oprot.writeFieldEnd()
        if self.author is not None:
            oprot.writeFieldBegin('author', TType.STRING, 6)
            oprot.writeString(self.author.encode('utf-8') if sys.version_info[0] == 2 else self.author)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 7)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 8)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.generation_tool is not None:
            oprot.writeFieldBegin('generation_tool', TType.STRING, 9)
            oprot.writeString(self.generation_tool.encode('utf-8') if sys.version_info[0] == 2 else self.generation_tool)
            oprot.writeFieldEnd()
        if self.generation_date_and_time is not None:
            oprot.writeFieldBegin('generation_date_and_time', TType.STRING, 10)
            oprot.writeString(self.generation_date_and_time.encode('utf-8') if sys.version_info[0] == 2 else self.generation_date_and_time)
            oprot.writeFieldEnd()
        if self.default_experiment is not None:
            oprot.writeFieldBegin('default_experiment', TType.STRUCT, 11)
            self.default_experiment.write(oprot)
            oprot.writeFieldEnd()
        if self.variable_naming_convention is not None:
            oprot.writeFieldBegin('variable_naming_convention', TType.STRING, 12)
            oprot.writeString(self.variable_naming_convention.encode('utf-8') if sys.version_info[0] == 2 else self.variable_naming_convention)
            oprot.writeFieldEnd()
        if self.model_variables is not None:
            oprot.writeFieldBegin('model_variables', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.model_variables))
            for iter69 in self.model_variables:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.model_structure is not None:
            oprot.writeFieldBegin('model_structure', TType.STRUCT, 14)
            self.model_structure.write(oprot)
            oprot.writeFieldEnd()
        if self.model_identifier is not None:
            oprot.writeFieldBegin('model_identifier', TType.STRING, 15)
            oprot.writeString(self.model_identifier.encode('utf-8') if sys.version_info[0] == 2 else self.model_identifier)
            oprot.writeFieldEnd()
        if self.can_get_and_set_fmu_state is not None:
            oprot.writeFieldBegin('can_get_and_set_fmu_state', TType.BOOL, 16)
            oprot.writeBool(self.can_get_and_set_fmu_state)
            oprot.writeFieldEnd()
        if self.can_serialize_fmu_state is not None:
            oprot.writeFieldBegin('can_serialize_fmu_state', TType.BOOL, 17)
            oprot.writeBool(self.can_serialize_fmu_state)
            oprot.writeFieldEnd()
        if self.provides_directional_derivative is not None:
            oprot.writeFieldBegin('provides_directional_derivative', TType.BOOL, 18)
            oprot.writeBool(self.provides_directional_derivative)
            oprot.writeFieldEnd()
        if self.can_handle_variable_communication_step_size is not None:
            oprot.writeFieldBegin('can_handle_variable_communication_step_size', TType.BOOL, 19)
            oprot.writeBool(self.can_handle_variable_communication_step_size)
            oprot.writeFieldEnd()
        if self.can_interpolate_inputs is not None:
            oprot.writeFieldBegin('can_interpolate_inputs', TType.BOOL, 20)
            oprot.writeBool(self.can_interpolate_inputs)
            oprot.writeFieldEnd()
        if self.max_output_derivative_order is not None:
            oprot.writeFieldBegin('max_output_derivative_order', TType.I32, 21)
            oprot.writeI32(self.max_output_derivative_order)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NoSuchFmuException(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NoSuchFmuException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NoSuchInstanceException(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NoSuchInstanceException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NoSuchVariableException(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NoSuchVariableException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnsupportedOperationException(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UnsupportedOperationException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DirectionalDerivativeResult(object):
    """
    Attributes:
     - dv_unknown_ref
     - status

    """


    def __init__(self, dv_unknown_ref=None, status=None,):
        self.dv_unknown_ref = dv_unknown_ref
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.dv_unknown_ref = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readDouble()
                        self.dv_unknown_ref.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DirectionalDerivativeResult')
        if self.dv_unknown_ref is not None:
            oprot.writeFieldBegin('dv_unknown_ref', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.dv_unknown_ref))
            for iter76 in self.dv_unknown_ref:
                oprot.writeDouble(iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(IntegerAttribute)
IntegerAttribute.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'min', None, None, ),  # 1
    (2, TType.I32, 'max', None, None, ),  # 2
    (3, TType.I32, 'start', None, None, ),  # 3
    (4, TType.STRING, 'quantity', 'UTF8', None, ),  # 4
)
all_structs.append(RealAttribute)
RealAttribute.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'min', None, None, ),  # 1
    (2, TType.DOUBLE, 'max', None, None, ),  # 2
    (3, TType.DOUBLE, 'start', None, None, ),  # 3
    (4, TType.STRING, 'quantity', 'UTF8', None, ),  # 4
)
all_structs.append(StringAttribute)
StringAttribute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'start', 'UTF8', None, ),  # 1
)
all_structs.append(BooleanAttribute)
BooleanAttribute.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'start', None, None, ),  # 1
)
all_structs.append(EnumerationAttribute)
EnumerationAttribute.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'min', None, None, ),  # 1
    (2, TType.I32, 'max', None, None, ),  # 2
    (3, TType.I32, 'start', None, None, ),  # 3
    (4, TType.STRING, 'quantity', 'UTF8', None, ),  # 4
)
all_structs.append(ScalarVariableAttribute)
ScalarVariableAttribute.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'integer_attribute', [IntegerAttribute, None], None, ),  # 1
    (2, TType.STRUCT, 'real_attribute', [RealAttribute, None], None, ),  # 2
    (3, TType.STRUCT, 'string_attribute', [StringAttribute, None], None, ),  # 3
    (4, TType.STRUCT, 'boolean_attribute', [BooleanAttribute, None], None, ),  # 4
    (5, TType.STRUCT, 'enumeration_attribute', [EnumerationAttribute, None], None, ),  # 5
)
all_structs.append(ScalarVariable)
ScalarVariable.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'value_reference', None, None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'initial', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'causality', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'variability', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'attribute', [ScalarVariableAttribute, None], None, ),  # 7
)
all_structs.append(Unknown)
Unknown.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'index', None, None, ),  # 1
    (2, TType.LIST, 'dependencies', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'dependencies_kind', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ModelStructure)
ModelStructure.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'outputs', (TType.STRUCT, [Unknown, None], False), None, ),  # 1
    (2, TType.LIST, 'derivatives', (TType.STRUCT, [Unknown, None], False), None, ),  # 2
    (3, TType.LIST, 'initial_unknowns', (TType.STRUCT, [Unknown, None], False), None, ),  # 3
)
all_structs.append(DefaultExperiment)
DefaultExperiment.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'startTime', None, None, ),  # 1
    (2, TType.DOUBLE, 'stopTime', None, None, ),  # 2
    (3, TType.DOUBLE, 'tolerance', None, None, ),  # 3
    (4, TType.DOUBLE, 'stepSize', None, None, ),  # 4
)
all_structs.append(StepResult)
StepResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.DOUBLE, 'simulation_time', None, None, ),  # 2
)
all_structs.append(IntegerRead)
IntegerRead.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'value', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(RealRead)
RealRead.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'value', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(StringRead)
StringRead.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'value', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(BooleanRead)
BooleanRead.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'value', (TType.BOOL, None, False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(ModelDescription)
ModelDescription.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fmi_version', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'modelName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'license', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'copyright', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'author', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'version', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'description', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'generation_tool', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'generation_date_and_time', 'UTF8', None, ),  # 10
    (11, TType.STRUCT, 'default_experiment', [DefaultExperiment, None], None, ),  # 11
    (12, TType.STRING, 'variable_naming_convention', 'UTF8', None, ),  # 12
    (13, TType.LIST, 'model_variables', (TType.STRUCT, [ScalarVariable, None], False), None, ),  # 13
    (14, TType.STRUCT, 'model_structure', [ModelStructure, None], None, ),  # 14
    (15, TType.STRING, 'model_identifier', 'UTF8', None, ),  # 15
    (16, TType.BOOL, 'can_get_and_set_fmu_state', None, None, ),  # 16
    (17, TType.BOOL, 'can_serialize_fmu_state', None, None, ),  # 17
    (18, TType.BOOL, 'provides_directional_derivative', None, None, ),  # 18
    (19, TType.BOOL, 'can_handle_variable_communication_step_size', None, None, ),  # 19
    (20, TType.BOOL, 'can_interpolate_inputs', None, None, ),  # 20
    (21, TType.I32, 'max_output_derivative_order', None, None, ),  # 21
)
all_structs.append(NoSuchFmuException)
NoSuchFmuException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(NoSuchInstanceException)
NoSuchInstanceException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(NoSuchVariableException)
NoSuchVariableException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(UnsupportedOperationException)
UnsupportedOperationException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(DirectionalDerivativeResult)
DirectionalDerivativeResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'dv_unknown_ref', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs

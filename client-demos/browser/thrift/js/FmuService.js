//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

FmuService_loadFromUrl_args = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
FmuService_loadFromUrl_args.prototype = {};
FmuService_loadFromUrl_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_loadFromUrl_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_loadFromUrl_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_loadFromUrl_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
FmuService_loadFromUrl_result.prototype = {};
FmuService_loadFromUrl_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_loadFromUrl_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_loadFromUrl_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_loadFromFile_args = function(args) {
  this.name = null;
  this.data = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
FmuService_loadFromFile_args.prototype = {};
FmuService_loadFromFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_loadFromFile_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_loadFromFile_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_loadFromFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
FmuService_loadFromFile_result.prototype = {};
FmuService_loadFromFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_loadFromFile_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_loadFromFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getModelDescription_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_getModelDescription_args.prototype = {};
FmuService_getModelDescription_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescription_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescription_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getModelDescription_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ModelDescription(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_getModelDescription_result.prototype = {};
FmuService_getModelDescription_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ModelDescription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescription_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescription_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_getCoSimulationAttributes_args.prototype = {};
FmuService_getCoSimulationAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getCoSimulationAttributes_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CoSimulationAttributes(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_getCoSimulationAttributes_result.prototype = {};
FmuService_getCoSimulationAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CoSimulationAttributes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getCoSimulationAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_canCreateInstanceFromCS_args.prototype = {};
FmuService_canCreateInstanceFromCS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromCS_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_canCreateInstanceFromCS_result.prototype = {};
FmuService_canCreateInstanceFromCS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromCS_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_canCreateInstanceFromME_args.prototype = {};
FmuService_canCreateInstanceFromME_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromME_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_canCreateInstanceFromME_result.prototype = {};
FmuService_canCreateInstanceFromME_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromME_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromCS_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_createInstanceFromCS_args.prototype = {};
FmuService_createInstanceFromCS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromCS_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromCS_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromCS_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof UnsupportedOperationException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchFmuException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_createInstanceFromCS_result.prototype = {};
FmuService_createInstanceFromCS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new UnsupportedOperationException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchFmuException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromCS_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromCS_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromME_args = function(args) {
  this.fmuId = null;
  this.solver = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
    if (args.solver !== undefined && args.solver !== null) {
      this.solver = new Solver(args.solver);
    }
  }
};
FmuService_createInstanceFromME_args.prototype = {};
FmuService_createInstanceFromME_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.solver = new Solver();
        this.solver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromME_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromME_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  if (this.solver !== null && this.solver !== undefined) {
    output.writeFieldBegin('solver', Thrift.Type.STRUCT, 2);
    this.solver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromME_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof UnsupportedOperationException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchFmuException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_createInstanceFromME_result.prototype = {};
FmuService_createInstanceFromME_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new UnsupportedOperationException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchFmuException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromME_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromME_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setupExperiment_args = function(args) {
  this.instanceId = null;
  this.start = null;
  this.stop = null;
  this.tolerance = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.stop !== undefined && args.stop !== null) {
      this.stop = args.stop;
    }
    if (args.tolerance !== undefined && args.tolerance !== null) {
      this.tolerance = args.tolerance;
    }
  }
};
FmuService_setupExperiment_args.prototype = {};
FmuService_setupExperiment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.start = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stop = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tolerance = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setupExperiment_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setupExperiment_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.start);
    output.writeFieldEnd();
  }
  if (this.stop !== null && this.stop !== undefined) {
    output.writeFieldBegin('stop', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.stop);
    output.writeFieldEnd();
  }
  if (this.tolerance !== null && this.tolerance !== undefined) {
    output.writeFieldBegin('tolerance', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.tolerance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setupExperiment_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_setupExperiment_result.prototype = {};
FmuService_setupExperiment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setupExperiment_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setupExperiment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_enterInitializationMode_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_enterInitializationMode_args.prototype = {};
FmuService_enterInitializationMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_enterInitializationMode_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_enterInitializationMode_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_enterInitializationMode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_enterInitializationMode_result.prototype = {};
FmuService_enterInitializationMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_enterInitializationMode_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_enterInitializationMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_exitInitializationMode_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_exitInitializationMode_args.prototype = {};
FmuService_exitInitializationMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_exitInitializationMode_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_exitInitializationMode_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_exitInitializationMode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_exitInitializationMode_result.prototype = {};
FmuService_exitInitializationMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_exitInitializationMode_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_exitInitializationMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_args = function(args) {
  this.instanceId = null;
  this.stepSize = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.stepSize !== undefined && args.stepSize !== null) {
      this.stepSize = args.stepSize;
    }
  }
};
FmuService_step_args.prototype = {};
FmuService_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stepSize = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.stepSize !== null && this.stepSize !== undefined) {
    output.writeFieldBegin('stepSize', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.stepSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StepResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_step_result.prototype = {};
FmuService_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_reset_args.prototype = {};
FmuService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_reset_result.prototype = {};
FmuService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_terminate_args.prototype = {};
FmuService_terminate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_terminate_result.prototype = {};
FmuService_terminate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readInteger_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readInteger_args.prototype = {};
FmuService_readInteger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = input.readI64().value;
          this.vr.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readInteger_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readInteger_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter59 in this.vr) {
      if (this.vr.hasOwnProperty(iter59)) {
        iter59 = this.vr[iter59];
        output.writeI64(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readInteger_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new IntegerRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readInteger_result.prototype = {};
FmuService_readInteger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new IntegerRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readInteger_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readInteger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readReal_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readReal_args.prototype = {};
FmuService_readReal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readI64().value;
          this.vr.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readReal_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readReal_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter64 in this.vr) {
      if (this.vr.hasOwnProperty(iter64)) {
        iter64 = this.vr[iter64];
        output.writeI64(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readReal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RealRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readReal_result.prototype = {};
FmuService_readReal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RealRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readReal_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readReal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readString_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readString_args.prototype = {};
FmuService_readString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = input.readI64().value;
          this.vr.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readString_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readString_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter69 in this.vr) {
      if (this.vr.hasOwnProperty(iter69)) {
        iter69 = this.vr[iter69];
        output.writeI64(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readString_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StringRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readString_result.prototype = {};
FmuService_readString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StringRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readString_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readBoolean_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readBoolean_args.prototype = {};
FmuService_readBoolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp371 = input.readListBegin();
        var _size70 = _rtmp371.size || 0;
        for (var _i72 = 0; _i72 < _size70; ++_i72) {
          var elem73 = null;
          elem73 = input.readI64().value;
          this.vr.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readBoolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readBoolean_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter74 in this.vr) {
      if (this.vr.hasOwnProperty(iter74)) {
        iter74 = this.vr[iter74];
        output.writeI64(iter74);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readBoolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BooleanRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readBoolean_result.prototype = {};
FmuService_readBoolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BooleanRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readBoolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readBoolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeInteger_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeInteger_args.prototype = {};
FmuService_writeInteger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = input.readI64().value;
          this.vr.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp380 = input.readListBegin();
        var _size79 = _rtmp380.size || 0;
        for (var _i81 = 0; _i81 < _size79; ++_i81) {
          var elem82 = null;
          elem82 = input.readI32().value;
          this.value.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeInteger_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeInteger_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter83 in this.vr) {
      if (this.vr.hasOwnProperty(iter83)) {
        iter83 = this.vr[iter83];
        output.writeI64(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.value.length);
    for (var iter84 in this.value) {
      if (this.value.hasOwnProperty(iter84)) {
        iter84 = this.value[iter84];
        output.writeI32(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeInteger_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeInteger_result.prototype = {};
FmuService_writeInteger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeInteger_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeInteger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeReal_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeReal_args.prototype = {};
FmuService_writeReal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = input.readI64().value;
          this.vr.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp390 = input.readListBegin();
        var _size89 = _rtmp390.size || 0;
        for (var _i91 = 0; _i91 < _size89; ++_i91) {
          var elem92 = null;
          elem92 = input.readDouble().value;
          this.value.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeReal_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeReal_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter93 in this.vr) {
      if (this.vr.hasOwnProperty(iter93)) {
        iter93 = this.vr[iter93];
        output.writeI64(iter93);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.value.length);
    for (var iter94 in this.value) {
      if (this.value.hasOwnProperty(iter94)) {
        iter94 = this.value[iter94];
        output.writeDouble(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeReal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeReal_result.prototype = {};
FmuService_writeReal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeReal_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeReal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeString_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeString_args.prototype = {};
FmuService_writeString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = input.readI64().value;
          this.vr.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp3100 = input.readListBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          var elem102 = null;
          elem102 = input.readString().value;
          this.value.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeString_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeString_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter103 in this.vr) {
      if (this.vr.hasOwnProperty(iter103)) {
        iter103 = this.vr[iter103];
        output.writeI64(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.value.length);
    for (var iter104 in this.value) {
      if (this.value.hasOwnProperty(iter104)) {
        iter104 = this.value[iter104];
        output.writeString(iter104);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeString_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeString_result.prototype = {};
FmuService_writeString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeString_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeBoolean_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeBoolean_args.prototype = {};
FmuService_writeBoolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp3106 = input.readListBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var elem108 = null;
          elem108 = input.readI64().value;
          this.vr.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp3110 = input.readListBegin();
        var _size109 = _rtmp3110.size || 0;
        for (var _i111 = 0; _i111 < _size109; ++_i111) {
          var elem112 = null;
          elem112 = input.readBool().value;
          this.value.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeBoolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeBoolean_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter113 in this.vr) {
      if (this.vr.hasOwnProperty(iter113)) {
        iter113 = this.vr[iter113];
        output.writeI64(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.BOOL, this.value.length);
    for (var iter114 in this.value) {
      if (this.value.hasOwnProperty(iter114)) {
        iter114 = this.value[iter114];
        output.writeBool(iter114);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeBoolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeBoolean_result.prototype = {};
FmuService_writeBoolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeBoolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeBoolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getFMUstate_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_getFMUstate_args.prototype = {};
FmuService_getFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GetFmuStateResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_getFMUstate_result.prototype = {};
FmuService_getFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetFmuStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_setFMUstate_args.prototype = {};
FmuService_setFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 2);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_setFMUstate_result.prototype = {};
FmuService_setFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_freeFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_freeFMUstate_args.prototype = {};
FmuService_freeFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_freeFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_freeFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 2);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_freeFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_freeFMUstate_result.prototype = {};
FmuService_freeFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_freeFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_freeFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_serializeFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_serializeFMUstate_args.prototype = {};
FmuService_serializeFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_serializeFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_serializeFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 2);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_serializeFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SerializeFmuStateResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_serializeFMUstate_result.prototype = {};
FmuService_serializeFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SerializeFmuStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_serializeFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_serializeFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_deSerializeFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_deSerializeFMUstate_args.prototype = {};
FmuService_deSerializeFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_deSerializeFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_deSerializeFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 2);
    output.writeBinary(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_deSerializeFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeSerializeFmuStateResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_deSerializeFMUstate_result.prototype = {};
FmuService_deSerializeFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeSerializeFmuStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_deSerializeFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_deSerializeFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getDirectionalDerivative_args = function(args) {
  this.instanceId = null;
  this.vUnknownRef = null;
  this.vKnownRef = null;
  this.dvKnownRef = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vUnknownRef !== undefined && args.vUnknownRef !== null) {
      this.vUnknownRef = Thrift.copyList(args.vUnknownRef, [null]);
    }
    if (args.vKnownRef !== undefined && args.vKnownRef !== null) {
      this.vKnownRef = Thrift.copyList(args.vKnownRef, [null]);
    }
    if (args.dvKnownRef !== undefined && args.dvKnownRef !== null) {
      this.dvKnownRef = Thrift.copyList(args.dvKnownRef, [null]);
    }
  }
};
FmuService_getDirectionalDerivative_args.prototype = {};
FmuService_getDirectionalDerivative_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vUnknownRef = [];
        var _rtmp3116 = input.readListBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = input.readI64().value;
          this.vUnknownRef.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.vKnownRef = [];
        var _rtmp3120 = input.readListBegin();
        var _size119 = _rtmp3120.size || 0;
        for (var _i121 = 0; _i121 < _size119; ++_i121) {
          var elem122 = null;
          elem122 = input.readI64().value;
          this.vKnownRef.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.dvKnownRef = [];
        var _rtmp3124 = input.readListBegin();
        var _size123 = _rtmp3124.size || 0;
        for (var _i125 = 0; _i125 < _size123; ++_i125) {
          var elem126 = null;
          elem126 = input.readDouble().value;
          this.dvKnownRef.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getDirectionalDerivative_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getDirectionalDerivative_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vUnknownRef !== null && this.vUnknownRef !== undefined) {
    output.writeFieldBegin('vUnknownRef', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vUnknownRef.length);
    for (var iter127 in this.vUnknownRef) {
      if (this.vUnknownRef.hasOwnProperty(iter127)) {
        iter127 = this.vUnknownRef[iter127];
        output.writeI64(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vKnownRef !== null && this.vKnownRef !== undefined) {
    output.writeFieldBegin('vKnownRef', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.vKnownRef.length);
    for (var iter128 in this.vKnownRef) {
      if (this.vKnownRef.hasOwnProperty(iter128)) {
        iter128 = this.vKnownRef[iter128];
        output.writeI64(iter128);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dvKnownRef !== null && this.dvKnownRef !== undefined) {
    output.writeFieldBegin('dvKnownRef', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.DOUBLE, this.dvKnownRef.length);
    for (var iter129 in this.dvKnownRef) {
      if (this.dvKnownRef.hasOwnProperty(iter129)) {
        iter129 = this.dvKnownRef[iter129];
        output.writeDouble(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getDirectionalDerivative_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DirectionalDerivativeResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_getDirectionalDerivative_result.prototype = {};
FmuService_getDirectionalDerivative_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DirectionalDerivativeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getDirectionalDerivative_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getDirectionalDerivative_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
FmuServiceClient.prototype = {};

FmuServiceClient.prototype.loadFromUrl = function(url, callback) {
  this.send_loadFromUrl(url, callback); 
  if (!callback) {
    return this.recv_loadFromUrl();
  }
};

FmuServiceClient.prototype.send_loadFromUrl = function(url, callback) {
  var params = {
    url: url
  };
  var args = new FmuService_loadFromUrl_args(params);
  try {
    this.output.writeMessageBegin('loadFromUrl', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_loadFromUrl();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_loadFromUrl = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_loadFromUrl_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'loadFromUrl failed: unknown result';
};

FmuServiceClient.prototype.loadFromFile = function(name, data, callback) {
  this.send_loadFromFile(name, data, callback); 
  if (!callback) {
    return this.recv_loadFromFile();
  }
};

FmuServiceClient.prototype.send_loadFromFile = function(name, data, callback) {
  var params = {
    name: name,
    data: data
  };
  var args = new FmuService_loadFromFile_args(params);
  try {
    this.output.writeMessageBegin('loadFromFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_loadFromFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_loadFromFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_loadFromFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'loadFromFile failed: unknown result';
};

FmuServiceClient.prototype.getModelDescription = function(fmuId, callback) {
  this.send_getModelDescription(fmuId, callback); 
  if (!callback) {
    return this.recv_getModelDescription();
  }
};

FmuServiceClient.prototype.send_getModelDescription = function(fmuId, callback) {
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_getModelDescription_args(params);
  try {
    this.output.writeMessageBegin('getModelDescription', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getModelDescription();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_getModelDescription = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getModelDescription_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getModelDescription failed: unknown result';
};

FmuServiceClient.prototype.getCoSimulationAttributes = function(instanceId, callback) {
  this.send_getCoSimulationAttributes(instanceId, callback); 
  if (!callback) {
    return this.recv_getCoSimulationAttributes();
  }
};

FmuServiceClient.prototype.send_getCoSimulationAttributes = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_getCoSimulationAttributes_args(params);
  try {
    this.output.writeMessageBegin('getCoSimulationAttributes', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCoSimulationAttributes();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_getCoSimulationAttributes = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getCoSimulationAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCoSimulationAttributes failed: unknown result';
};

FmuServiceClient.prototype.canCreateInstanceFromCS = function(fmuId, callback) {
  this.send_canCreateInstanceFromCS(fmuId, callback); 
  if (!callback) {
    return this.recv_canCreateInstanceFromCS();
  }
};

FmuServiceClient.prototype.send_canCreateInstanceFromCS = function(fmuId, callback) {
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_canCreateInstanceFromCS_args(params);
  try {
    this.output.writeMessageBegin('canCreateInstanceFromCS', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canCreateInstanceFromCS();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_canCreateInstanceFromCS = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_canCreateInstanceFromCS_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'canCreateInstanceFromCS failed: unknown result';
};

FmuServiceClient.prototype.canCreateInstanceFromME = function(fmuId, callback) {
  this.send_canCreateInstanceFromME(fmuId, callback); 
  if (!callback) {
    return this.recv_canCreateInstanceFromME();
  }
};

FmuServiceClient.prototype.send_canCreateInstanceFromME = function(fmuId, callback) {
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_canCreateInstanceFromME_args(params);
  try {
    this.output.writeMessageBegin('canCreateInstanceFromME', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canCreateInstanceFromME();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_canCreateInstanceFromME = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_canCreateInstanceFromME_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'canCreateInstanceFromME failed: unknown result';
};

FmuServiceClient.prototype.createInstanceFromCS = function(fmuId, callback) {
  this.send_createInstanceFromCS(fmuId, callback); 
  if (!callback) {
    return this.recv_createInstanceFromCS();
  }
};

FmuServiceClient.prototype.send_createInstanceFromCS = function(fmuId, callback) {
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_createInstanceFromCS_args(params);
  try {
    this.output.writeMessageBegin('createInstanceFromCS', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_createInstanceFromCS();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_createInstanceFromCS = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_createInstanceFromCS_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createInstanceFromCS failed: unknown result';
};

FmuServiceClient.prototype.createInstanceFromME = function(fmuId, solver, callback) {
  this.send_createInstanceFromME(fmuId, solver, callback); 
  if (!callback) {
    return this.recv_createInstanceFromME();
  }
};

FmuServiceClient.prototype.send_createInstanceFromME = function(fmuId, solver, callback) {
  var params = {
    fmuId: fmuId,
    solver: solver
  };
  var args = new FmuService_createInstanceFromME_args(params);
  try {
    this.output.writeMessageBegin('createInstanceFromME', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_createInstanceFromME();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_createInstanceFromME = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_createInstanceFromME_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createInstanceFromME failed: unknown result';
};

FmuServiceClient.prototype.setupExperiment = function(instanceId, start, stop, tolerance, callback) {
  this.send_setupExperiment(instanceId, start, stop, tolerance, callback); 
  if (!callback) {
    return this.recv_setupExperiment();
  }
};

FmuServiceClient.prototype.send_setupExperiment = function(instanceId, start, stop, tolerance, callback) {
  var params = {
    instanceId: instanceId,
    start: start,
    stop: stop,
    tolerance: tolerance
  };
  var args = new FmuService_setupExperiment_args(params);
  try {
    this.output.writeMessageBegin('setupExperiment', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setupExperiment();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_setupExperiment = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_setupExperiment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setupExperiment failed: unknown result';
};

FmuServiceClient.prototype.enterInitializationMode = function(instanceId, callback) {
  this.send_enterInitializationMode(instanceId, callback); 
  if (!callback) {
    return this.recv_enterInitializationMode();
  }
};

FmuServiceClient.prototype.send_enterInitializationMode = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_enterInitializationMode_args(params);
  try {
    this.output.writeMessageBegin('enterInitializationMode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_enterInitializationMode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_enterInitializationMode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_enterInitializationMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'enterInitializationMode failed: unknown result';
};

FmuServiceClient.prototype.exitInitializationMode = function(instanceId, callback) {
  this.send_exitInitializationMode(instanceId, callback); 
  if (!callback) {
    return this.recv_exitInitializationMode();
  }
};

FmuServiceClient.prototype.send_exitInitializationMode = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_exitInitializationMode_args(params);
  try {
    this.output.writeMessageBegin('exitInitializationMode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_exitInitializationMode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_exitInitializationMode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_exitInitializationMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'exitInitializationMode failed: unknown result';
};

FmuServiceClient.prototype.step = function(instanceId, stepSize, callback) {
  this.send_step(instanceId, stepSize, callback); 
  if (!callback) {
    return this.recv_step();
  }
};

FmuServiceClient.prototype.send_step = function(instanceId, stepSize, callback) {
  var params = {
    instanceId: instanceId,
    stepSize: stepSize
  };
  var args = new FmuService_step_args(params);
  try {
    this.output.writeMessageBegin('step', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_step();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_step = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'step failed: unknown result';
};

FmuServiceClient.prototype.reset = function(instanceId, callback) {
  this.send_reset(instanceId, callback); 
  if (!callback) {
    return this.recv_reset();
  }
};

FmuServiceClient.prototype.send_reset = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_reset_args(params);
  try {
    this.output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_reset();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_reset = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_reset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reset failed: unknown result';
};

FmuServiceClient.prototype.terminate = function(instanceId, callback) {
  this.send_terminate(instanceId, callback); 
  if (!callback) {
    return this.recv_terminate();
  }
};

FmuServiceClient.prototype.send_terminate = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_terminate_args(params);
  try {
    this.output.writeMessageBegin('terminate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_terminate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_terminate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_terminate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terminate failed: unknown result';
};

FmuServiceClient.prototype.readInteger = function(instanceId, vr, callback) {
  this.send_readInteger(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readInteger();
  }
};

FmuServiceClient.prototype.send_readInteger = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readInteger_args(params);
  try {
    this.output.writeMessageBegin('readInteger', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_readInteger();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_readInteger = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readInteger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readInteger failed: unknown result';
};

FmuServiceClient.prototype.readReal = function(instanceId, vr, callback) {
  this.send_readReal(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readReal();
  }
};

FmuServiceClient.prototype.send_readReal = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readReal_args(params);
  try {
    this.output.writeMessageBegin('readReal', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_readReal();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_readReal = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readReal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readReal failed: unknown result';
};

FmuServiceClient.prototype.readString = function(instanceId, vr, callback) {
  this.send_readString(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readString();
  }
};

FmuServiceClient.prototype.send_readString = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readString_args(params);
  try {
    this.output.writeMessageBegin('readString', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_readString();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_readString = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readString failed: unknown result';
};

FmuServiceClient.prototype.readBoolean = function(instanceId, vr, callback) {
  this.send_readBoolean(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readBoolean();
  }
};

FmuServiceClient.prototype.send_readBoolean = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readBoolean_args(params);
  try {
    this.output.writeMessageBegin('readBoolean', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_readBoolean();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_readBoolean = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readBoolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readBoolean failed: unknown result';
};

FmuServiceClient.prototype.writeInteger = function(instanceId, vr, value, callback) {
  this.send_writeInteger(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeInteger();
  }
};

FmuServiceClient.prototype.send_writeInteger = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeInteger_args(params);
  try {
    this.output.writeMessageBegin('writeInteger', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_writeInteger();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_writeInteger = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeInteger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeInteger failed: unknown result';
};

FmuServiceClient.prototype.writeReal = function(instanceId, vr, value, callback) {
  this.send_writeReal(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeReal();
  }
};

FmuServiceClient.prototype.send_writeReal = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeReal_args(params);
  try {
    this.output.writeMessageBegin('writeReal', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_writeReal();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_writeReal = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeReal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeReal failed: unknown result';
};

FmuServiceClient.prototype.writeString = function(instanceId, vr, value, callback) {
  this.send_writeString(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeString();
  }
};

FmuServiceClient.prototype.send_writeString = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeString_args(params);
  try {
    this.output.writeMessageBegin('writeString', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_writeString();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_writeString = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeString failed: unknown result';
};

FmuServiceClient.prototype.writeBoolean = function(instanceId, vr, value, callback) {
  this.send_writeBoolean(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeBoolean();
  }
};

FmuServiceClient.prototype.send_writeBoolean = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeBoolean_args(params);
  try {
    this.output.writeMessageBegin('writeBoolean', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_writeBoolean();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_writeBoolean = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeBoolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeBoolean failed: unknown result';
};

FmuServiceClient.prototype.getFMUstate = function(instanceId, callback) {
  this.send_getFMUstate(instanceId, callback); 
  if (!callback) {
    return this.recv_getFMUstate();
  }
};

FmuServiceClient.prototype.send_getFMUstate = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_getFMUstate_args(params);
  try {
    this.output.writeMessageBegin('getFMUstate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFMUstate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_getFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFMUstate failed: unknown result';
};

FmuServiceClient.prototype.setFMUstate = function(instanceId, state, callback) {
  this.send_setFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_setFMUstate();
  }
};

FmuServiceClient.prototype.send_setFMUstate = function(instanceId, state, callback) {
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_setFMUstate_args(params);
  try {
    this.output.writeMessageBegin('setFMUstate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setFMUstate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_setFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_setFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setFMUstate failed: unknown result';
};

FmuServiceClient.prototype.freeFMUstate = function(instanceId, state, callback) {
  this.send_freeFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_freeFMUstate();
  }
};

FmuServiceClient.prototype.send_freeFMUstate = function(instanceId, state, callback) {
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_freeFMUstate_args(params);
  try {
    this.output.writeMessageBegin('freeFMUstate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_freeFMUstate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_freeFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_freeFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'freeFMUstate failed: unknown result';
};

FmuServiceClient.prototype.serializeFMUstate = function(instanceId, state, callback) {
  this.send_serializeFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_serializeFMUstate();
  }
};

FmuServiceClient.prototype.send_serializeFMUstate = function(instanceId, state, callback) {
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_serializeFMUstate_args(params);
  try {
    this.output.writeMessageBegin('serializeFMUstate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_serializeFMUstate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_serializeFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_serializeFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'serializeFMUstate failed: unknown result';
};

FmuServiceClient.prototype.deSerializeFMUstate = function(instanceId, state, callback) {
  this.send_deSerializeFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_deSerializeFMUstate();
  }
};

FmuServiceClient.prototype.send_deSerializeFMUstate = function(instanceId, state, callback) {
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_deSerializeFMUstate_args(params);
  try {
    this.output.writeMessageBegin('deSerializeFMUstate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_deSerializeFMUstate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_deSerializeFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_deSerializeFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deSerializeFMUstate failed: unknown result';
};

FmuServiceClient.prototype.getDirectionalDerivative = function(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback) {
  this.send_getDirectionalDerivative(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback); 
  if (!callback) {
    return this.recv_getDirectionalDerivative();
  }
};

FmuServiceClient.prototype.send_getDirectionalDerivative = function(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback) {
  var params = {
    instanceId: instanceId,
    vUnknownRef: vUnknownRef,
    vKnownRef: vKnownRef,
    dvKnownRef: dvKnownRef
  };
  var args = new FmuService_getDirectionalDerivative_args(params);
  try {
    this.output.writeMessageBegin('getDirectionalDerivative', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDirectionalDerivative();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_getDirectionalDerivative = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getDirectionalDerivative_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDirectionalDerivative failed: unknown result';
};

//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

FmuService_getModelDescription_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_getModelDescription_args.prototype = {};
FmuService_getModelDescription_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescription_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescription_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getModelDescription_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ModelDescription(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_getModelDescription_result.prototype = {};
FmuService_getModelDescription_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ModelDescription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescription_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescription_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_getCoSimulationAttributes_args.prototype = {};
FmuService_getCoSimulationAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getCoSimulationAttributes_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CoSimulationAttributes(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_getCoSimulationAttributes_result.prototype = {};
FmuService_getCoSimulationAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CoSimulationAttributes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getCoSimulationAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getCoSimulationAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_canCreateInstanceFromCS_args.prototype = {};
FmuService_canCreateInstanceFromCS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromCS_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_canCreateInstanceFromCS_result.prototype = {};
FmuService_canCreateInstanceFromCS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromCS_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromCS_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_canCreateInstanceFromME_args.prototype = {};
FmuService_canCreateInstanceFromME_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromME_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_canCreateInstanceFromME_result.prototype = {};
FmuService_canCreateInstanceFromME_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_canCreateInstanceFromME_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_canCreateInstanceFromME_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromCS_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_createInstanceFromCS_args.prototype = {};
FmuService_createInstanceFromCS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromCS_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromCS_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromCS_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof UnsupportedOperationException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchFmuException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_createInstanceFromCS_result.prototype = {};
FmuService_createInstanceFromCS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new UnsupportedOperationException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchFmuException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromCS_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromCS_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromME_args = function(args) {
  this.fmuId = null;
  this.solver = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
    if (args.solver !== undefined && args.solver !== null) {
      this.solver = new Solver(args.solver);
    }
  }
};
FmuService_createInstanceFromME_args.prototype = {};
FmuService_createInstanceFromME_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.solver = new Solver();
        this.solver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromME_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromME_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  if (this.solver !== null && this.solver !== undefined) {
    output.writeFieldBegin('solver', Thrift.Type.STRUCT, 2);
    this.solver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromME_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof UnsupportedOperationException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchFmuException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_createInstanceFromME_result.prototype = {};
FmuService_createInstanceFromME_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new UnsupportedOperationException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchFmuException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromME_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromME_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setupExperiment_args = function(args) {
  this.instanceId = null;
  this.start = null;
  this.stop = null;
  this.tolerance = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.stop !== undefined && args.stop !== null) {
      this.stop = args.stop;
    }
    if (args.tolerance !== undefined && args.tolerance !== null) {
      this.tolerance = args.tolerance;
    }
  }
};
FmuService_setupExperiment_args.prototype = {};
FmuService_setupExperiment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.start = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stop = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tolerance = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setupExperiment_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setupExperiment_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.start);
    output.writeFieldEnd();
  }
  if (this.stop !== null && this.stop !== undefined) {
    output.writeFieldBegin('stop', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.stop);
    output.writeFieldEnd();
  }
  if (this.tolerance !== null && this.tolerance !== undefined) {
    output.writeFieldBegin('tolerance', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.tolerance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setupExperiment_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_setupExperiment_result.prototype = {};
FmuService_setupExperiment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setupExperiment_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setupExperiment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_enterInitializationMode_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_enterInitializationMode_args.prototype = {};
FmuService_enterInitializationMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_enterInitializationMode_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_enterInitializationMode_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_enterInitializationMode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_enterInitializationMode_result.prototype = {};
FmuService_enterInitializationMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_enterInitializationMode_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_enterInitializationMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_exitInitializationMode_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_exitInitializationMode_args.prototype = {};
FmuService_exitInitializationMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_exitInitializationMode_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_exitInitializationMode_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_exitInitializationMode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_exitInitializationMode_result.prototype = {};
FmuService_exitInitializationMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_exitInitializationMode_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_exitInitializationMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_args = function(args) {
  this.instanceId = null;
  this.stepSize = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.stepSize !== undefined && args.stepSize !== null) {
      this.stepSize = args.stepSize;
    }
  }
};
FmuService_step_args.prototype = {};
FmuService_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stepSize = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.stepSize !== null && this.stepSize !== undefined) {
    output.writeFieldBegin('stepSize', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.stepSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StepResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_step_result.prototype = {};
FmuService_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_reset_args.prototype = {};
FmuService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_reset_result.prototype = {};
FmuService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_terminate_args.prototype = {};
FmuService_terminate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_terminate_result.prototype = {};
FmuService_terminate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readInteger_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readInteger_args.prototype = {};
FmuService_readInteger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.vr = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI64().value;
          this.vr.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readInteger_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readInteger_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter87 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter87))
      {
        iter87 = this.vr[iter87];
        output.writeI64(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readInteger_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new IntegerRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readInteger_result.prototype = {};
FmuService_readInteger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new IntegerRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readInteger_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readInteger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readReal_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readReal_args.prototype = {};
FmuService_readReal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.vr = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readI64().value;
          this.vr.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readReal_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readReal_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter95 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter95))
      {
        iter95 = this.vr[iter95];
        output.writeI64(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readReal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RealRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readReal_result.prototype = {};
FmuService_readReal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RealRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readReal_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readReal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readString_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readString_args.prototype = {};
FmuService_readString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.vr = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readI64().value;
          this.vr.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readString_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readString_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter103 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter103))
      {
        iter103 = this.vr[iter103];
        output.writeI64(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readString_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StringRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readString_result.prototype = {};
FmuService_readString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StringRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readString_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readBoolean_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readBoolean_args.prototype = {};
FmuService_readBoolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.vr = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readI64().value;
          this.vr.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readBoolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readBoolean_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter111 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter111))
      {
        iter111 = this.vr[iter111];
        output.writeI64(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readBoolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BooleanRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readBoolean_result.prototype = {};
FmuService_readBoolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BooleanRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readBoolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readBoolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeInteger_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeInteger_args.prototype = {};
FmuService_writeInteger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.vr = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readI64().value;
          this.vr.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size119 = 0;
        var _rtmp3123;
        this.value = [];
        var _etype122 = 0;
        _rtmp3123 = input.readListBegin();
        _etype122 = _rtmp3123.etype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var elem125 = null;
          elem125 = input.readI32().value;
          this.value.push(elem125);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeInteger_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeInteger_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter126 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter126))
      {
        iter126 = this.vr[iter126];
        output.writeI64(iter126);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.value.length);
    for (var iter127 in this.value)
    {
      if (this.value.hasOwnProperty(iter127))
      {
        iter127 = this.value[iter127];
        output.writeI32(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeInteger_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeInteger_result.prototype = {};
FmuService_writeInteger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeInteger_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeInteger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeReal_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeReal_args.prototype = {};
FmuService_writeReal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.vr = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readI64().value;
          this.vr.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.value = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = input.readDouble().value;
          this.value.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeReal_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeReal_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter142 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter142))
      {
        iter142 = this.vr[iter142];
        output.writeI64(iter142);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.value.length);
    for (var iter143 in this.value)
    {
      if (this.value.hasOwnProperty(iter143))
      {
        iter143 = this.value[iter143];
        output.writeDouble(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeReal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeReal_result.prototype = {};
FmuService_writeReal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeReal_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeReal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeString_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeString_args.prototype = {};
FmuService_writeString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.vr = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readI64().value;
          this.vr.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size151 = 0;
        var _rtmp3155;
        this.value = [];
        var _etype154 = 0;
        _rtmp3155 = input.readListBegin();
        _etype154 = _rtmp3155.etype;
        _size151 = _rtmp3155.size;
        for (var _i156 = 0; _i156 < _size151; ++_i156)
        {
          var elem157 = null;
          elem157 = input.readString().value;
          this.value.push(elem157);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeString_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeString_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter158 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter158))
      {
        iter158 = this.vr[iter158];
        output.writeI64(iter158);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.value.length);
    for (var iter159 in this.value)
    {
      if (this.value.hasOwnProperty(iter159))
      {
        iter159 = this.value[iter159];
        output.writeString(iter159);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeString_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeString_result.prototype = {};
FmuService_writeString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeString_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeBoolean_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeBoolean_args.prototype = {};
FmuService_writeBoolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.vr = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readI64().value;
          this.vr.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size167 = 0;
        var _rtmp3171;
        this.value = [];
        var _etype170 = 0;
        _rtmp3171 = input.readListBegin();
        _etype170 = _rtmp3171.etype;
        _size167 = _rtmp3171.size;
        for (var _i172 = 0; _i172 < _size167; ++_i172)
        {
          var elem173 = null;
          elem173 = input.readBool().value;
          this.value.push(elem173);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeBoolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeBoolean_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter174 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter174))
      {
        iter174 = this.vr[iter174];
        output.writeI64(iter174);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.BOOL, this.value.length);
    for (var iter175 in this.value)
    {
      if (this.value.hasOwnProperty(iter175))
      {
        iter175 = this.value[iter175];
        output.writeBool(iter175);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeBoolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeBoolean_result.prototype = {};
FmuService_writeBoolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeBoolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeBoolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getFMUstate_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_getFMUstate_args.prototype = {};
FmuService_getFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GetFmuStateResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_getFMUstate_result.prototype = {};
FmuService_getFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetFmuStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_setFMUstate_args.prototype = {};
FmuService_setFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 2);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_setFMUstate_result.prototype = {};
FmuService_setFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_freeFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_freeFMUstate_args.prototype = {};
FmuService_freeFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_freeFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_freeFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 2);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_freeFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_freeFMUstate_result.prototype = {};
FmuService_freeFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_freeFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_freeFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_serializeFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_serializeFMUstate_args.prototype = {};
FmuService_serializeFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_serializeFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_serializeFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 2);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_serializeFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SerializeFmuStateResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_serializeFMUstate_result.prototype = {};
FmuService_serializeFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SerializeFmuStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_serializeFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_serializeFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_deSerializeFMUstate_args = function(args) {
  this.instanceId = null;
  this.state = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
FmuService_deSerializeFMUstate_args.prototype = {};
FmuService_deSerializeFMUstate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_deSerializeFMUstate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_deSerializeFMUstate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 2);
    output.writeBinary(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_deSerializeFMUstate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeSerializeFmuStateResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_deSerializeFMUstate_result.prototype = {};
FmuService_deSerializeFMUstate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeSerializeFmuStateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_deSerializeFMUstate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_deSerializeFMUstate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getDirectionalDerivative_args = function(args) {
  this.instanceId = null;
  this.vUnknownRef = null;
  this.vKnownRef = null;
  this.dvKnownRef = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vUnknownRef !== undefined && args.vUnknownRef !== null) {
      this.vUnknownRef = Thrift.copyList(args.vUnknownRef, [null]);
    }
    if (args.vKnownRef !== undefined && args.vKnownRef !== null) {
      this.vKnownRef = Thrift.copyList(args.vKnownRef, [null]);
    }
    if (args.dvKnownRef !== undefined && args.dvKnownRef !== null) {
      this.dvKnownRef = Thrift.copyList(args.dvKnownRef, [null]);
    }
  }
};
FmuService_getDirectionalDerivative_args.prototype = {};
FmuService_getDirectionalDerivative_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.vUnknownRef = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = input.readI64().value;
          this.vUnknownRef.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size183 = 0;
        var _rtmp3187;
        this.vKnownRef = [];
        var _etype186 = 0;
        _rtmp3187 = input.readListBegin();
        _etype186 = _rtmp3187.etype;
        _size183 = _rtmp3187.size;
        for (var _i188 = 0; _i188 < _size183; ++_i188)
        {
          var elem189 = null;
          elem189 = input.readI64().value;
          this.vKnownRef.push(elem189);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.dvKnownRef = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = input.readDouble().value;
          this.dvKnownRef.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getDirectionalDerivative_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getDirectionalDerivative_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vUnknownRef !== null && this.vUnknownRef !== undefined) {
    output.writeFieldBegin('vUnknownRef', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vUnknownRef.length);
    for (var iter197 in this.vUnknownRef)
    {
      if (this.vUnknownRef.hasOwnProperty(iter197))
      {
        iter197 = this.vUnknownRef[iter197];
        output.writeI64(iter197);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vKnownRef !== null && this.vKnownRef !== undefined) {
    output.writeFieldBegin('vKnownRef', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.vKnownRef.length);
    for (var iter198 in this.vKnownRef)
    {
      if (this.vKnownRef.hasOwnProperty(iter198))
      {
        iter198 = this.vKnownRef[iter198];
        output.writeI64(iter198);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dvKnownRef !== null && this.dvKnownRef !== undefined) {
    output.writeFieldBegin('dvKnownRef', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.DOUBLE, this.dvKnownRef.length);
    for (var iter199 in this.dvKnownRef)
    {
      if (this.dvKnownRef.hasOwnProperty(iter199))
      {
        iter199 = this.dvKnownRef[iter199];
        output.writeDouble(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getDirectionalDerivative_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DirectionalDerivativeResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_getDirectionalDerivative_result.prototype = {};
FmuService_getDirectionalDerivative_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DirectionalDerivativeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getDirectionalDerivative_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getDirectionalDerivative_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
FmuServiceClient.prototype = {};
FmuServiceClient.prototype.getModelDescription = function(fmuId, callback) {
  this.send_getModelDescription(fmuId, callback); 
  if (!callback) {
    return this.recv_getModelDescription();
  }
};

FmuServiceClient.prototype.send_getModelDescription = function(fmuId, callback) {
  this.output.writeMessageBegin('getModelDescription', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_getModelDescription_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getModelDescription();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_getModelDescription = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getModelDescription_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getModelDescription failed: unknown result';
};
FmuServiceClient.prototype.getCoSimulationAttributes = function(instanceId, callback) {
  this.send_getCoSimulationAttributes(instanceId, callback); 
  if (!callback) {
    return this.recv_getCoSimulationAttributes();
  }
};

FmuServiceClient.prototype.send_getCoSimulationAttributes = function(instanceId, callback) {
  this.output.writeMessageBegin('getCoSimulationAttributes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_getCoSimulationAttributes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getCoSimulationAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_getCoSimulationAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getCoSimulationAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCoSimulationAttributes failed: unknown result';
};
FmuServiceClient.prototype.canCreateInstanceFromCS = function(fmuId, callback) {
  this.send_canCreateInstanceFromCS(fmuId, callback); 
  if (!callback) {
    return this.recv_canCreateInstanceFromCS();
  }
};

FmuServiceClient.prototype.send_canCreateInstanceFromCS = function(fmuId, callback) {
  this.output.writeMessageBegin('canCreateInstanceFromCS', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_canCreateInstanceFromCS_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_canCreateInstanceFromCS();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_canCreateInstanceFromCS = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_canCreateInstanceFromCS_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'canCreateInstanceFromCS failed: unknown result';
};
FmuServiceClient.prototype.canCreateInstanceFromME = function(fmuId, callback) {
  this.send_canCreateInstanceFromME(fmuId, callback); 
  if (!callback) {
    return this.recv_canCreateInstanceFromME();
  }
};

FmuServiceClient.prototype.send_canCreateInstanceFromME = function(fmuId, callback) {
  this.output.writeMessageBegin('canCreateInstanceFromME', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_canCreateInstanceFromME_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_canCreateInstanceFromME();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_canCreateInstanceFromME = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_canCreateInstanceFromME_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'canCreateInstanceFromME failed: unknown result';
};
FmuServiceClient.prototype.createInstanceFromCS = function(fmuId, callback) {
  this.send_createInstanceFromCS(fmuId, callback); 
  if (!callback) {
    return this.recv_createInstanceFromCS();
  }
};

FmuServiceClient.prototype.send_createInstanceFromCS = function(fmuId, callback) {
  this.output.writeMessageBegin('createInstanceFromCS', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_createInstanceFromCS_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createInstanceFromCS();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_createInstanceFromCS = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_createInstanceFromCS_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createInstanceFromCS failed: unknown result';
};
FmuServiceClient.prototype.createInstanceFromME = function(fmuId, solver, callback) {
  this.send_createInstanceFromME(fmuId, solver, callback); 
  if (!callback) {
    return this.recv_createInstanceFromME();
  }
};

FmuServiceClient.prototype.send_createInstanceFromME = function(fmuId, solver, callback) {
  this.output.writeMessageBegin('createInstanceFromME', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmuId: fmuId,
    solver: solver
  };
  var args = new FmuService_createInstanceFromME_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createInstanceFromME();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_createInstanceFromME = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_createInstanceFromME_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createInstanceFromME failed: unknown result';
};
FmuServiceClient.prototype.setupExperiment = function(instanceId, start, stop, tolerance, callback) {
  this.send_setupExperiment(instanceId, start, stop, tolerance, callback); 
  if (!callback) {
    return this.recv_setupExperiment();
  }
};

FmuServiceClient.prototype.send_setupExperiment = function(instanceId, start, stop, tolerance, callback) {
  this.output.writeMessageBegin('setupExperiment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    start: start,
    stop: stop,
    tolerance: tolerance
  };
  var args = new FmuService_setupExperiment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setupExperiment();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_setupExperiment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_setupExperiment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setupExperiment failed: unknown result';
};
FmuServiceClient.prototype.enterInitializationMode = function(instanceId, callback) {
  this.send_enterInitializationMode(instanceId, callback); 
  if (!callback) {
    return this.recv_enterInitializationMode();
  }
};

FmuServiceClient.prototype.send_enterInitializationMode = function(instanceId, callback) {
  this.output.writeMessageBegin('enterInitializationMode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_enterInitializationMode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_enterInitializationMode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_enterInitializationMode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_enterInitializationMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'enterInitializationMode failed: unknown result';
};
FmuServiceClient.prototype.exitInitializationMode = function(instanceId, callback) {
  this.send_exitInitializationMode(instanceId, callback); 
  if (!callback) {
    return this.recv_exitInitializationMode();
  }
};

FmuServiceClient.prototype.send_exitInitializationMode = function(instanceId, callback) {
  this.output.writeMessageBegin('exitInitializationMode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_exitInitializationMode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_exitInitializationMode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_exitInitializationMode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_exitInitializationMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'exitInitializationMode failed: unknown result';
};
FmuServiceClient.prototype.step = function(instanceId, stepSize, callback) {
  this.send_step(instanceId, stepSize, callback); 
  if (!callback) {
    return this.recv_step();
  }
};

FmuServiceClient.prototype.send_step = function(instanceId, stepSize, callback) {
  this.output.writeMessageBegin('step', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    stepSize: stepSize
  };
  var args = new FmuService_step_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_step();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_step = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'step failed: unknown result';
};
FmuServiceClient.prototype.reset = function(instanceId, callback) {
  this.send_reset(instanceId, callback); 
  if (!callback) {
    return this.recv_reset();
  }
};

FmuServiceClient.prototype.send_reset = function(instanceId, callback) {
  this.output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_reset_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reset();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_reset = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_reset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reset failed: unknown result';
};
FmuServiceClient.prototype.terminate = function(instanceId, callback) {
  this.send_terminate(instanceId, callback); 
  if (!callback) {
    return this.recv_terminate();
  }
};

FmuServiceClient.prototype.send_terminate = function(instanceId, callback) {
  this.output.writeMessageBegin('terminate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_terminate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_terminate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_terminate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_terminate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terminate failed: unknown result';
};
FmuServiceClient.prototype.readInteger = function(instanceId, vr, callback) {
  this.send_readInteger(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readInteger();
  }
};

FmuServiceClient.prototype.send_readInteger = function(instanceId, vr, callback) {
  this.output.writeMessageBegin('readInteger', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readInteger_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readInteger();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readInteger = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readInteger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readInteger failed: unknown result';
};
FmuServiceClient.prototype.readReal = function(instanceId, vr, callback) {
  this.send_readReal(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readReal();
  }
};

FmuServiceClient.prototype.send_readReal = function(instanceId, vr, callback) {
  this.output.writeMessageBegin('readReal', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readReal_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readReal();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readReal = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readReal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readReal failed: unknown result';
};
FmuServiceClient.prototype.readString = function(instanceId, vr, callback) {
  this.send_readString(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readString();
  }
};

FmuServiceClient.prototype.send_readString = function(instanceId, vr, callback) {
  this.output.writeMessageBegin('readString', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readString_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readString();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readString = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readString failed: unknown result';
};
FmuServiceClient.prototype.readBoolean = function(instanceId, vr, callback) {
  this.send_readBoolean(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_readBoolean();
  }
};

FmuServiceClient.prototype.send_readBoolean = function(instanceId, vr, callback) {
  this.output.writeMessageBegin('readBoolean', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_readBoolean_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readBoolean();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readBoolean = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readBoolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readBoolean failed: unknown result';
};
FmuServiceClient.prototype.writeInteger = function(instanceId, vr, value, callback) {
  this.send_writeInteger(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeInteger();
  }
};

FmuServiceClient.prototype.send_writeInteger = function(instanceId, vr, value, callback) {
  this.output.writeMessageBegin('writeInteger', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeInteger_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeInteger();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeInteger = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeInteger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeInteger failed: unknown result';
};
FmuServiceClient.prototype.writeReal = function(instanceId, vr, value, callback) {
  this.send_writeReal(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeReal();
  }
};

FmuServiceClient.prototype.send_writeReal = function(instanceId, vr, value, callback) {
  this.output.writeMessageBegin('writeReal', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeReal_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeReal();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeReal = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeReal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeReal failed: unknown result';
};
FmuServiceClient.prototype.writeString = function(instanceId, vr, value, callback) {
  this.send_writeString(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeString();
  }
};

FmuServiceClient.prototype.send_writeString = function(instanceId, vr, value, callback) {
  this.output.writeMessageBegin('writeString', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeString_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeString();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeString = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeString failed: unknown result';
};
FmuServiceClient.prototype.writeBoolean = function(instanceId, vr, value, callback) {
  this.send_writeBoolean(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_writeBoolean();
  }
};

FmuServiceClient.prototype.send_writeBoolean = function(instanceId, vr, value, callback) {
  this.output.writeMessageBegin('writeBoolean', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeBoolean_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeBoolean();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeBoolean = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeBoolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeBoolean failed: unknown result';
};
FmuServiceClient.prototype.getFMUstate = function(instanceId, callback) {
  this.send_getFMUstate(instanceId, callback); 
  if (!callback) {
    return this.recv_getFMUstate();
  }
};

FmuServiceClient.prototype.send_getFMUstate = function(instanceId, callback) {
  this.output.writeMessageBegin('getFMUstate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_getFMUstate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getFMUstate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_getFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFMUstate failed: unknown result';
};
FmuServiceClient.prototype.setFMUstate = function(instanceId, state, callback) {
  this.send_setFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_setFMUstate();
  }
};

FmuServiceClient.prototype.send_setFMUstate = function(instanceId, state, callback) {
  this.output.writeMessageBegin('setFMUstate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_setFMUstate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setFMUstate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_setFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_setFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setFMUstate failed: unknown result';
};
FmuServiceClient.prototype.freeFMUstate = function(instanceId, state, callback) {
  this.send_freeFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_freeFMUstate();
  }
};

FmuServiceClient.prototype.send_freeFMUstate = function(instanceId, state, callback) {
  this.output.writeMessageBegin('freeFMUstate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_freeFMUstate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_freeFMUstate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_freeFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_freeFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'freeFMUstate failed: unknown result';
};
FmuServiceClient.prototype.serializeFMUstate = function(instanceId, state, callback) {
  this.send_serializeFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_serializeFMUstate();
  }
};

FmuServiceClient.prototype.send_serializeFMUstate = function(instanceId, state, callback) {
  this.output.writeMessageBegin('serializeFMUstate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_serializeFMUstate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_serializeFMUstate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_serializeFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_serializeFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'serializeFMUstate failed: unknown result';
};
FmuServiceClient.prototype.deSerializeFMUstate = function(instanceId, state, callback) {
  this.send_deSerializeFMUstate(instanceId, state, callback); 
  if (!callback) {
    return this.recv_deSerializeFMUstate();
  }
};

FmuServiceClient.prototype.send_deSerializeFMUstate = function(instanceId, state, callback) {
  this.output.writeMessageBegin('deSerializeFMUstate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    state: state
  };
  var args = new FmuService_deSerializeFMUstate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deSerializeFMUstate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_deSerializeFMUstate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_deSerializeFMUstate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deSerializeFMUstate failed: unknown result';
};
FmuServiceClient.prototype.getDirectionalDerivative = function(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback) {
  this.send_getDirectionalDerivative(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback); 
  if (!callback) {
    return this.recv_getDirectionalDerivative();
  }
};

FmuServiceClient.prototype.send_getDirectionalDerivative = function(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback) {
  this.output.writeMessageBegin('getDirectionalDerivative', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instanceId: instanceId,
    vUnknownRef: vUnknownRef,
    vKnownRef: vKnownRef,
    dvKnownRef: dvKnownRef
  };
  var args = new FmuService_getDirectionalDerivative_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getDirectionalDerivative();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_getDirectionalDerivative = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getDirectionalDerivative_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDirectionalDerivative failed: unknown result';
};

//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Status = {
  'OK_STATUS' : 0,
  'WARNING_STATUS' : 1,
  'DISCARD_STATUS' : 2,
  'ERROR_STATUS' : 3,
  'FATAL_STATUS' : 4,
  'PENDING_STATUS' : 5
};
Causality = {
  'INPUT_CAUSALITY' : 0,
  'OUTPUT_CAUSALITY' : 1,
  'PARAMETER_CAUSALITY' : 2,
  'CALCULATED_PARAMETER_CAUSALITY' : 3,
  'LOCAL_CAUSALITY' : 4,
  'INDEPENDENT_CAUSALITY' : 5,
  'UNKNOWN_CAUSALITY' : 6
};
Variability = {
  'CONSTANT_VARIABILITY' : 0,
  'FIXED_VARIABILITY' : 1,
  'CONTINUOUS_VARIABILITY' : 2,
  'DISCRETE_VARIABILITY' : 3,
  'TUNABLE_VARIABILITY' : 4,
  'UNKNOWN_VARIABILITY' : 5
};
Initial = {
  'EXACT_INITIAL' : 0,
  'APPROX_INITIAL' : 1,
  'CALCULATED_INITIAL' : 2,
  'UNKNOWN_INITIAL' : 3
};
IntegerAttribute = function(args) {
  this.min = null;
  this.max = null;
  this.start = null;
  this.quantity = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
IntegerAttribute.prototype = {};
IntegerAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.min = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.max = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.quantity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntegerAttribute.prototype.write = function(output) {
  output.writeStructBegin('IntegerAttribute');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I32, 1);
    output.writeI32(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I32, 2);
    output.writeI32(this.max);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 3);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.STRING, 4);
    output.writeString(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RealAttribute = function(args) {
  this.min = null;
  this.max = null;
  this.start = null;
  this.quantity = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
RealAttribute.prototype = {};
RealAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.start = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.quantity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RealAttribute.prototype.write = function(output) {
  output.writeStructBegin('RealAttribute');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.max);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.start);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.STRING, 4);
    output.writeString(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringAttribute = function(args) {
  this.start = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
  }
};
StringAttribute.prototype = {};
StringAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringAttribute.prototype.write = function(output) {
  output.writeStructBegin('StringAttribute');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.STRING, 1);
    output.writeString(this.start);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BooleanAttribute = function(args) {
  this.start = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
  }
};
BooleanAttribute.prototype = {};
BooleanAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.start = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BooleanAttribute.prototype.write = function(output) {
  output.writeStructBegin('BooleanAttribute');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.BOOL, 1);
    output.writeBool(this.start);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EnumerationAttribute = function(args) {
  this.min = null;
  this.max = null;
  this.start = null;
  this.quantity = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
EnumerationAttribute.prototype = {};
EnumerationAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.min = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.max = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.quantity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnumerationAttribute.prototype.write = function(output) {
  output.writeStructBegin('EnumerationAttribute');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I32, 1);
    output.writeI32(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I32, 2);
    output.writeI32(this.max);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 3);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.STRING, 4);
    output.writeString(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScalarVariableAttribute = function(args) {
  this.integerAttribute = null;
  this.realAttribute = null;
  this.stringAttribute = null;
  this.booleanAttribute = null;
  this.enumerationAttribute = null;
  if (args) {
    if (args.integerAttribute !== undefined && args.integerAttribute !== null) {
      this.integerAttribute = new IntegerAttribute(args.integerAttribute);
    }
    if (args.realAttribute !== undefined && args.realAttribute !== null) {
      this.realAttribute = new RealAttribute(args.realAttribute);
    }
    if (args.stringAttribute !== undefined && args.stringAttribute !== null) {
      this.stringAttribute = new StringAttribute(args.stringAttribute);
    }
    if (args.booleanAttribute !== undefined && args.booleanAttribute !== null) {
      this.booleanAttribute = new BooleanAttribute(args.booleanAttribute);
    }
    if (args.enumerationAttribute !== undefined && args.enumerationAttribute !== null) {
      this.enumerationAttribute = new EnumerationAttribute(args.enumerationAttribute);
    }
  }
};
ScalarVariableAttribute.prototype = {};
ScalarVariableAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.integerAttribute = new IntegerAttribute();
        this.integerAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.realAttribute = new RealAttribute();
        this.realAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringAttribute = new StringAttribute();
        this.stringAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.booleanAttribute = new BooleanAttribute();
        this.booleanAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.enumerationAttribute = new EnumerationAttribute();
        this.enumerationAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScalarVariableAttribute.prototype.write = function(output) {
  output.writeStructBegin('ScalarVariableAttribute');
  if (this.integerAttribute !== null && this.integerAttribute !== undefined) {
    output.writeFieldBegin('integerAttribute', Thrift.Type.STRUCT, 1);
    this.integerAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.realAttribute !== null && this.realAttribute !== undefined) {
    output.writeFieldBegin('realAttribute', Thrift.Type.STRUCT, 2);
    this.realAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.stringAttribute !== null && this.stringAttribute !== undefined) {
    output.writeFieldBegin('stringAttribute', Thrift.Type.STRUCT, 3);
    this.stringAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.booleanAttribute !== null && this.booleanAttribute !== undefined) {
    output.writeFieldBegin('booleanAttribute', Thrift.Type.STRUCT, 4);
    this.booleanAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.enumerationAttribute !== null && this.enumerationAttribute !== undefined) {
    output.writeFieldBegin('enumerationAttribute', Thrift.Type.STRUCT, 5);
    this.enumerationAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScalarVariable = function(args) {
  this.name = null;
  this.valueReference = null;
  this.description = null;
  this.initial = null;
  this.causality = null;
  this.variability = null;
  this.attribute = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.valueReference !== undefined && args.valueReference !== null) {
      this.valueReference = args.valueReference;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.initial !== undefined && args.initial !== null) {
      this.initial = args.initial;
    }
    if (args.causality !== undefined && args.causality !== null) {
      this.causality = args.causality;
    }
    if (args.variability !== undefined && args.variability !== null) {
      this.variability = args.variability;
    }
    if (args.attribute !== undefined && args.attribute !== null) {
      this.attribute = new ScalarVariableAttribute(args.attribute);
    }
  }
};
ScalarVariable.prototype = {};
ScalarVariable.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.valueReference = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.initial = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.causality = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.variability = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute = new ScalarVariableAttribute();
        this.attribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScalarVariable.prototype.write = function(output) {
  output.writeStructBegin('ScalarVariable');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.valueReference !== null && this.valueReference !== undefined) {
    output.writeFieldBegin('valueReference', Thrift.Type.I64, 2);
    output.writeI64(this.valueReference);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.initial !== null && this.initial !== undefined) {
    output.writeFieldBegin('initial', Thrift.Type.I32, 4);
    output.writeI32(this.initial);
    output.writeFieldEnd();
  }
  if (this.causality !== null && this.causality !== undefined) {
    output.writeFieldBegin('causality', Thrift.Type.I32, 5);
    output.writeI32(this.causality);
    output.writeFieldEnd();
  }
  if (this.variability !== null && this.variability !== undefined) {
    output.writeFieldBegin('variability', Thrift.Type.I32, 6);
    output.writeI32(this.variability);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRUCT, 7);
    this.attribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Unknown = function(args) {
  this.index = null;
  this.dependencies = null;
  this.dependenciesKind = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.dependencies !== undefined && args.dependencies !== null) {
      this.dependencies = Thrift.copyList(args.dependencies, [null]);
    }
    if (args.dependenciesKind !== undefined && args.dependenciesKind !== null) {
      this.dependenciesKind = args.dependenciesKind;
    }
  }
};
Unknown.prototype = {};
Unknown.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.dependencies = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.dependencies.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dependenciesKind = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Unknown.prototype.write = function(output) {
  output.writeStructBegin('Unknown');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.dependencies !== null && this.dependencies !== undefined) {
    output.writeFieldBegin('dependencies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dependencies.length);
    for (var iter7 in this.dependencies)
    {
      if (this.dependencies.hasOwnProperty(iter7))
      {
        iter7 = this.dependencies[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dependenciesKind !== null && this.dependenciesKind !== undefined) {
    output.writeFieldBegin('dependenciesKind', Thrift.Type.STRING, 3);
    output.writeString(this.dependenciesKind);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelStructure = function(args) {
  this.outputs = null;
  this.derivatives = null;
  this.initialUnknowns = null;
  if (args) {
    if (args.outputs !== undefined && args.outputs !== null) {
      this.outputs = Thrift.copyList(args.outputs, [Unknown]);
    }
    if (args.derivatives !== undefined && args.derivatives !== null) {
      this.derivatives = Thrift.copyList(args.derivatives, [Unknown]);
    }
    if (args.initialUnknowns !== undefined && args.initialUnknowns !== null) {
      this.initialUnknowns = Thrift.copyList(args.initialUnknowns, [Unknown]);
    }
  }
};
ModelStructure.prototype = {};
ModelStructure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.outputs = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Unknown();
          elem14.read(input);
          this.outputs.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.derivatives = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new Unknown();
          elem21.read(input);
          this.derivatives.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.initialUnknowns = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new Unknown();
          elem28.read(input);
          this.initialUnknowns.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelStructure.prototype.write = function(output) {
  output.writeStructBegin('ModelStructure');
  if (this.outputs !== null && this.outputs !== undefined) {
    output.writeFieldBegin('outputs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.outputs.length);
    for (var iter29 in this.outputs)
    {
      if (this.outputs.hasOwnProperty(iter29))
      {
        iter29 = this.outputs[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.derivatives !== null && this.derivatives !== undefined) {
    output.writeFieldBegin('derivatives', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.derivatives.length);
    for (var iter30 in this.derivatives)
    {
      if (this.derivatives.hasOwnProperty(iter30))
      {
        iter30 = this.derivatives[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.initialUnknowns !== null && this.initialUnknowns !== undefined) {
    output.writeFieldBegin('initialUnknowns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.initialUnknowns.length);
    for (var iter31 in this.initialUnknowns)
    {
      if (this.initialUnknowns.hasOwnProperty(iter31))
      {
        iter31 = this.initialUnknowns[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DefaultExperiment = function(args) {
  this.startTime = null;
  this.stopTime = null;
  this.tolerance = null;
  this.stepSize = null;
  if (args) {
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.stopTime !== undefined && args.stopTime !== null) {
      this.stopTime = args.stopTime;
    }
    if (args.tolerance !== undefined && args.tolerance !== null) {
      this.tolerance = args.tolerance;
    }
    if (args.stepSize !== undefined && args.stepSize !== null) {
      this.stepSize = args.stepSize;
    }
  }
};
DefaultExperiment.prototype = {};
DefaultExperiment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.startTime = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stopTime = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tolerance = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stepSize = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DefaultExperiment.prototype.write = function(output) {
  output.writeStructBegin('DefaultExperiment');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.startTime);
    output.writeFieldEnd();
  }
  if (this.stopTime !== null && this.stopTime !== undefined) {
    output.writeFieldBegin('stopTime', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.stopTime);
    output.writeFieldEnd();
  }
  if (this.tolerance !== null && this.tolerance !== undefined) {
    output.writeFieldBegin('tolerance', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.tolerance);
    output.writeFieldEnd();
  }
  if (this.stepSize !== null && this.stepSize !== undefined) {
    output.writeFieldBegin('stepSize', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.stepSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StepResult = function(args) {
  this.status = null;
  this.simulationTime = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.simulationTime !== undefined && args.simulationTime !== null) {
      this.simulationTime = args.simulationTime;
    }
  }
};
StepResult.prototype = {};
StepResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.simulationTime = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StepResult.prototype.write = function(output) {
  output.writeStructBegin('StepResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.simulationTime !== null && this.simulationTime !== undefined) {
    output.writeFieldBegin('simulationTime', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.simulationTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IntegerRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
IntegerRead.prototype = {};
IntegerRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.value = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32().value;
          this.value.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntegerRead.prototype.write = function(output) {
  output.writeStructBegin('IntegerRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.value.length);
    for (var iter39 in this.value)
    {
      if (this.value.hasOwnProperty(iter39))
      {
        iter39 = this.value[iter39];
        output.writeI32(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RealRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
RealRead.prototype = {};
RealRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.value = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readDouble().value;
          this.value.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RealRead.prototype.write = function(output) {
  output.writeStructBegin('RealRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.value.length);
    for (var iter47 in this.value)
    {
      if (this.value.hasOwnProperty(iter47))
      {
        iter47 = this.value[iter47];
        output.writeDouble(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
StringRead.prototype = {};
StringRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.value = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString().value;
          this.value.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringRead.prototype.write = function(output) {
  output.writeStructBegin('StringRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.value.length);
    for (var iter55 in this.value)
    {
      if (this.value.hasOwnProperty(iter55))
      {
        iter55 = this.value[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BooleanRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
BooleanRead.prototype = {};
BooleanRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.value = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readBool().value;
          this.value.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BooleanRead.prototype.write = function(output) {
  output.writeStructBegin('BooleanRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BOOL, this.value.length);
    for (var iter63 in this.value)
    {
      if (this.value.hasOwnProperty(iter63))
      {
        iter63 = this.value[iter63];
        output.writeBool(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Solver = function(args) {
  this.name = null;
  this.settings = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
  }
};
Solver.prototype = {};
Solver.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.settings = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Solver.prototype.write = function(output) {
  output.writeStructBegin('Solver');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRING, 2);
    output.writeString(this.settings);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDescription = function(args) {
  this.guid = null;
  this.fmiVersion = null;
  this.modelName = null;
  this.license = null;
  this.copyright = null;
  this.author = null;
  this.version = null;
  this.description = null;
  this.generationTool = null;
  this.generationDateAndTime = null;
  this.defaultExperiment = null;
  this.variableNamingConvention = null;
  this.modelVariables = null;
  this.modelStructure = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.fmiVersion !== undefined && args.fmiVersion !== null) {
      this.fmiVersion = args.fmiVersion;
    }
    if (args.modelName !== undefined && args.modelName !== null) {
      this.modelName = args.modelName;
    }
    if (args.license !== undefined && args.license !== null) {
      this.license = args.license;
    }
    if (args.copyright !== undefined && args.copyright !== null) {
      this.copyright = args.copyright;
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.generationTool !== undefined && args.generationTool !== null) {
      this.generationTool = args.generationTool;
    }
    if (args.generationDateAndTime !== undefined && args.generationDateAndTime !== null) {
      this.generationDateAndTime = args.generationDateAndTime;
    }
    if (args.defaultExperiment !== undefined && args.defaultExperiment !== null) {
      this.defaultExperiment = new DefaultExperiment(args.defaultExperiment);
    }
    if (args.variableNamingConvention !== undefined && args.variableNamingConvention !== null) {
      this.variableNamingConvention = args.variableNamingConvention;
    }
    if (args.modelVariables !== undefined && args.modelVariables !== null) {
      this.modelVariables = Thrift.copyList(args.modelVariables, [ScalarVariable]);
    }
    if (args.modelStructure !== undefined && args.modelStructure !== null) {
      this.modelStructure = new ModelStructure(args.modelStructure);
    }
  }
};
ModelDescription.prototype = {};
ModelDescription.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fmiVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.modelName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.license = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.copyright = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.generationTool = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.generationDateAndTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.defaultExperiment = new DefaultExperiment();
        this.defaultExperiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.variableNamingConvention = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.modelVariables = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ScalarVariable();
          elem70.read(input);
          this.modelVariables.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelStructure = new ModelStructure();
        this.modelStructure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDescription.prototype.write = function(output) {
  output.writeStructBegin('ModelDescription');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.fmiVersion !== null && this.fmiVersion !== undefined) {
    output.writeFieldBegin('fmiVersion', Thrift.Type.STRING, 2);
    output.writeString(this.fmiVersion);
    output.writeFieldEnd();
  }
  if (this.modelName !== null && this.modelName !== undefined) {
    output.writeFieldBegin('modelName', Thrift.Type.STRING, 3);
    output.writeString(this.modelName);
    output.writeFieldEnd();
  }
  if (this.license !== null && this.license !== undefined) {
    output.writeFieldBegin('license', Thrift.Type.STRING, 4);
    output.writeString(this.license);
    output.writeFieldEnd();
  }
  if (this.copyright !== null && this.copyright !== undefined) {
    output.writeFieldBegin('copyright', Thrift.Type.STRING, 5);
    output.writeString(this.copyright);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 6);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 7);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 8);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.generationTool !== null && this.generationTool !== undefined) {
    output.writeFieldBegin('generationTool', Thrift.Type.STRING, 9);
    output.writeString(this.generationTool);
    output.writeFieldEnd();
  }
  if (this.generationDateAndTime !== null && this.generationDateAndTime !== undefined) {
    output.writeFieldBegin('generationDateAndTime', Thrift.Type.STRING, 10);
    output.writeString(this.generationDateAndTime);
    output.writeFieldEnd();
  }
  if (this.defaultExperiment !== null && this.defaultExperiment !== undefined) {
    output.writeFieldBegin('defaultExperiment', Thrift.Type.STRUCT, 11);
    this.defaultExperiment.write(output);
    output.writeFieldEnd();
  }
  if (this.variableNamingConvention !== null && this.variableNamingConvention !== undefined) {
    output.writeFieldBegin('variableNamingConvention', Thrift.Type.STRING, 12);
    output.writeString(this.variableNamingConvention);
    output.writeFieldEnd();
  }
  if (this.modelVariables !== null && this.modelVariables !== undefined) {
    output.writeFieldBegin('modelVariables', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.modelVariables.length);
    for (var iter71 in this.modelVariables)
    {
      if (this.modelVariables.hasOwnProperty(iter71))
      {
        iter71 = this.modelVariables[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.modelStructure !== null && this.modelStructure !== undefined) {
    output.writeFieldBegin('modelStructure', Thrift.Type.STRUCT, 14);
    this.modelStructure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoSimulationAttributes = function(args) {
  this.modelIdentifier = null;
  this.canGetAndSetFMUstate = null;
  this.canSerializeFMUstate = null;
  this.providesDirectionalDerivative = null;
  this.canHandleVariableCommunicationStepSize = null;
  this.canInterpolateInputs = null;
  this.maxOutputDerivativeOrder = null;
  if (args) {
    if (args.modelIdentifier !== undefined && args.modelIdentifier !== null) {
      this.modelIdentifier = args.modelIdentifier;
    }
    if (args.canGetAndSetFMUstate !== undefined && args.canGetAndSetFMUstate !== null) {
      this.canGetAndSetFMUstate = args.canGetAndSetFMUstate;
    }
    if (args.canSerializeFMUstate !== undefined && args.canSerializeFMUstate !== null) {
      this.canSerializeFMUstate = args.canSerializeFMUstate;
    }
    if (args.providesDirectionalDerivative !== undefined && args.providesDirectionalDerivative !== null) {
      this.providesDirectionalDerivative = args.providesDirectionalDerivative;
    }
    if (args.canHandleVariableCommunicationStepSize !== undefined && args.canHandleVariableCommunicationStepSize !== null) {
      this.canHandleVariableCommunicationStepSize = args.canHandleVariableCommunicationStepSize;
    }
    if (args.canInterpolateInputs !== undefined && args.canInterpolateInputs !== null) {
      this.canInterpolateInputs = args.canInterpolateInputs;
    }
    if (args.maxOutputDerivativeOrder !== undefined && args.maxOutputDerivativeOrder !== null) {
      this.maxOutputDerivativeOrder = args.maxOutputDerivativeOrder;
    }
  }
};
CoSimulationAttributes.prototype = {};
CoSimulationAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.modelIdentifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.canGetAndSetFMUstate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.canSerializeFMUstate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.providesDirectionalDerivative = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.canHandleVariableCommunicationStepSize = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.canInterpolateInputs = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.maxOutputDerivativeOrder = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoSimulationAttributes.prototype.write = function(output) {
  output.writeStructBegin('CoSimulationAttributes');
  if (this.modelIdentifier !== null && this.modelIdentifier !== undefined) {
    output.writeFieldBegin('modelIdentifier', Thrift.Type.STRING, 1);
    output.writeString(this.modelIdentifier);
    output.writeFieldEnd();
  }
  if (this.canGetAndSetFMUstate !== null && this.canGetAndSetFMUstate !== undefined) {
    output.writeFieldBegin('canGetAndSetFMUstate', Thrift.Type.BOOL, 2);
    output.writeBool(this.canGetAndSetFMUstate);
    output.writeFieldEnd();
  }
  if (this.canSerializeFMUstate !== null && this.canSerializeFMUstate !== undefined) {
    output.writeFieldBegin('canSerializeFMUstate', Thrift.Type.BOOL, 3);
    output.writeBool(this.canSerializeFMUstate);
    output.writeFieldEnd();
  }
  if (this.providesDirectionalDerivative !== null && this.providesDirectionalDerivative !== undefined) {
    output.writeFieldBegin('providesDirectionalDerivative', Thrift.Type.BOOL, 4);
    output.writeBool(this.providesDirectionalDerivative);
    output.writeFieldEnd();
  }
  if (this.canHandleVariableCommunicationStepSize !== null && this.canHandleVariableCommunicationStepSize !== undefined) {
    output.writeFieldBegin('canHandleVariableCommunicationStepSize', Thrift.Type.BOOL, 5);
    output.writeBool(this.canHandleVariableCommunicationStepSize);
    output.writeFieldEnd();
  }
  if (this.canInterpolateInputs !== null && this.canInterpolateInputs !== undefined) {
    output.writeFieldBegin('canInterpolateInputs', Thrift.Type.BOOL, 6);
    output.writeBool(this.canInterpolateInputs);
    output.writeFieldEnd();
  }
  if (this.maxOutputDerivativeOrder !== null && this.maxOutputDerivativeOrder !== undefined) {
    output.writeFieldBegin('maxOutputDerivativeOrder', Thrift.Type.I32, 7);
    output.writeI32(this.maxOutputDerivativeOrder);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchFmuException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchFmuException, Thrift.TException);
NoSuchFmuException.prototype.name = 'NoSuchFmuException';
NoSuchFmuException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchFmuException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchFmuException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchInstanceException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchInstanceException, Thrift.TException);
NoSuchInstanceException.prototype.name = 'NoSuchInstanceException';
NoSuchInstanceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchInstanceException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchInstanceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchVariableException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchVariableException, Thrift.TException);
NoSuchVariableException.prototype.name = 'NoSuchVariableException';
NoSuchVariableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchVariableException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchVariableException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnsupportedOperationException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnsupportedOperationException, Thrift.TException);
UnsupportedOperationException.prototype.name = 'UnsupportedOperationException';
UnsupportedOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnsupportedOperationException.prototype.write = function(output) {
  output.writeStructBegin('UnsupportedOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetFmuStateResult = function(args) {
  this.state = null;
  this.status = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
GetFmuStateResult.prototype = {};
GetFmuStateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFmuStateResult.prototype.write = function(output) {
  output.writeStructBegin('GetFmuStateResult');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 1);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SerializeFmuStateResult = function(args) {
  this.state = null;
  this.status = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
SerializeFmuStateResult.prototype = {};
SerializeFmuStateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SerializeFmuStateResult.prototype.write = function(output) {
  output.writeStructBegin('SerializeFmuStateResult');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 1);
    output.writeBinary(this.state);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeSerializeFmuStateResult = function(args) {
  this.state = null;
  this.status = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
DeSerializeFmuStateResult.prototype = {};
DeSerializeFmuStateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.state = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeSerializeFmuStateResult.prototype.write = function(output) {
  output.writeStructBegin('DeSerializeFmuStateResult');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I64, 1);
    output.writeI64(this.state);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DirectionalDerivativeResult = function(args) {
  this.dvUnknownRef = null;
  this.status = null;
  if (args) {
    if (args.dvUnknownRef !== undefined && args.dvUnknownRef !== null) {
      this.dvUnknownRef = Thrift.copyList(args.dvUnknownRef, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
DirectionalDerivativeResult.prototype = {};
DirectionalDerivativeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.dvUnknownRef = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readDouble().value;
          this.dvUnknownRef.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectionalDerivativeResult.prototype.write = function(output) {
  output.writeStructBegin('DirectionalDerivativeResult');
  if (this.dvUnknownRef !== null && this.dvUnknownRef !== undefined) {
    output.writeFieldBegin('dvUnknownRef', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.dvUnknownRef.length);
    for (var iter79 in this.dvUnknownRef)
    {
      if (this.dvUnknownRef.hasOwnProperty(iter79))
      {
        iter79 = this.dvUnknownRef[iter79];
        output.writeDouble(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


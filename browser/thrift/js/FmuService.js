//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

FmuService_getModelDescriptionXml_args = function(args) {
  this.fmu_id = null;
  if (args) {
    if (args.fmu_id !== undefined && args.fmu_id !== null) {
      this.fmu_id = args.fmu_id;
    }
  }
};
FmuService_getModelDescriptionXml_args.prototype = {};
FmuService_getModelDescriptionXml_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmu_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescriptionXml_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescriptionXml_args');
  if (this.fmu_id !== null && this.fmu_id !== undefined) {
    output.writeFieldBegin('fmu_id', Thrift.Type.STRING, 1);
    output.writeString(this.fmu_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getModelDescriptionXml_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_getModelDescriptionXml_result.prototype = {};
FmuService_getModelDescriptionXml_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescriptionXml_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescriptionXml_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getModelDescription_args = function(args) {
  this.fmu_id = null;
  if (args) {
    if (args.fmu_id !== undefined && args.fmu_id !== null) {
      this.fmu_id = args.fmu_id;
    }
  }
};
FmuService_getModelDescription_args.prototype = {};
FmuService_getModelDescription_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmu_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescription_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescription_args');
  if (this.fmu_id !== null && this.fmu_id !== undefined) {
    output.writeFieldBegin('fmu_id', Thrift.Type.STRING, 1);
    output.writeString(this.fmu_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_getModelDescription_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ModelDescription(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_getModelDescription_result.prototype = {};
FmuService_getModelDescription_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ModelDescription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_getModelDescription_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_getModelDescription_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromCS_args = function(args) {
  this.fmu_id = null;
  if (args) {
    if (args.fmu_id !== undefined && args.fmu_id !== null) {
      this.fmu_id = args.fmu_id;
    }
  }
};
FmuService_createInstanceFromCS_args.prototype = {};
FmuService_createInstanceFromCS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmu_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromCS_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromCS_args');
  if (this.fmu_id !== null && this.fmu_id !== undefined) {
    output.writeFieldBegin('fmu_id', Thrift.Type.STRING, 1);
    output.writeString(this.fmu_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromCS_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof UnsupportedOperationException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchFmuException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_createInstanceFromCS_result.prototype = {};
FmuService_createInstanceFromCS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new UnsupportedOperationException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchFmuException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromCS_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromCS_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromME_args = function(args) {
  this.fmu_id = null;
  this.solver = null;
  if (args) {
    if (args.fmu_id !== undefined && args.fmu_id !== null) {
      this.fmu_id = args.fmu_id;
    }
    if (args.solver !== undefined && args.solver !== null) {
      this.solver = new Solver(args.solver);
    }
  }
};
FmuService_createInstanceFromME_args.prototype = {};
FmuService_createInstanceFromME_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmu_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.solver = new Solver();
        this.solver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromME_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromME_args');
  if (this.fmu_id !== null && this.fmu_id !== undefined) {
    output.writeFieldBegin('fmu_id', Thrift.Type.STRING, 1);
    output.writeString(this.fmu_id);
    output.writeFieldEnd();
  }
  if (this.solver !== null && this.solver !== undefined) {
    output.writeFieldBegin('solver', Thrift.Type.STRUCT, 2);
    this.solver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_createInstanceFromME_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof UnsupportedOperationException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchFmuException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_createInstanceFromME_result.prototype = {};
FmuService_createInstanceFromME_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new UnsupportedOperationException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchFmuException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_createInstanceFromME_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_createInstanceFromME_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_init_args = function(args) {
  this.instance_id = null;
  this.start = null;
  this.stop = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.stop !== undefined && args.stop !== null) {
      this.stop = args.stop;
    }
  }
};
FmuService_init_args.prototype = {};
FmuService_init_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.start = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stop = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_init_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_init_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.start);
    output.writeFieldEnd();
  }
  if (this.stop !== null && this.stop !== undefined) {
    output.writeFieldBegin('stop', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.stop);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_init_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_init_result.prototype = {};
FmuService_init_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_init_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_init_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_args = function(args) {
  this.instance_id = null;
  this.step_size = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.step_size !== undefined && args.step_size !== null) {
      this.step_size = args.step_size;
    }
  }
};
FmuService_step_args.prototype = {};
FmuService_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.step_size = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.step_size !== null && this.step_size !== undefined) {
    output.writeFieldBegin('step_size', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.step_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StepResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_step_result.prototype = {};
FmuService_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_args = function(args) {
  this.instance_id = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
  }
};
FmuService_reset_args.prototype = {};
FmuService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_reset_result.prototype = {};
FmuService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_args = function(args) {
  this.instance_id = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
  }
};
FmuService_terminate_args.prototype = {};
FmuService_terminate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_terminate_result.prototype = {};
FmuService_terminate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readInteger_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readInteger_args.prototype = {};
FmuService_readInteger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.vr = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.vr.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readInteger_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readInteger_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter7 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter7))
      {
        iter7 = this.vr[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readInteger_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new IntegerRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readInteger_result.prototype = {};
FmuService_readInteger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new IntegerRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readInteger_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readInteger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readReal_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readReal_args.prototype = {};
FmuService_readReal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.vr = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32().value;
          this.vr.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readReal_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readReal_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter15 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter15))
      {
        iter15 = this.vr[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readReal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RealRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readReal_result.prototype = {};
FmuService_readReal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RealRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readReal_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readReal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readString_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readString_args.prototype = {};
FmuService_readString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.vr = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32().value;
          this.vr.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readString_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readString_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter23 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter23))
      {
        iter23 = this.vr[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readString_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StringRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readString_result.prototype = {};
FmuService_readString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StringRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readString_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readBoolean_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_readBoolean_args.prototype = {};
FmuService_readBoolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.vr = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32().value;
          this.vr.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readBoolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readBoolean_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter31 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter31))
      {
        iter31 = this.vr[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_readBoolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BooleanRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_readBoolean_result.prototype = {};
FmuService_readBoolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BooleanRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_readBoolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_readBoolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeInteger_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeInteger_args.prototype = {};
FmuService_writeInteger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.vr = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32().value;
          this.vr.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.value = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readI32().value;
          this.value.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeInteger_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeInteger_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter46 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter46))
      {
        iter46 = this.vr[iter46];
        output.writeI32(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.value.length);
    for (var iter47 in this.value)
    {
      if (this.value.hasOwnProperty(iter47))
      {
        iter47 = this.value[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeInteger_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeInteger_result.prototype = {};
FmuService_writeInteger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeInteger_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeInteger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeReal_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeReal_args.prototype = {};
FmuService_writeReal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.vr = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readI32().value;
          this.vr.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.value = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = input.readDouble().value;
          this.value.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeReal_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeReal_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter62 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter62))
      {
        iter62 = this.vr[iter62];
        output.writeI32(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.DOUBLE, this.value.length);
    for (var iter63 in this.value)
    {
      if (this.value.hasOwnProperty(iter63))
      {
        iter63 = this.value[iter63];
        output.writeDouble(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeReal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeReal_result.prototype = {};
FmuService_writeReal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeReal_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeReal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeString_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeString_args.prototype = {};
FmuService_writeString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.vr = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readI32().value;
          this.vr.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.value = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString().value;
          this.value.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeString_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeString_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter78 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter78))
      {
        iter78 = this.vr[iter78];
        output.writeI32(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.value.length);
    for (var iter79 in this.value)
    {
      if (this.value.hasOwnProperty(iter79))
      {
        iter79 = this.value[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeString_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeString_result.prototype = {};
FmuService_writeString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeString_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeBoolean_args = function(args) {
  this.instance_id = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_writeBoolean_args.prototype = {};
FmuService_writeBoolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.vr = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI32().value;
          this.vr.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size87 = 0;
        var _rtmp391;
        this.value = [];
        var _etype90 = 0;
        _rtmp391 = input.readListBegin();
        _etype90 = _rtmp391.etype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var elem93 = null;
          elem93 = input.readBool().value;
          this.value.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeBoolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeBoolean_args');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.vr.length);
    for (var iter94 in this.vr)
    {
      if (this.vr.hasOwnProperty(iter94))
      {
        iter94 = this.vr[iter94];
        output.writeI32(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.BOOL, this.value.length);
    for (var iter95 in this.value)
    {
      if (this.value.hasOwnProperty(iter95))
      {
        iter95 = this.value[iter95];
        output.writeBool(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_writeBoolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_writeBoolean_result.prototype = {};
FmuService_writeBoolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_writeBoolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_writeBoolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
FmuServiceClient.prototype = {};
FmuServiceClient.prototype.getModelDescriptionXml = function(fmu_id, callback) {
  this.send_getModelDescriptionXml(fmu_id, callback); 
  if (!callback) {
    return this.recv_getModelDescriptionXml();
  }
};

FmuServiceClient.prototype.send_getModelDescriptionXml = function(fmu_id, callback) {
  this.output.writeMessageBegin('getModelDescriptionXml', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmu_id: fmu_id
  };
  var args = new FmuService_getModelDescriptionXml_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getModelDescriptionXml();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_getModelDescriptionXml = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getModelDescriptionXml_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getModelDescriptionXml failed: unknown result';
};
FmuServiceClient.prototype.getModelDescription = function(fmu_id, callback) {
  this.send_getModelDescription(fmu_id, callback); 
  if (!callback) {
    return this.recv_getModelDescription();
  }
};

FmuServiceClient.prototype.send_getModelDescription = function(fmu_id, callback) {
  this.output.writeMessageBegin('getModelDescription', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmu_id: fmu_id
  };
  var args = new FmuService_getModelDescription_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getModelDescription();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_getModelDescription = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_getModelDescription_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getModelDescription failed: unknown result';
};
FmuServiceClient.prototype.createInstanceFromCS = function(fmu_id, callback) {
  this.send_createInstanceFromCS(fmu_id, callback); 
  if (!callback) {
    return this.recv_createInstanceFromCS();
  }
};

FmuServiceClient.prototype.send_createInstanceFromCS = function(fmu_id, callback) {
  this.output.writeMessageBegin('createInstanceFromCS', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmu_id: fmu_id
  };
  var args = new FmuService_createInstanceFromCS_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createInstanceFromCS();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_createInstanceFromCS = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_createInstanceFromCS_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createInstanceFromCS failed: unknown result';
};
FmuServiceClient.prototype.createInstanceFromME = function(fmu_id, solver, callback) {
  this.send_createInstanceFromME(fmu_id, solver, callback); 
  if (!callback) {
    return this.recv_createInstanceFromME();
  }
};

FmuServiceClient.prototype.send_createInstanceFromME = function(fmu_id, solver, callback) {
  this.output.writeMessageBegin('createInstanceFromME', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fmu_id: fmu_id,
    solver: solver
  };
  var args = new FmuService_createInstanceFromME_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createInstanceFromME();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_createInstanceFromME = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_createInstanceFromME_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createInstanceFromME failed: unknown result';
};
FmuServiceClient.prototype.init = function(instance_id, start, stop, callback) {
  this.send_init(instance_id, start, stop, callback); 
  if (!callback) {
    return this.recv_init();
  }
};

FmuServiceClient.prototype.send_init = function(instance_id, start, stop, callback) {
  this.output.writeMessageBegin('init', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    start: start,
    stop: stop
  };
  var args = new FmuService_init_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_init();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_init = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_init_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'init failed: unknown result';
};
FmuServiceClient.prototype.step = function(instance_id, step_size, callback) {
  this.send_step(instance_id, step_size, callback); 
  if (!callback) {
    return this.recv_step();
  }
};

FmuServiceClient.prototype.send_step = function(instance_id, step_size, callback) {
  this.output.writeMessageBegin('step', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    step_size: step_size
  };
  var args = new FmuService_step_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_step();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_step = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'step failed: unknown result';
};
FmuServiceClient.prototype.reset = function(instance_id, callback) {
  this.send_reset(instance_id, callback); 
  if (!callback) {
    return this.recv_reset();
  }
};

FmuServiceClient.prototype.send_reset = function(instance_id, callback) {
  this.output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id
  };
  var args = new FmuService_reset_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reset();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_reset = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_reset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reset failed: unknown result';
};
FmuServiceClient.prototype.terminate = function(instance_id, callback) {
  this.send_terminate(instance_id, callback); 
  if (!callback) {
    return this.recv_terminate();
  }
};

FmuServiceClient.prototype.send_terminate = function(instance_id, callback) {
  this.output.writeMessageBegin('terminate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id
  };
  var args = new FmuService_terminate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_terminate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_terminate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_terminate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terminate failed: unknown result';
};
FmuServiceClient.prototype.readInteger = function(instance_id, vr, callback) {
  this.send_readInteger(instance_id, vr, callback); 
  if (!callback) {
    return this.recv_readInteger();
  }
};

FmuServiceClient.prototype.send_readInteger = function(instance_id, vr, callback) {
  this.output.writeMessageBegin('readInteger', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr
  };
  var args = new FmuService_readInteger_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readInteger();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readInteger = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readInteger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readInteger failed: unknown result';
};
FmuServiceClient.prototype.readReal = function(instance_id, vr, callback) {
  this.send_readReal(instance_id, vr, callback); 
  if (!callback) {
    return this.recv_readReal();
  }
};

FmuServiceClient.prototype.send_readReal = function(instance_id, vr, callback) {
  this.output.writeMessageBegin('readReal', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr
  };
  var args = new FmuService_readReal_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readReal();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readReal = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readReal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readReal failed: unknown result';
};
FmuServiceClient.prototype.readString = function(instance_id, vr, callback) {
  this.send_readString(instance_id, vr, callback); 
  if (!callback) {
    return this.recv_readString();
  }
};

FmuServiceClient.prototype.send_readString = function(instance_id, vr, callback) {
  this.output.writeMessageBegin('readString', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr
  };
  var args = new FmuService_readString_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readString();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readString = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readString failed: unknown result';
};
FmuServiceClient.prototype.readBoolean = function(instance_id, vr, callback) {
  this.send_readBoolean(instance_id, vr, callback); 
  if (!callback) {
    return this.recv_readBoolean();
  }
};

FmuServiceClient.prototype.send_readBoolean = function(instance_id, vr, callback) {
  this.output.writeMessageBegin('readBoolean', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr
  };
  var args = new FmuService_readBoolean_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_readBoolean();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_readBoolean = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_readBoolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readBoolean failed: unknown result';
};
FmuServiceClient.prototype.writeInteger = function(instance_id, vr, value, callback) {
  this.send_writeInteger(instance_id, vr, value, callback); 
  if (!callback) {
    return this.recv_writeInteger();
  }
};

FmuServiceClient.prototype.send_writeInteger = function(instance_id, vr, value, callback) {
  this.output.writeMessageBegin('writeInteger', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeInteger_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeInteger();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeInteger = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeInteger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeInteger failed: unknown result';
};
FmuServiceClient.prototype.writeReal = function(instance_id, vr, value, callback) {
  this.send_writeReal(instance_id, vr, value, callback); 
  if (!callback) {
    return this.recv_writeReal();
  }
};

FmuServiceClient.prototype.send_writeReal = function(instance_id, vr, value, callback) {
  this.output.writeMessageBegin('writeReal', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeReal_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeReal();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeReal = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeReal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeReal failed: unknown result';
};
FmuServiceClient.prototype.writeString = function(instance_id, vr, value, callback) {
  this.send_writeString(instance_id, vr, value, callback); 
  if (!callback) {
    return this.recv_writeString();
  }
};

FmuServiceClient.prototype.send_writeString = function(instance_id, vr, value, callback) {
  this.output.writeMessageBegin('writeString', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeString_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeString();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeString = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeString failed: unknown result';
};
FmuServiceClient.prototype.writeBoolean = function(instance_id, vr, value, callback) {
  this.send_writeBoolean(instance_id, vr, value, callback); 
  if (!callback) {
    return this.recv_writeBoolean();
  }
};

FmuServiceClient.prototype.send_writeBoolean = function(instance_id, vr, value, callback) {
  this.output.writeMessageBegin('writeBoolean', Thrift.MessageType.CALL, this.seqid);
  var params = {
    instance_id: instance_id,
    vr: vr,
    value: value
  };
  var args = new FmuService_writeBoolean_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_writeBoolean();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

FmuServiceClient.prototype.recv_writeBoolean = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_writeBoolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'writeBoolean failed: unknown result';
};
